/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Reads the &lt;code&gt;header-part&lt;/code&gt; of the current                               * &lt;p&gt;Reads the &lt;code&gt;header-part&lt;/code&gt; of the current                            
* &lt;code&gt;encapsulation&lt;/code&gt;.                                                              * &lt;code&gt;encapsulation&lt;/code&gt;.                                                           
*                                                                                                      *                                                                                                   
* &lt;p&gt;Headers are returned verbatim to the input stream, including the                            * &lt;p&gt;Headers are returned verbatim to the input stream, including the                         
* trailing &lt;code&gt;CRLF&lt;/code&gt; marker. Parsing is left to the                                * trailing &lt;code&gt;CRLF&lt;/code&gt; marker. Parsing is left to the                             
* application.                                                                                         * application.                                                                                      
*                                                                                                      *                                                                                                   
* &lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt; allow limiting maximum header size to                     * &lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt; allow limiting maximum header size to                  
* protect against abuse.                                                                               * protect against abuse.                                                                            
*                                                                                                      *                                                                                                   
* @return The &lt;code&gt;header-part&lt;/code&gt; of the current encapsulation.                       * @return The &lt;code&gt;header-part&lt;/code&gt; of the current encapsulation.                    
*                                                                                                      *                                                                                                   
* @throws FileUploadIOException if the bytes read from the stream exceeded the size limits.            * @throws FileUploadIOException if the bytes read from the stream exceeded the size limits.         
* @throws MalformedStreamException if the stream ends unexpectedly.                                    * @throws MalformedStreamException if the stream ends unexpectedly.                                 
*/                                                                                                     */                                                                                                  
public String readHeaders() throws FileUploadIOException, MalformedStreamException {                   public String readHeaders() throws FileUploadIOException, MalformedStreamException {                
int i = 0;                                                                                             int i = 0;                                                                                          
byte b;                                                                                                byte b;                                                                                             
// to support multi-byte characters                                                                    // to support multi-byte characters                                                                 
ByteArrayOutputStream baos = new ByteArrayOutputStream();                                              ByteArrayOutputStream baos = new ByteArrayOutputStream();                                           
int size = 0;                                                                                          int size = 0;                                                                                       
while (i &lt; HEADER_SEPARATOR.length) {                                                               while (i &lt; HEADER_SEPARATOR.length) {                                                            
try {                                                                                                  try {                                                                                               
b = readByte();                                                                                        b = readByte();                                                                                     
} catch (FileUploadIOException e) {                                                                    } catch (FileUploadIOException e) {                                                                 
// wraps a SizeException, re-throw as it will be unwrapped later                                       // wraps a SizeException, re-throw as it will be unwrapped later                                    
throw e;                                                                                               throw e;                                                                                            
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
throw new MalformedStreamException("Stream ended unexpectedly");                                       throw new MalformedStreamException("Stream ended unexpectedly");                                    
}                                                                                                      }                                                                                                   
if (++size &gt; HEADER_PART_SIZE_MAX) {                                                                if (++size &gt; HEADER_PART_SIZE_MAX) {                                                             
throw new MalformedStreamException(format("Header section has more than %s bytes (maybe it is not pr | throw new MalformedStreamException(format("Header section has more than %s bytes (maybe it is not pr
}                                                                                                      }                                                                                                   
if (b == HEADER_SEPARATOR[i]) {                                                                        if (b == HEADER_SEPARATOR[i]) {                                                                     
i++;                                                                                                   i++;                                                                                                
} else {                                                                                               } else {                                                                                            
i = 0;                                                                                                 i = 0;                                                                                              
}                                                                                                      }                                                                                                   
baos.write(b);                                                                                         baos.write(b);                                                                                      
}                                                                                                      }                                                                                                   
String headers = null;                                                                                 String headers = null;                                                                              
if (headerEncoding != null) {                                                                          if (headerEncoding != null) {                                                                       
try {                                                                                                  try {                                                                                               
headers = baos.toString(headerEncoding);                                                               headers = baos.toString(headerEncoding);                                                            
} catch (UnsupportedEncodingException e) {                                                             } catch (UnsupportedEncodingException e) {                                                          
// Fall back to platform default if specified encoding is not                                          // Fall back to platform default if specified encoding is not                                       
// supported.                                                                                          // supported.                                                                                       
headers = baos.toString();                                                                             headers = baos.toString();                                                                          
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
headers = baos.toString();                                                                             headers = baos.toString();                                                                          
}                                                                                                      }                                                                                                   
return headers;                                                                                        return headers;                                                                                     
}                                                                                                      }                                                                                                   
