/**                                                                                                    /**                                                                                                 
* Creates a new instance.                                                                              * Creates a new instance.                                                                           
*                                                                                                      *                                                                                                   
* @param ctx The request context.                                                                      * @param ctx The request context.                                                                   
* @throws FileUploadException An error occurred while                                                  * @throws FileUploadException An error occurred while                                               
*   parsing the request.                                                                               *   parsing the request.                                                                            
* @throws IOException An I/O error occurred.                                                           * @throws IOException An I/O error occurred.                                                        
*/                                                                                                     */                                                                                                  
FileItemIteratorImpl(RequestContext ctx) throws FileUploadException, IOException {                     FileItemIteratorImpl(RequestContext ctx) throws FileUploadException, IOException {                  
if (ctx == null) {                                                                                     if (ctx == null) {                                                                                  
throw new NullPointerException("ctx parameter");                                                       throw new NullPointerException("ctx parameter");                                                    
}                                                                                                      }                                                                                                   
String contentType = ctx.getContentType();                                                             String contentType = ctx.getContentType();                                                          
if ((null == contentType) || (!contentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART))) {       if ((null == contentType) || (!contentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART))) {    
throw new InvalidContentTypeException(format("the request doesn't contain a %s or %s stream, content   throw new InvalidContentTypeException(format("the request doesn't contain a %s or %s stream, content
}                                                                                                      }                                                                                                   
InputStream input = ctx.getInputStream();                                                              InputStream input = ctx.getInputStream();                                                           
// still has to be backward compatible                                                                 // still has to be backward compatible                                                              
@SuppressWarnings("deprecation")                                                                       @SuppressWarnings("deprecation")                                                                    
final int contentLengthInt = ctx.getContentLength();                                                   final int contentLengthInt = ctx.getContentLength();                                                
final long requestSize = UploadContext.class.isAssignableFrom(ctx.getClass()) ? // Inline conditiona   final long requestSize = UploadContext.class.isAssignableFrom(ctx.getClass()) ? // Inline conditiona
((UploadContext) ctx).contentLength() : contentLengthInt;                                              ((UploadContext) ctx).contentLength() : contentLengthInt;                                           
// CHECKSTYLE:ON                                                                                       // CHECKSTYLE:ON                                                                                    
if (sizeMax &gt;= 0) {                                                                                 if (sizeMax &gt;= 0) {                                                                              
if (requestSize != -1 && requestSize &gt; sizeMax) {                                                   if (requestSize != -1 && requestSize &gt; sizeMax) {                                                
throw new SizeLimitExceededException(format("the request was rejected because its size (%s) exceeds    throw new SizeLimitExceededException(format("the request was rejected because its size (%s) exceeds 
}                                                                                                      }                                                                                                   
input = new LimitedInputStream(input, sizeMax) {                                                       input = new LimitedInputStream(input, sizeMax) {                                                    
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
protected void raiseError(long pSizeMax, long pCount) throws IOException {                             protected void raiseError(long pSizeMax, long pCount) throws IOException {                          
FileUploadException ex = new SizeLimitExceededException(format("the request was rejected because its   FileUploadException ex = new SizeLimitExceededException(format("the request was rejected because its
throw new FileUploadIOException(ex);                                                                   throw new FileUploadIOException(ex);                                                                
}                                                                                                      }                                                                                                   
};                                                                                                     };                                                                                                  
}                                                                                                      }                                                                                                   
String charEncoding = headerEncoding;                                                                  String charEncoding = headerEncoding;                                                               
if (charEncoding == null) {                                                                            if (charEncoding == null) {                                                                         
charEncoding = ctx.getCharacterEncoding();                                                             charEncoding = ctx.getCharacterEncoding();                                                          
}                                                                                                      }                                                                                                   
boundary = getBoundary(contentType);                                                                   boundary = getBoundary(contentType);                                                                
if (boundary == null) {                                                                                if (boundary == null) {                                                                             
throw new FileUploadException("the request was rejected because no multipart boundary was found");     throw new FileUploadException("the request was rejected because no multipart boundary was found");  
}                                                                                                      }                                                                                                   
notifier = new MultipartStream.ProgressNotifier(listener, requestSize);                                notifier = new MultipartStream.ProgressNotifier(listener, requestSize);                             
                                                                                                     | try {                                                                                               
multi = new MultipartStream(input, boundary, notifier);                                                multi = new MultipartStream(input, boundary, notifier);                                             
                                                                                                     | } catch (IllegalArgumentException iae) {                                                            
                                                                                                     | throw new InvalidContentTypeException(format("The boundary specified in the %s header is too long", 
                                                                                                     | }                                                                                                   
multi.setHeaderEncoding(charEncoding);                                                                 multi.setHeaderEncoding(charEncoding);                                                              
skipPreamble = true;                                                                                   skipPreamble = true;                                                                                
findNextItem();                                                                                        findNextItem();                                                                                     
}                                                                                                      }                                                                                                   
