/**
 * Creates a new instance.
 *
 * @param ctx The request context.
 * @throws FileUploadException An error occurred while
 *   parsing the request.
 * @throws IOException An I/O error occurred.
 */
FileItemIteratorImpl(RequestContext ctx) throws FileUploadException, IOException {
    if (ctx == null) {
        throw new NullPointerException("ctx parameter");
    }
    String contentType = ctx.getContentType();
    if ((null == contentType) || (!contentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART))) {
        throw new InvalidContentTypeException(format("the request doesn't contain a %s or %s stream, content type header is %s", MULTIPART_FORM_DATA, MULTIPART_FORM_DATA, contentType));
    }
    InputStream input = ctx.getInputStream();
    // still has to be backward compatible
    @SuppressWarnings("deprecation")
    final long requestSize = UploadContext.class.isAssignableFrom(ctx.getClass()) ? ((UploadContext) ctx).contentLength() : ctx.getContentLength();
    if (sizeMax >= 0) {
        if (requestSize != -1 && requestSize > sizeMax) {
            throw new SizeLimitExceededException(format("the request was rejected because its size (%s) exceeds the configured maximum (%s)", requestSize, sizeMax), requestSize, sizeMax);
        }
        input = new LimitedInputStream(input, sizeMax) {

            @Override
            protected void raiseError(long pSizeMax, long pCount) throws IOException {
                FileUploadException ex = new SizeLimitExceededException(format("the request was rejected because its size (%s) exceeds the configured maximum (%s)", pCount, pSizeMax), pCount, pSizeMax);
                throw new FileUploadIOException(ex);
            }
        };
    }
    String charEncoding = headerEncoding;
    if (charEncoding == null) {
        charEncoding = ctx.getCharacterEncoding();
    }
    boundary = getBoundary(contentType);
    if (boundary == null) {
        throw new FileUploadException("the request was rejected because no multipart boundary was found");
    }
    notifier = new MultipartStream.ProgressNotifier(listener, requestSize);
    multi = new MultipartStream(input, boundary, notifier);
    multi.setHeaderEncoding(charEncoding);
    skipPreamble = true;
    findNextItem();
}