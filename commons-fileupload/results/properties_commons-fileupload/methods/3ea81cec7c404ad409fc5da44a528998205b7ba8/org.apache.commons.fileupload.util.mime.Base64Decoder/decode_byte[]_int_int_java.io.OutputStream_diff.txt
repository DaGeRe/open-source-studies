/**                                                                                                    /**                                                                                                 
* decode the base 64 encoded byte data writing it to the given output stream,                          * decode the base 64 encoded byte data writing it to the given output stream,                       
* whitespace characters will be ignored.                                                               * whitespace characters will be ignored.                                                            
*                                                                                                      *                                                                                                   
* @return the number of bytes produced.                                                                * @return the number of bytes produced.                                                             
*/                                                                                                     */                                                                                                  
public int decode(byte[] data, int off, int length, OutputStream out) throws IOException {           | public static int decode(byte[] data, int off, int length, OutputStream out) throws IOException {   
byte b1, b2, b3, b4;                                                                                   byte b1, b2, b3, b4;                                                                                
int outLen = 0;                                                                                        int outLen = 0;                                                                                     
int end = off + length;                                                                                int end = off + length;                                                                             
while (end &gt; 0) {                                                                                   while (end &gt; 0) {                                                                                
if (!ignore((char) data[end - 1])) {                                                                   if (!ignore((char) data[end - 1])) {                                                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
end--;                                                                                                 end--;                                                                                              
}                                                                                                      }                                                                                                   
int i = off;                                                                                           int i = off;                                                                                        
int finish = end - 4;                                                                                  int finish = end - 4;                                                                               
while (i &lt; finish) {                                                                                while (i &lt; finish) {                                                                             
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b1 = decodingTable[data[i++]];                                                                       | b1 = DECODING_TABLE[data[i++]];                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b2 = decodingTable[data[i++]];                                                                       | b2 = DECODING_TABLE[data[i++]];                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b3 = decodingTable[data[i++]];                                                                       | b3 = DECODING_TABLE[data[i++]];                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b4 = decodingTable[data[i++]];                                                                       | b4 = DECODING_TABLE[data[i++]];                                                                     
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                          out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                          out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                       
out.write((b3 &lt;&lt; 6) | b4);                                                                       out.write((b3 &lt;&lt; 6) | b4);                                                                    
outLen += 3;                                                                                           outLen += 3;                                                                                        
}                                                                                                      }                                                                                                   
if (data[end - 2] == padding) {                                                                      | if (data[end - 2] == PADDING) {                                                                     
b1 = decodingTable[data[end - 4]];                                                                   | b1 = DECODING_TABLE[data[end - 4]];                                                                 
b2 = decodingTable[data[end - 3]];                                                                   | b2 = DECODING_TABLE[data[end - 3]];                                                                 
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                          out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
outLen += 1;                                                                                           outLen += 1;                                                                                        
} else if (data[end - 1] == padding) {                                                               | } else if (data[end - 1] == PADDING) {                                                              
b1 = decodingTable[data[end - 4]];                                                                   | b1 = DECODING_TABLE[data[end - 4]];                                                                 
b2 = decodingTable[data[end - 3]];                                                                   | b2 = DECODING_TABLE[data[end - 3]];                                                                 
b3 = decodingTable[data[end - 2]];                                                                   | b3 = DECODING_TABLE[data[end - 2]];                                                                 
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                          out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                          out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                       
outLen += 2;                                                                                           outLen += 2;                                                                                        
} else {                                                                                               } else {                                                                                            
b1 = decodingTable[data[end - 4]];                                                                   | b1 = DECODING_TABLE[data[end - 4]];                                                                 
b2 = decodingTable[data[end - 3]];                                                                   | b2 = DECODING_TABLE[data[end - 3]];                                                                 
b3 = decodingTable[data[end - 2]];                                                                   | b3 = DECODING_TABLE[data[end - 2]];                                                                 
b4 = decodingTable[data[end - 1]];                                                                   | b4 = DECODING_TABLE[data[end - 1]];                                                                 
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                          out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                          out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                       
out.write((b3 &lt;&lt; 6) | b4);                                                                       out.write((b3 &lt;&lt; 6) | b4);                                                                    
outLen += 3;                                                                                           outLen += 3;                                                                                        
}                                                                                                      }                                                                                                   
return outLen;                                                                                         return outLen;                                                                                      
}                                                                                                      }                                                                                                   
