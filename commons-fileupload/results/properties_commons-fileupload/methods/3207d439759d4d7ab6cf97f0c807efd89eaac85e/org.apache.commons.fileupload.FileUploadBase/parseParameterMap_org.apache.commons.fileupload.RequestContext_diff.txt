/**
 * Processes an <a href="http://www.ietf.org/rfc/rfc1867.txt">RFC 1867</a>
 * compliant <code>multipart/form-data</code> stream.
 *
 * @param ctx The context for the request to be parsed.
 *
 * @return A map of <code>FileItem</code> instances parsed from the request.
 *
 * @throws FileUploadException if there are problems reading/parsing
 *                             the request or storing files.
 *
 * @since 1.3
 */
public Map<String, List<FileItem>> parseParameterMap(RequestContext ctx) throws FileUploadException {
    final List<FileItem> items = parseRequest(ctx);
    final Map<String, List<FileItem>> itemsMap = new HashMap<String, List<FileItem>>(items.size());
    for (FileItem fileItem : items) {
        String fieldName = fileItem.getFieldName();
        List<FileItem> mappedItems = itemsMap.get(fieldName);
        if (mappedItems == null) {
            mappedItems = new ArrayList<FileItem>();
            itemsMap.put(fieldName, mappedItems);
        }
        mappedItems.add(fileItem);
    }
    return itemsMap;
}