/**                                                                                                    /**                                                                                                 
* Decode a string of text obtained from a mail header into                                             * Decode a string of text obtained from a mail header into                                          
* it's proper form.  The text generally will consist of a                                              * it's proper form.  The text generally will consist of a                                           
* string of tokens, some of which may be encoded using                                                 * string of tokens, some of which may be encoded using                                              
* base64 encoding.                                                                                     * base64 encoding.                                                                                  
*                                                                                                      *                                                                                                   
* @param text   The text to decode.                                                                    * @param text   The text to decode.                                                                 
*                                                                                                      *                                                                                                   
* @return The decoded test string.                                                                     * @return The decoded test string.                                                                  
* @throws UnsupportedEncodingException                                                                 * @throws UnsupportedEncodingException                                                              
*/                                                                                                     */                                                                                                  
public static String decodeText(String text) throws UnsupportedEncodingException {                     public static String decodeText(String text) throws UnsupportedEncodingException {                  
// if the text contains any encoded tokens, those tokens will be marked with "=?".  If the             // if the text contains any encoded tokens, those tokens will be marked with "=?".  If the          
// source string doesn't contain that sequent, no decoding is required.                                // source string doesn't contain that sequent, no decoding is required.                             
if (text.indexOf("=?") &lt; 0) {                                                                       if (text.indexOf("=?") &lt; 0) {                                                                    
return text;                                                                                           return text;                                                                                        
}                                                                                                      }                                                                                                   
int offset = 0;                                                                                        int offset = 0;                                                                                     
int endOffset = text.length();                                                                         int endOffset = text.length();                                                                      
int startWhiteSpace = -1;                                                                              int startWhiteSpace = -1;                                                                           
int endWhiteSpace = -1;                                                                                int endWhiteSpace = -1;                                                                             
StringBuffer decodedText = new StringBuffer(text.length());                                            StringBuffer decodedText = new StringBuffer(text.length());                                         
boolean previousTokenEncoded = false;                                                                  boolean previousTokenEncoded = false;                                                               
while (offset &lt; endOffset) {                                                                        while (offset &lt; endOffset) {                                                                     
char ch = text.charAt(offset);                                                                         char ch = text.charAt(offset);                                                                      
// is this a whitespace character?                                                                     // is this a whitespace character?                                                                  
if (LINEAR_WHITESPACE.indexOf(ch) != -1) {                                                             if (LINEAR_WHITESPACE.indexOf(ch) != -1) {                                                          
startWhiteSpace = offset;                                                                              startWhiteSpace = offset;                                                                           
while (offset &lt; endOffset) {                                                                        while (offset &lt; endOffset) {                                                                     
// step over the white space characters.                                                               // step over the white space characters.                                                            
ch = text.charAt(offset);                                                                              ch = text.charAt(offset);                                                                           
if (LINEAR_WHITESPACE.indexOf(ch) != -1) {                                                             if (LINEAR_WHITESPACE.indexOf(ch) != -1) {                                                          
offset++;                                                                                              offset++;                                                                                           
} else {                                                                                               } else {                                                                                            
// record the location of the first non lwsp and drop down to process the                              // record the location of the first non lwsp and drop down to process the                           
// token characters.                                                                                   // token characters.                                                                                
endWhiteSpace = offset;                                                                                endWhiteSpace = offset;                                                                             
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// we have a word token.  We need to scan over the word and then try to parse it.                      // we have a word token.  We need to scan over the word and then try to parse it.                   
int wordStart = offset;                                                                                int wordStart = offset;                                                                             
while (offset &lt; endOffset) {                                                                        while (offset &lt; endOffset) {                                                                     
// step over the white space characters.                                                               // step over the white space characters.                                                            
ch = text.charAt(offset);                                                                              ch = text.charAt(offset);                                                                           
if (LINEAR_WHITESPACE.indexOf(ch) == -1) {                                                             if (LINEAR_WHITESPACE.indexOf(ch) == -1) {                                                          
offset++;                                                                                              offset++;                                                                                           
} else {                                                                                               } else {                                                                                            
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// NB:  Trailing whitespace on these header strings will just be discarded.                            // NB:  Trailing whitespace on these header strings will just be discarded.                         
}                                                                                                      }                                                                                                   
// pull out the word token.                                                                            // pull out the word token.                                                                         
String word = text.substring(wordStart, offset);                                                       String word = text.substring(wordStart, offset);                                                    
// is the token encoded?  decode the word                                                              // is the token encoded?  decode the word                                                           
if (word.startsWith("=?")) {                                                                           if (word.startsWith("=?")) {                                                                        
try {                                                                                                  try {                                                                                               
// if this gives a parsing failure, treat it like a non-encoded word.                                  // if this gives a parsing failure, treat it like a non-encoded word.                               
String decodedWord = decodeWord(word);                                                                 String decodedWord = decodeWord(word);                                                              
// are any whitespace characters significant?  Append 'em if we've got 'em.                            // are any whitespace characters significant?  Append 'em if we've got 'em.                         
if (!previousTokenEncoded) {                                                                         | if (!previousTokenEncoded && startWhiteSpace != -1) {                                               
if (startWhiteSpace != -1) {                                                                         |                                                                                                     
decodedText.append(text.substring(startWhiteSpace, endWhiteSpace));                                    decodedText.append(text.substring(startWhiteSpace, endWhiteSpace));                                 
startWhiteSpace = -1;                                                                                  startWhiteSpace = -1;                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                    |                                                                                                     
// this is definitely a decoded token.                                                                 // this is definitely a decoded token.                                                              
previousTokenEncoded = true;                                                                           previousTokenEncoded = true;                                                                        
// and add this to the text.                                                                           // and add this to the text.                                                                        
decodedText.append(decodedWord);                                                                       decodedText.append(decodedWord);                                                                    
// we continue parsing from here...we allow parsing errors to fall through                             // we continue parsing from here...we allow parsing errors to fall through                          
// and get handled as normal text.                                                                     // and get handled as normal text.                                                                  
continue;                                                                                              continue;                                                                                           
} catch (ParseException e) {                                                                           } catch (ParseException e) {                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// this is a normal token, so it doesn't matter what the previous token was.  Add the white space      // this is a normal token, so it doesn't matter what the previous token was.  Add the white space   
// if we have it.                                                                                      // if we have it.                                                                                   
if (startWhiteSpace != -1) {                                                                           if (startWhiteSpace != -1) {                                                                        
decodedText.append(text.substring(startWhiteSpace, endWhiteSpace));                                    decodedText.append(text.substring(startWhiteSpace, endWhiteSpace));                                 
startWhiteSpace = -1;                                                                                  startWhiteSpace = -1;                                                                               
}                                                                                                      }                                                                                                   
// this is not a decoded token.                                                                        // this is not a decoded token.                                                                     
previousTokenEncoded = false;                                                                          previousTokenEncoded = false;                                                                       
decodedText.append(word);                                                                              decodedText.append(word);                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return decodedText.toString();                                                                         return decodedText.toString();                                                                      
}                                                                                                      }                                                                                                   
