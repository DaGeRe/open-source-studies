/**                                                                                                    /**                                                                                                 
* Decode the base 64 encoded byte data writing it to the given output stream,                          * Decode the base 64 encoded byte data writing it to the given output stream,                       
* whitespace characters will be ignored.                                                               * whitespace characters will be ignored.                                                            
*                                                                                                      *                                                                                                   
* @param data the buffer containing the Base64-encoded data                                            * @param data the buffer containing the Base64-encoded data                                         
* @param out the output stream to hold the decoded bytes                                               * @param out the output stream to hold the decoded bytes                                            
*                                                                                                      *                                                                                                   
* @return the number of bytes produced.                                                                * @return the number of bytes produced.                                                             
*/                                                                                                     */                                                                                                  
public static int decode(byte[] data, OutputStream out) throws IOException {                           public static int decode(byte[] data, OutputStream out) throws IOException {                        
int outLen = 0;                                                                                        int outLen = 0;                                                                                     
byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];                                                        byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];                                                     
int cachedBytes = 0;                                                                                   int cachedBytes = 0;                                                                                
for (byte b : data) {                                                                                  for (byte b : data) {                                                                               
final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];                                                 final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];                                              
if (d == INVALID_BYTE) {                                                                               if (d == INVALID_BYTE) {                                                                            
// Ignore invalid bytes                                                                                // Ignore invalid bytes                                                                             
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
cache[cachedBytes++] = d;                                                                              cache[cachedBytes++] = d;                                                                           
if (cachedBytes == INPUT_BYTES_PER_CHUNK) {                                                            if (cachedBytes == INPUT_BYTES_PER_CHUNK) {                                                         
                                                                                                     | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 4 LINES                                                   
                                                                                                     | final byte b1 = cache[0];                                                                           
                                                                                                     | final byte b2 = cache[1];                                                                           
                                                                                                     | final byte b3 = cache[2];                                                                           
                                                                                                     | final byte b4 = cache[3];                                                                           
                                                                                                     | if (b1 == PAD_BYTE || b2 == PAD_BYTE) {                                                             
                                                                                                     | throw new IOException("Invalid Base64 input: incorrect padding, first two bytes cannot be padding");
                                                                                                     | }                                                                                                   
// Convert 4 6-bit bytes to 3 8-bit bytes                                                              // Convert 4 6-bit bytes to 3 8-bit bytes                                                           
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                       // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
// 6 bits of b1 plus 2 bits of b2                                                                      // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                            | out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
outLen++;                                                                                              outLen++;                                                                                           
if (cache[2] != PAD_BYTE) {                                                                          | if (b3 != PAD_BYTE) {                                                                               
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                       // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
// 4 bits of b2 plus 4 bits of b3                                                                      // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                            | out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                       
outLen++;                                                                                              outLen++;                                                                                           
                                                                                                     | if (b4 != PAD_BYTE) {                                                                               
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                       // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
if (cache[3] != PAD_BYTE) {                                                                          |                                                                                                     
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                     |                                                                                                     
// 2 bits of b3 plus 6 bits of b4                                                                      // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                         | out.write((b3 &lt;&lt; 6) | b4);                                                                    
outLen++;                                                                                              outLen++;                                                                                           
}                                                                                                      }                                                                                                   
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                     | } else if (b4 != PAD_BYTE) {                                                                        
} else if (cache[3] != PAD_BYTE) {                                                                   |                                                                                                     
// if byte 3 is pad, byte 4 must be pad too                                                            // if byte 3 is pad, byte 4 must be pad too                                                         
throw new IOException("Invalid Base64 input: incorrect padding");                                    | throw new // line wrap to avoid 120 char limit                                                      
                                                                                                     | IOException("Invalid Base64 input: incorrect padding, 4th byte must be padding if 3rd byte is");    
}                                                                                                      }                                                                                                   
cachedBytes = 0;                                                                                       cachedBytes = 0;                                                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Check for anything left over                                                                        // Check for anything left over                                                                     
if (cachedBytes != 0) {                                                                                if (cachedBytes != 0) {                                                                             
throw new IOException("Invalid Base64 input: truncated");                                              throw new IOException("Invalid Base64 input: truncated");                                           
}                                                                                                      }                                                                                                   
return outLen;                                                                                         return outLen;                                                                                      
}                                                                                                      }                                                                                                   
