/**
 * <p> Constructs a <code>MultipartStream</code> with a custom size buffer.
 *
 * <p> Note that the buffer must be at least big enough to contain the
 * boundary string, plus 4 characters for CR/LF and double dash, plus at
 * least one byte of data.  Too small a buffer size setting will degrade
 * performance.
 *
 * @param input    The <code>InputStream</code> to serve as a data source.
 * @param boundary The token used for dividing the stream into
 *                 <code>encapsulations</code>.
 * @param bufSize  The size of the buffer to be used, in bytes.
 * @param pNotifier The notifier, which is used for calling the
 *                  progress listener, if any.
 *
 * @throws IllegalArgumentException If the buffer size is too small
 *
 * @since 1.3.1
 */
public MultipartStream(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier) {
    if (boundary == null) {
        throw new IllegalArgumentException("boundary may not be null");
    }
    // We prepend CR/LF to the boundary to chop trailing CR/LF from
    // body-data tokens.
    this.boundaryLength = boundary.length + BOUNDARY_PREFIX.length;
    if (bufSize < this.boundaryLength + 1) {
        throw new IllegalArgumentException("The buffer size specified for the MultipartStream is too small");
    }
    this.input = input;
    this.bufSize = Math.max(bufSize, boundaryLength * 2);
    this.buffer = new byte[this.bufSize];
    this.notifier = pNotifier;
    this.boundary = new byte[this.boundaryLength];
    this.boundaryTable = new int[this.boundaryLength + 1];
    this.keepRegion = this.boundary.length;
    System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary, 0, BOUNDARY_PREFIX.length);
    System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length);
    computeBoundaryTable();
    head = 0;
    tail = 0;
}