/**                                                                                                    /**                                                                                                 
* Finds the beginning of the first &lt;code&gt;encapsulation&lt;/code&gt;.                             * Finds the beginning of the first &lt;code&gt;encapsulation&lt;/code&gt;.                          
*                                                                                                      *                                                                                                   
* @return &lt;code&gt;true&lt;/code&gt; if an &lt;code&gt;encapsulation&lt;/code&gt; was found in      * @return &lt;code&gt;true&lt;/code&gt; if an &lt;code&gt;encapsulation&lt;/code&gt; was found in   
*         the stream.                                                                                  *         the stream.                                                                               
*                                                                                                      *                                                                                                   
* @throws IOException if an i/o error occurs.                                                          * @throws IOException if an i/o error occurs.                                                       
*/                                                                                                     */                                                                                                  
public boolean skipPreamble() throws IOException {                                                     public boolean skipPreamble() throws IOException {                                                  
// First delimiter may be not preceeded with a CRLF.                                                   // First delimiter may be not preceeded with a CRLF.                                                
System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);                                       System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);                                    
boundaryLength = boundary.length - 2;                                                                  boundaryLength = boundary.length - 2;                                                               
                                                                                                     | computeBoundaryTable();                                                                             
try {                                                                                                  try {                                                                                               
// Discard all data up to the delimiter.                                                               // Discard all data up to the delimiter.                                                            
discardBodyData();                                                                                     discardBodyData();                                                                                  
// Read boundary - if succeeded, the stream contains an                                                // Read boundary - if succeeded, the stream contains an                                             
// encapsulation.                                                                                      // encapsulation.                                                                                   
return readBoundary();                                                                                 return readBoundary();                                                                              
} catch (MalformedStreamException e) {                                                                 } catch (MalformedStreamException e) {                                                              
return false;                                                                                          return false;                                                                                       
} finally {                                                                                            } finally {                                                                                         
// Restore delimiter.                                                                                  // Restore delimiter.                                                                               
System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);                                       System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);                                    
boundaryLength = boundary.length;                                                                      boundaryLength = boundary.length;                                                                   
boundary[0] = CR;                                                                                      boundary[0] = CR;                                                                                   
boundary[1] = LF;                                                                                      boundary[1] = LF;                                                                                   
                                                                                                     | computeBoundaryTable();                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
