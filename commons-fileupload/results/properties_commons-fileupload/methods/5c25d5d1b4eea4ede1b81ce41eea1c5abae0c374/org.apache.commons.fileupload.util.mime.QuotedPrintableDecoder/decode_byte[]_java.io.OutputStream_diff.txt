/**                                                                                                    /**                                                                                                 
* Decode the encoded byte data writing it to the given output stream.                                  * Decode the encoded byte data writing it to the given output stream.                               
*                                                                                                      *                                                                                                   
* @param data   The array of byte data to decode.                                                      * @param data   The array of byte data to decode.                                                   
* @param out    The output stream used to return the decoded data.                                     * @param out    The output stream used to return the decoded data.                                  
*                                                                                                      *                                                                                                   
* @return the number of bytes produced.                                                                * @return the number of bytes produced.                                                             
* @exception IOException                                                                               * @exception IOException                                                                            
*/                                                                                                     */                                                                                                  
public static int decode(byte[] data, OutputStream out) throws IOException {                           public static int decode(byte[] data, OutputStream out) throws IOException {                        
int off = 0;                                                                                           int off = 0;                                                                                        
int length = data.length;                                                                              int length = data.length;                                                                           
int endOffset = off + length;                                                                          int endOffset = off + length;                                                                       
int bytesWritten = 0;                                                                                  int bytesWritten = 0;                                                                               
while (off &lt; endOffset) {                                                                           while (off &lt; endOffset) {                                                                        
byte ch = data[off++];                                                                                 byte ch = data[off++];                                                                              
// space characters were translated to '_' on encode, so we need to translate them back.               // space characters were translated to '_' on encode, so we need to translate them back.            
if (ch == '_') {                                                                                       if (ch == '_') {                                                                                    
out.write(' ');                                                                                        out.write(' ');                                                                                     
} else if (ch == '=') {                                                                                } else if (ch == '=') {                                                                             
// we found an encoded character.  Reduce the 3 char sequence to one.                                  // we found an encoded character.  Reduce the 3 char sequence to one.                               
// but first, make sure we have two characters to work with.                                           // but first, make sure we have two characters to work with.                                        
if (off + 1 &gt;= endOffset) {                                                                         if (off + 1 &gt;= endOffset) {                                                                      
throw new IOException("Invalid quoted printable encoding");                                          | throw new IOException("Invalid quoted printable encoding; truncated escape sequence");              
}                                                                                                      }                                                                                                   
// convert the two bytes back from hex.                                                                // convert the two bytes back from hex.                                                             
byte b1 = data[off++];                                                                                 byte b1 = data[off++];                                                                              
byte b2 = data[off++];                                                                                 byte b2 = data[off++];                                                                              
// we've found an encoded carriage return.  The next char needs to be a newline                        // we've found an encoded carriage return.  The next char needs to be a newline                     
if (b1 == '\r') {                                                                                      if (b1 == '\r') {                                                                                   
if (b2 != '\n') {                                                                                      if (b2 != '\n') {                                                                                   
throw new IOException("Invalid quoted printable encoding");                                          | throw new IOException("Invalid quoted printable encoding; CR must be followed by LF");              
}                                                                                                      }                                                                                                   
// this was a soft linebreak inserted by the encoding.  We just toss this away                         // this was a soft linebreak inserted by the encoding.  We just toss this away                      
// on decode.                                                                                          // on decode.                                                                                       
} else {                                                                                               } else {                                                                                            
// this is a hex pair we need to convert back to a single byte.                                        // this is a hex pair we need to convert back to a single byte.                                     
byte c1 = DECODING_TABLE[b1];                                                                          byte c1 = DECODING_TABLE[b1];                                                                       
byte c2 = DECODING_TABLE[b2];                                                                          byte c2 = DECODING_TABLE[b2];                                                                       
out.write((c1 &lt;&lt; UPPER_NIBBLE_SHIFT) | c2);                                                      out.write((c1 &lt;&lt; UPPER_NIBBLE_SHIFT) | c2);                                                   
// 3 bytes in, one byte out                                                                            // 3 bytes in, one byte out                                                                         
bytesWritten++;                                                                                        bytesWritten++;                                                                                     
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// simple character, just write it out.                                                                // simple character, just write it out.                                                             
out.write(ch);                                                                                         out.write(ch);                                                                                      
bytesWritten++;                                                                                        bytesWritten++;                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return bytesWritten;                                                                                   return bytesWritten;                                                                                
}                                                                                                      }                                                                                                   
