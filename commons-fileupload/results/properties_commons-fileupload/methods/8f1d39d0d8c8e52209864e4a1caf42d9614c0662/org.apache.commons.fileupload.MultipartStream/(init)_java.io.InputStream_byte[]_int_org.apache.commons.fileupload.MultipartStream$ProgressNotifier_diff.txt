/**                                                                                                    /**                                                                                                 
* &lt;p&gt; Constructs a &lt;code&gt;MultipartStream&lt;/code&gt; with a custom size buffer.           * &lt;p&gt; Constructs a &lt;code&gt;MultipartStream&lt;/code&gt; with a custom size buffer.        
*                                                                                                      *                                                                                                   
* &lt;p&gt; Note that the buffer must be at least big enough to contain the                            * &lt;p&gt; Note that the buffer must be at least big enough to contain the                         
* boundary string, plus 4 characters for CR/LF and double dash, plus at                                * boundary string, plus 4 characters for CR/LF and double dash, plus at                             
* least one byte of data.  Too small a buffer size setting will degrade                                * least one byte of data.  Too small a buffer size setting will degrade                             
* performance.                                                                                         * performance.                                                                                      
*                                                                                                      *                                                                                                   
* @param input    The &lt;code&gt;InputStream&lt;/code&gt; to serve as a data source.                  * @param input    The &lt;code&gt;InputStream&lt;/code&gt; to serve as a data source.               
* @param boundary The token used for dividing the stream into                                          * @param boundary The token used for dividing the stream into                                       
*                 &lt;code&gt;encapsulations&lt;/code&gt;.                                             *                 &lt;code&gt;encapsulations&lt;/code&gt;.                                          
* @param bufSize  The size of the buffer to be used, in bytes.                                         * @param bufSize  The size of the buffer to be used, in bytes.                                      
* @param pNotifier The notifier, which is used for calling the                                         * @param pNotifier The notifier, which is used for calling the                                      
*                  progress listener, if any.                                                          *                  progress listener, if any.                                                       
*                                                                                                      *                                                                                                   
* @throws IllegalArgumentException If the buffer size is too small                                     * @throws IllegalArgumentException If the buffer size is too small                                  
*/                                                                                                     */                                                                                                  
public MultipartStream(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)    public MultipartStream(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier) 
                                                                                                     | if (boundary == null) {                                                                             
                                                                                                     | throw new IllegalArgumentException("boundary may not be null");                                     
                                                                                                     | }                                                                                                   
this.input = input;                                                                                    this.input = input;                                                                                 
this.bufSize = bufSize;                                                                                this.bufSize = bufSize;                                                                             
this.buffer = new byte[bufSize];                                                                       this.buffer = new byte[bufSize];                                                                    
this.notifier = pNotifier;                                                                             this.notifier = pNotifier;                                                                          
// We prepend CR/LF to the boundary to chop trailing CR/LF from                                        // We prepend CR/LF to the boundary to chop trailing CR/LF from                                     
// body-data tokens.                                                                                   // body-data tokens.                                                                                
this.boundaryLength = boundary.length + BOUNDARY_PREFIX.length;                                        this.boundaryLength = boundary.length + BOUNDARY_PREFIX.length;                                     
if (bufSize &lt; this.boundaryLength + 1) {                                                            if (bufSize &lt; this.boundaryLength + 1) {                                                         
throw new IllegalArgumentException("The buffer size specified for the MultipartStream is too small")   throw new IllegalArgumentException("The buffer size specified for the MultipartStream is too small")
}                                                                                                      }                                                                                                   
this.boundary = new byte[this.boundaryLength];                                                         this.boundary = new byte[this.boundaryLength];                                                      
this.keepRegion = this.boundary.length;                                                                this.keepRegion = this.boundary.length;                                                             
System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary, 0, BOUNDARY_PREFIX.length);                        System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary, 0, BOUNDARY_PREFIX.length);                     
System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length);                 System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length);              
head = 0;                                                                                              head = 0;                                                                                           
tail = 0;                                                                                              tail = 0;                                                                                           
}                                                                                                      }                                                                                                   
