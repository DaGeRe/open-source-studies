/**                                                                                                    /**                                                                                                 
* Decode the base 64 encoded byte data writing it to the given output stream,                          * Decode the base 64 encoded byte data writing it to the given output stream,                       
* whitespace characters will be ignored.                                                               * whitespace characters will be ignored.                                                            
*                                                                                                      *                                                                                                   
* @param data the buffer containing the Base64-encoded data                                            * @param data the buffer containing the Base64-encoded data                                         
* @param off the start offset (zero-based)                                                             * @param off the start offset (zero-based)                                                          
* @param length the number of bytes to convert                                                         * @param length the number of bytes to convert                                                      
* @param out the output stream to hold the decoded bytes                                               * @param out the output stream to hold the decoded bytes                                            
*                                                                                                      *                                                                                                   
* @return the number of bytes produced.                                                                * @return the number of bytes produced.                                                             
*/                                                                                                     */                                                                                                  
public static int decode(byte[] data, int off, int length, OutputStream out) throws IOException {      public static int decode(byte[] data, int off, int length, OutputStream out) throws IOException {   
byte b1, b2, b3, b4;                                                                                   byte b1, b2, b3, b4;                                                                                
int outLen = 0;                                                                                        int outLen = 0;                                                                                     
int end = off + length;                                                                                int end = off + length;                                                                             
while (end &gt; 0) {                                                                                   while (end &gt; 0) {                                                                                
if (!ignore((char) data[end - 1])) {                                                                   if (!ignore((char) data[end - 1])) {                                                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
end--;                                                                                                 end--;                                                                                              
}                                                                                                      }                                                                                                   
int i = off;                                                                                           int i = off;                                                                                        
                                                                                                     | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
                                                                                                     | // last set of 4 bytes might include padding                                                        
int finish = end - 4;                                                                                  int finish = end - 4;                                                                               
while (i &lt; finish) {                                                                                while (i &lt; finish) {                                                                             
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b1 = DECODING_TABLE[data[i++]];                                                                        b1 = DECODING_TABLE[data[i++]];                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b2 = DECODING_TABLE[data[i++]];                                                                        b2 = DECODING_TABLE[data[i++]];                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b3 = DECODING_TABLE[data[i++]];                                                                        b3 = DECODING_TABLE[data[i++]];                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                    while ((i &lt; finish) && ignore((char) data[i])) {                                                 
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
b4 = DECODING_TABLE[data[i++]];                                                                        b4 = DECODING_TABLE[data[i++]];                                                                     
// CHECKSTYLE:OFF                                                                                    | // Convert 4 6-bit bytes to 3 8-bit bytes                                                           
                                                                                                     | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 3 LINES                                                   
                                                                                                     | // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                          out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
                                                                                                     | // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                          out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                       
                                                                                                     | // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((b3 &lt;&lt; 6) | b4);                                                                       out.write((b3 &lt;&lt; 6) | b4);                                                                    
// CHECKSTYLE:ON                                                                                     | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
outLen += 3;                                                                                           outLen += 3;                                                                                        
}                                                                                                      }                                                                                                   
if (data[end - 2] == PADDING) {                                                                      | // Get the last 4 bytes; only last two can be padding                                               
b1 = DECODING_TABLE[data[end - 4]];                                                                  | b1 = DECODING_TABLE[data[i++]];                                                                     
b2 = DECODING_TABLE[data[end - 3]];                                                                  | b2 = DECODING_TABLE[data[i++]];                                                                     
                                                                                                     | // always write the first byte                                                                      
                                                                                                     | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
                                                                                                     | // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                          out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                       
outLen += 1;                                                                                         | outLen++;                                                                                           
} else if (data[end - 1] == PADDING) {                                                               | byte p1 = data[i++];                                                                                
b1 = DECODING_TABLE[data[end - 4]];                                                                  | byte p2 = data[i++];                                                                                
b2 = DECODING_TABLE[data[end - 3]];                                                                  | // may be needed later                                                                              
b3 = DECODING_TABLE[data[end - 2]];                                                                  | b3 = DECODING_TABLE[p1];                                                                            
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                        | if (p1 != PADDING) {                                                                                
                                                                                                     | // Nothing more to do ir p1 == PADDING                                                              
                                                                                                     | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
                                                                                                     | // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                          out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                       
outLen += 2;                                                                                         | outLen++;                                                                                           
} else {                                                                                             | } else if (p2 != PADDING) {                                                                         
b1 = DECODING_TABLE[data[end - 4]];                                                                  | // Nothing more to do if p2 == PADDING                                                              
b2 = DECODING_TABLE[data[end - 3]];                                                                  | b4 = DECODING_TABLE[p2];                                                                            
b3 = DECODING_TABLE[data[end - 2]];                                                                  | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
b4 = DECODING_TABLE[data[end - 1]];                                                                  | // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                        |                                                                                                     
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                        |                                                                                                     
out.write((b3 &lt;&lt; 6) | b4);                                                                       out.write((b3 &lt;&lt; 6) | b4);                                                                    
outLen += 3;                                                                                         | outLen++;                                                                                           
}                                                                                                      }                                                                                                   
return outLen;                                                                                         return outLen;                                                                                      
}                                                                                                      }                                                                                                   
