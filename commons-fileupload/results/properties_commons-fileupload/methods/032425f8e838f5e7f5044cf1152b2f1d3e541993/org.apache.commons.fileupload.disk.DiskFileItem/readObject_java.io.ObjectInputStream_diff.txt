/**                                                                                                    /**                                                                                                 
* Reads the state of this object during deserialization.                                               * Reads the state of this object during deserialization.                                            
*                                                                                                      *                                                                                                   
* @param in The stream from which the state should be read.                                            * @param in The stream from which the state should be read.                                         
*                                                                                                      *                                                                                                   
* @throws IOException if an error occurs.                                                              * @throws IOException if an error occurs.                                                           
* @throws ClassNotFoundException if class cannot be found.                                             * @throws ClassNotFoundException if class cannot be found.                                          
*/                                                                                                     */                                                                                                  
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {             private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {          
// read values                                                                                         // read values                                                                                      
in.defaultReadObject();                                                                                in.defaultReadObject();                                                                             
/* One expected use of serialization is to migrate HTTP sessions                                       /* One expected use of serialization is to migrate HTTP sessions                                    
* containing a DiskFileItem between JVMs. Particularly if the JVMs are                                 * containing a DiskFileItem between JVMs. Particularly if the JVMs are                              
* on different machines It is possible that the repository location is                                 * on different machines It is possible that the repository location is                              
* not valid so validate it.                                                                            * not valid so validate it.                                                                         
*/                                                                                                     */                                                                                                  
if (repository != null) {                                                                              if (repository != null) {                                                                           
if (repository.isDirectory()) {                                                                        if (repository.isDirectory()) {                                                                     
// Check path for nulls                                                                                // Check path for nulls                                                                             
if (repository.getPath().contains("\0")) {                                                             if (repository.getPath().contains("\0")) {                                                          
throw new IOException(format("The repository [%s] contains a null character", repository.getPath()))   throw new IOException(format("The repository [%s] contains a null character", repository.getPath()))
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
throw new IOException(format("The repository [%s] is not a directory", repository.getAbsolutePath())   throw new IOException(format("The repository [%s] is not a directory", repository.getAbsolutePath())
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
OutputStream output = getOutputStream();                                                               OutputStream output = getOutputStream();                                                            
if (cachedContent != null) {                                                                           if (cachedContent != null) {                                                                        
output.write(cachedContent);                                                                           output.write(cachedContent);                                                                        
} else {                                                                                               } else {                                                                                            
new Throwable(dfosFile.toString()).printStackTrace();                                                |                                                                                                     
FileInputStream input = new FileInputStream(dfosFile);                                                 FileInputStream input = new FileInputStream(dfosFile);                                              
IOUtils.copy(input, output);                                                                           IOUtils.copy(input, output);                                                                        
input.close();                                                                                       | dfosFile.delete();                                                                                  
System.out.println("deleted?" + dfosFile.delete() + " " + dfosFile);                                 |                                                                                                     
dfosFile = null;                                                                                       dfosFile = null;                                                                                    
}                                                                                                      }                                                                                                   
output.close();                                                                                        output.close();                                                                                     
cachedContent = null;                                                                                  cachedContent = null;                                                                               
}                                                                                                      }                                                                                                   
