/**
 * Decode the base 64 encoded byte data writing it to the given output stream,
 * whitespace characters will be ignored.
 *
 * @param data the buffer containing the Base64-encoded data
 * @param out the output stream to hold the decoded bytes
 *
 * @return the number of bytes produced.
 * @throws IOException thrown when the padding is incorrect or the input is truncated.
 */
public static int decode(byte[] data, OutputStream out) throws IOException {
    int outLen = 0;
    byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];
    int cachedBytes = 0;
    for (byte b : data) {
        final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];
        if (d == INVALID_BYTE) {
            // Ignore invalid bytes
            continue;
        }
        cache[cachedBytes++] = d;
        if (cachedBytes == INPUT_BYTES_PER_CHUNK) {
            // CHECKSTYLE IGNORE MagicNumber FOR NEXT 4 LINES
            final byte b1 = cache[0];
            final byte b2 = cache[1];
            final byte b3 = cache[2];
            final byte b4 = cache[3];
            if (b1 == PAD_BYTE || b2 == PAD_BYTE) {
                throw new IOException("Invalid Base64 input: incorrect padding, first two bytes cannot be padding");
            }
            // Convert 4 6-bit bytes to 3 8-bit bytes
            // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE
            // 6 bits of b1 plus 2 bits of b2
            out.write((b1 << 2) | (b2 >> 4));
            outLen++;
            if (b3 != PAD_BYTE) {
                // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE
                // 4 bits of b2 plus 4 bits of b3
                out.write((b2 << 4) | (b3 >> 2));
                outLen++;
                if (b4 != PAD_BYTE) {
                    // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE
                    // 2 bits of b3 plus 6 bits of b4
                    out.write((b3 << 6) | b4);
                    outLen++;
                }
            } else if (b4 != PAD_BYTE) {
                // if byte 3 is pad, byte 4 must be pad too
                throw new // line wrap to avoid 120 char limit
                IOException("Invalid Base64 input: incorrect padding, 4th byte must be padding if 3rd byte is");
            }
            cachedBytes = 0;
        }
    }
    // Check for anything left over
    if (cachedBytes != 0) {
        throw new IOException("Invalid Base64 input: truncated");
    }
    return outLen;
}