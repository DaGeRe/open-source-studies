/**                                                                                                    /**                                                                                                 
* Decode the base 64 encoded byte data writing it to the given output stream,                          * Decode the base 64 encoded byte data writing it to the given output stream,                       
* whitespace characters will be ignored.                                                               * whitespace characters will be ignored.                                                            
*                                                                                                      *                                                                                                   
* @param data the buffer containing the Base64-encoded data                                            * @param data the buffer containing the Base64-encoded data                                         
* @param out the output stream to hold the decoded bytes                                               * @param out the output stream to hold the decoded bytes                                            
*                                                                                                      *                                                                                                   
* @return the number of bytes produced.                                                                * @return the number of bytes produced.                                                             
*/                                                                                                     */                                                                                                  
public static int decode(byte[] data, OutputStream out) throws IOException {                           public static int decode(byte[] data, OutputStream out) throws IOException {                        
byte b1, b2, b3, b4;                                                                                 |                                                                                                     
int outLen = 0;                                                                                        int outLen = 0;                                                                                     
if (data.length == 0) {                                                                              | byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];                                                     
return outLen;                                                                                       | int cachedBytes = 0;                                                                                
}                                                                                                    | for (byte b : data) {                                                                               
int end = data.length;                                                                               | if (b == PADDING) {                                                                                 
while (end &gt; 0) {                                                                                 | // Padding means end of input                                                                       
if (!ignore((char) data[end - 1])) {                                                                 |                                                                                                     
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
end--;                                                                                               | final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];                                              
                                                                                                     | if (d == INVALID_BYTE) {                                                                            
                                                                                                     | throw new IOException("Invalid Base64 byte: " + b);                                                 
}                                                                                                      }                                                                                                   
int i = 0;                                                                                           | cache[cachedBytes++] = d;                                                                           
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                     | if (cachedBytes == INPUT_BYTES_PER_CHUNK) {                                                         
// last set of 4 bytes might include padding                                                         |                                                                                                     
int finish = end - 4;                                                                                |                                                                                                     
while (i &lt; finish) {                                                                              |                                                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                  |                                                                                                     
i++;                                                                                                 |                                                                                                     
}                                                                                                    |                                                                                                     
b1 = DECODING_TABLE[data[i++]];                                                                      |                                                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                  |                                                                                                     
i++;                                                                                                 |                                                                                                     
}                                                                                                    |                                                                                                     
b2 = DECODING_TABLE[data[i++]];                                                                      |                                                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                  |                                                                                                     
i++;                                                                                                 |                                                                                                     
}                                                                                                    |                                                                                                     
b3 = DECODING_TABLE[data[i++]];                                                                      |                                                                                                     
while ((i &lt; finish) && ignore((char) data[i])) {                                                  |                                                                                                     
i++;                                                                                                 |                                                                                                     
}                                                                                                    |                                                                                                     
b4 = DECODING_TABLE[data[i++]];                                                                      |                                                                                                     
// Convert 4 6-bit bytes to 3 8-bit bytes                                                              // Convert 4 6-bit bytes to 3 8-bit bytes                                                           
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 3 LINES                                                      // CHECKSTYLE IGNORE MagicNumber FOR NEXT 3 LINES                                                   
// 6 bits of b1 plus 2 bits of b2                                                                      // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                        | out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                           
// 4 bits of b2 plus 4 bits of b3                                                                      // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                        | out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                           
// 2 bits of b3 plus 6 bits of b4                                                                      // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((b3 &lt;&lt; 6) | b4);                                                                     | out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                        
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                       // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
outLen += 3;                                                                                           outLen += 3;                                                                                        
                                                                                                     | cachedBytes = 0;                                                                                    
}                                                                                                      }                                                                                                   
// Get the last 4 bytes; only last two can be padding                                                | }                                                                                                   
b1 = DECODING_TABLE[data[i++]];                                                                      | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                   
b2 = DECODING_TABLE[data[i++]];                                                                      | if (cachedBytes &gt;= 2) {                                                                          
// always write the first byte                                                                       |                                                                                                     
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                     |                                                                                                     
// 6 bits of b1 plus 2 bits of b2                                                                      // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((b1 &lt;&lt; 2) | (b2 &gt;&gt; 4));                                                        | out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                           
outLen++;                                                                                              outLen++;                                                                                           
byte p1 = data[i++];                                                                                 | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                   
byte p2 = data[i++];                                                                                 | if (cachedBytes &gt;= 3) {                                                                          
// may be needed later                                                                               |                                                                                                     
b3 = DECODING_TABLE[p1];                                                                             |                                                                                                     
if (p1 != PADDING) {                                                                                 |                                                                                                     
// Nothing more to do if p1 == PADDING                                                               |                                                                                                     
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                     |                                                                                                     
// 4 bits of b2 plus 4 bits of b3                                                                      // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((b2 &lt;&lt; 4) | (b3 &gt;&gt; 2));                                                        | out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                           
outLen++;                                                                                              outLen++;                                                                                           
if (p2 != PADDING) {                                                                                 | // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                   
// Nothing more to do if p2 == PADDING                                                               | if (cachedBytes &gt;= 4) {                                                                          
b4 = DECODING_TABLE[p2];                                                                             |                                                                                                     
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                     |                                                                                                     
// 2 bits of b3 plus 6 bits of b4                                                                      // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((b3 &lt;&lt; 6) | b4);                                                                     | out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                        
outLen++;                                                                                              outLen++;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
return outLen;                                                                                         return outLen;                                                                                      
}                                                                                                      }                                                                                                   
