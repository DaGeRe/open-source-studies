/**                                                                                                    /**                                                                                                 
* Decode the base 64 encoded byte data writing it to the given output stream,                          * Decode the base 64 encoded byte data writing it to the given output stream,                       
* whitespace characters will be ignored.                                                               * whitespace characters will be ignored.                                                            
*                                                                                                      *                                                                                                   
* @param data the buffer containing the Base64-encoded data                                            * @param data the buffer containing the Base64-encoded data                                         
* @param out the output stream to hold the decoded bytes                                               * @param out the output stream to hold the decoded bytes                                            
*                                                                                                      *                                                                                                   
* @return the number of bytes produced.                                                                * @return the number of bytes produced.                                                             
*/                                                                                                     */                                                                                                  
public static int decode(byte[] data, OutputStream out) throws IOException {                           public static int decode(byte[] data, OutputStream out) throws IOException {                        
int outLen = 0;                                                                                        int outLen = 0;                                                                                     
byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];                                                        byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];                                                     
int cachedBytes = 0;                                                                                   int cachedBytes = 0;                                                                                
for (byte b : data) {                                                                                  for (byte b : data) {                                                                               
if (b == PADDING) {                                                                                    if (b == PADDING) {                                                                                 
// Padding means end of input                                                                          // Padding means end of input                                                                       
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];                                                 final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];                                              
if (d == INVALID_BYTE) {                                                                               if (d == INVALID_BYTE) {                                                                            
throw new IOException("Invalid Base64 byte: " + b);                                                  | // Ignore invalid bytes                                                                             
                                                                                                     | continue;                                                                                           
}                                                                                                      }                                                                                                   
cache[cachedBytes++] = d;                                                                              cache[cachedBytes++] = d;                                                                           
if (cachedBytes == INPUT_BYTES_PER_CHUNK) {                                                            if (cachedBytes == INPUT_BYTES_PER_CHUNK) {                                                         
// Convert 4 6-bit bytes to 3 8-bit bytes                                                              // Convert 4 6-bit bytes to 3 8-bit bytes                                                           
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 3 LINES                                                      // CHECKSTYLE IGNORE MagicNumber FOR NEXT 3 LINES                                                   
// 6 bits of b1 plus 2 bits of b2                                                                      // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                              out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                           
// 4 bits of b2 plus 4 bits of b3                                                                      // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                              out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                           
// 2 bits of b3 plus 6 bits of b4                                                                      // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                           out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                        
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                       // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE                                                    
outLen += 3;                                                                                           outLen += 3;                                                                                        
cachedBytes = 0;                                                                                       cachedBytes = 0;                                                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                      // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                   
if (cachedBytes &gt;= 2) {                                                                             if (cachedBytes &gt;= 2) {                                                                          
// 6 bits of b1 plus 2 bits of b2                                                                      // 6 bits of b1 plus 2 bits of b2                                                                   
out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                              out.write((cache[0] &lt;&lt; 2) | (cache[1] &gt;&gt; 4));                                           
outLen++;                                                                                              outLen++;                                                                                           
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                      // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                   
if (cachedBytes &gt;= 3) {                                                                             if (cachedBytes &gt;= 3) {                                                                          
// 4 bits of b2 plus 4 bits of b3                                                                      // 4 bits of b2 plus 4 bits of b3                                                                   
out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                              out.write((cache[1] &lt;&lt; 4) | (cache[2] &gt;&gt; 2));                                           
outLen++;                                                                                              outLen++;                                                                                           
// CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                      // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES                                                   
if (cachedBytes &gt;= 4) {                                                                             if (cachedBytes &gt;= 4) {                                                                          
// 2 bits of b3 plus 6 bits of b4                                                                      // 2 bits of b3 plus 6 bits of b4                                                                   
out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                           out.write((cache[2] &lt;&lt; 6) | cache[3]);                                                        
outLen++;                                                                                              outLen++;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else if (cachedBytes != 0) {                                                                         } else if (cachedBytes != 0) {                                                                      
throw new IOException("Invalid Base64 input: truncated");                                              throw new IOException("Invalid Base64 input: truncated");                                           
}                                                                                                      }                                                                                                   
return outLen;                                                                                         return outLen;                                                                                      
}                                                                                                      }                                                                                                   
