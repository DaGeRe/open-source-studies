/**
 * Decode the base 64 encoded byte data writing it to the given output stream,
 * whitespace characters will be ignored.
 *
 * @param data the buffer containing the Base64-encoded data
 * @param out the output stream to hold the decoded bytes
 *
 * @return the number of bytes produced.
 */
public static int decode(byte[] data, OutputStream out) throws IOException {
    int outLen = 0;
    byte[] cache = new byte[INPUT_BYTES_PER_CHUNK];
    int cachedBytes = 0;
    for (byte b : data) {
        if (b == PADDING) {
            // Padding means end of input
            break;
        }
        final byte d = DECODING_TABLE[MASK_BYTE_UNSIGNED & b];
        if (d == INVALID_BYTE) {
            throw new IOException("Invalid Base64 byte: " + b);
        }
        cache[cachedBytes++] = d;
        if (cachedBytes == INPUT_BYTES_PER_CHUNK) {
            // Convert 4 6-bit bytes to 3 8-bit bytes
            // CHECKSTYLE IGNORE MagicNumber FOR NEXT 3 LINES
            // 6 bits of b1 plus 2 bits of b2
            out.write((cache[0] << 2) | (cache[1] >> 4));
            // 4 bits of b2 plus 4 bits of b3
            out.write((cache[1] << 4) | (cache[2] >> 2));
            // 2 bits of b3 plus 6 bits of b4
            out.write((cache[2] << 6) | cache[3]);
            // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE
            outLen += 3;
            cachedBytes = 0;
        }
    }
    // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES
    if (cachedBytes >= 2) {
        // 6 bits of b1 plus 2 bits of b2
        out.write((cache[0] << 2) | (cache[1] >> 4));
        outLen++;
        // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES
        if (cachedBytes >= 3) {
            // 4 bits of b2 plus 4 bits of b3
            out.write((cache[1] << 4) | (cache[2] >> 2));
            outLen++;
            // CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES
            if (cachedBytes >= 4) {
                // 2 bits of b3 plus 6 bits of b4
                out.write((cache[2] << 6) | cache[3]);
                outLen++;
            }
        }
    } else if (cachedBytes != 0) {
        throw new IOException("Invalid Base64 input: truncated");
    }
    return outLen;
}