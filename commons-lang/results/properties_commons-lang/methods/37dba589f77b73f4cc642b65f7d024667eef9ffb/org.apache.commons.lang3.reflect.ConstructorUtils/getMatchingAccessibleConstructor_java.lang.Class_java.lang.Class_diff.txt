/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Find an accessible constructor with compatible parameters. Compatible                       * &lt;p&gt;Find an accessible constructor with compatible parameters. Compatible                    
* parameters mean that every method parameter is assignable from the given                             * parameters mean that every method parameter is assignable from the given                          
* parameters. In other words, it finds constructor that will take the                                  * parameters. In other words, it finds constructor that will take the                               
* parameters given.&lt;/p&gt;                                                                          * parameters given.&lt;/p&gt;                                                                       
*                                                                                                      *                                                                                                   
* &lt;p&gt;First it checks if there is constructor matching the exact signature.                       * &lt;p&gt;First it checks if there is constructor matching the exact signature.                    
* If no such, all the constructors of the class are tested if their                                    * If no such, all the constructors of the class are tested if their                                 
* signatures are assignment compatible with the parameter types. The first                             * signatures are assignment compatible with the parameter types. The first                          
* matching constructor is returned.&lt;/p&gt;                                                          * matching constructor is returned.&lt;/p&gt;                                                       
*                                                                                                      *                                                                                                   
* @param cls find constructor for this class                                                           * @param cls find constructor for this class                                                        
* @param parameterTypes find method with compatible parameters                                         * @param parameterTypes find method with compatible parameters                                      
* @return a valid Constructor object. If there's no matching constructor,                              * @return a valid Constructor object. If there's no matching constructor,                           
* returns &lt;code&gt;null&lt;/code&gt;.                                                               * returns &lt;code&gt;null&lt;/code&gt;.                                                            
*/                                                                                                     */                                                                                                  
public static &lt;T&gt; Constructor&lt;T&gt; getMatchingAccessibleConstructor(Class&lt;T&gt; cls, Cl   public static &lt;T&gt; Constructor&lt;T&gt; getMatchingAccessibleConstructor(Class&lt;T&gt; cls, Cl
// see if we can find the constructor directly                                                         // see if we can find the constructor directly                                                      
// most of the time this works and it's much faster                                                    // most of the time this works and it's much faster                                                 
try {                                                                                                  try {                                                                                               
Constructor&lt;T&gt; ctor = cls.getConstructor(parameterTypes);                                        Constructor&lt;T&gt; ctor = cls.getConstructor(parameterTypes);                                     
MemberUtils.setAccessibleWorkaround(ctor);                                                             MemberUtils.setAccessibleWorkaround(ctor);                                                          
return ctor;                                                                                           return ctor;                                                                                        
} catch (NoSuchMethodException e) {                                                                    } catch (NoSuchMethodException e) {                                                                 
/* SWALLOW */                                                                                          /* SWALLOW */                                                                                       
}                                                                                                      }                                                                                                   
Constructor&lt;T&gt; result = null;                                                                    Constructor&lt;T&gt; result = null;                                                                 
/*                                                                                                     /*                                                                                                  
* Class.getConstructors() is documented to return Constructor&lt;T&gt; so as                         | * (1) Class.getConstructors() is documented to return Constructor&lt;T&gt; so as                    
* long as the array is not subsequently modified, everything's fine:                                 | * long as the array is not subsequently modified, everything's fine.                                
*/                                                                                                     */                                                                                                  
@SuppressWarnings("unchecked")                                                                       | Constructor&lt;?&gt;[] ctors = cls.getConstructors();                                               
Constructor&lt;T&gt;[] ctors = (Constructor&lt;T&gt;[]) cls.getConstructors();                       |                                                                                                     
// return best match:                                                                                  // return best match:                                                                               
for (Constructor&lt;T&gt; ctor : ctors) {                                                            | for (Constructor&lt;?&gt; ctor : ctors) {                                                           
// compare parameters                                                                                  // compare parameters                                                                               
if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {                         if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {                      
// get accessible version of constructor                                                               // get accessible version of constructor                                                            
ctor = getAccessibleConstructor(ctor);                                                                 ctor = getAccessibleConstructor(ctor);                                                              
if (ctor != null) {                                                                                    if (ctor != null) {                                                                                 
MemberUtils.setAccessibleWorkaround(ctor);                                                             MemberUtils.setAccessibleWorkaround(ctor);                                                          
if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParamete   if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParamete
result = ctor;                                                                                       | // temporary variable for annotation, see comment above (1)                                         
                                                                                                     | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | Constructor&lt;T&gt; constructor = (Constructor&lt;T&gt;) ctor;                                     
                                                                                                     | result = constructor;                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
