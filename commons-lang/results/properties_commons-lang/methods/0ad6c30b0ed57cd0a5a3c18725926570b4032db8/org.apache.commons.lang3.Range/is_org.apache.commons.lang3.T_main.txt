/**
 * <p>Obtains a range using the specified element as both the minimum
 * and maximum in this range.</p>
 *
 * <p>The range uses the natural ordering of the elements to determine where
 * values lie in the range.</p>
 *
 * @param <T> the type of the elements in this range
 * @param element  the value to use for this range, not null
 * @return the range object, not null
 * @throws IllegalArgumentException if the element is null
 * @throws ClassCastException if the element is not {@code Comparable}
 */
public static <T extends Comparable<T>> Range<T> is(T element) {
    return between(element, element, null);
}