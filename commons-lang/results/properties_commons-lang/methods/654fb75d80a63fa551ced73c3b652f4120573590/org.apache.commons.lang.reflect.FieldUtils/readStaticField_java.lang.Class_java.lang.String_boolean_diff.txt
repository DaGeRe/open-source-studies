/**                                                                                                    /**                                                                                                 
* Read the named static field. Superclasses will be considered.                                        * Read the named static field. Superclasses will be considered.                                     
* @param cls  the class to reflect, must not be null                                                   * @param cls  the class to reflect, must not be null                                                
* @param fieldName  the field name to obtain                                                           * @param fieldName  the field name to obtain                                                        
* @param forceAccess  whether to break scope restrictions using the                                    * @param forceAccess  whether to break scope restrictions using the                                 
*  &lt;code&gt;setAccessible&lt;/code&gt; method. &lt;code&gt;False&lt;/code&gt; will only             *  &lt;code&gt;setAccessible&lt;/code&gt; method. &lt;code&gt;False&lt;/code&gt; will only          
*  match public fields.                                                                                *  match public fields.                                                                             
* @return the Field object                                                                             * @return the Field object                                                                          
* @throws IllegalArgumentException if the class or field name is null                                  * @throws IllegalArgumentException if the class or field name is null                               
* @throws IllegalAccessException if the field is not made accessible                                   * @throws IllegalAccessException if the field is not made accessible                                
*/                                                                                                     */                                                                                                  
public static Object readStaticField(Class cls, String fieldName, boolean forceAccess) throws Illega | public static Object readStaticField(Class&lt;?&gt; cls, String fieldName, boolean forceAccess) thro
Field field = getField(cls, fieldName, forceAccess);                                                   Field field = getField(cls, fieldName, forceAccess);                                                
if (field == null) {                                                                                   if (field == null) {                                                                                
throw new IllegalArgumentException("Cannot locate field " + fieldName + " on " + cls);                 throw new IllegalArgumentException("Cannot locate field " + fieldName + " on " + cls);              
}                                                                                                      }                                                                                                   
// already forced access above, don't repeat it here:                                                  // already forced access above, don't repeat it here:                                               
return readStaticField(field, false);                                                                  return readStaticField(field, false);                                                               
}                                                                                                      }                                                                                                   
