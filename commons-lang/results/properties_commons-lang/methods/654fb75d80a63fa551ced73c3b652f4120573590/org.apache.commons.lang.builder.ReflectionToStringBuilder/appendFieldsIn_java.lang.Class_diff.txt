/**                                                                                                    /**                                                                                                 
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Appends the fields and values defined by the given object of the given Class.                        * Appends the fields and values defined by the given object of the given Class.                     
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if   * If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if
* &lt;code&gt;Object.toString()&lt;/code&gt; had been called and not implemented by the object.        * &lt;code&gt;Object.toString()&lt;/code&gt; had been called and not implemented by the object.     
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* @param clazz                                                                                         * @param clazz                                                                                      
*            The class of object parameter                                                             *            The class of object parameter                                                          
*/                                                                                                     */                                                                                                  
protected void appendFieldsIn(Class clazz) {                                                         | protected void appendFieldsIn(Class&lt;?&gt; clazz) {                                               
if (clazz.isArray()) {                                                                                 if (clazz.isArray()) {                                                                              
this.reflectionAppendArray(this.getObject());                                                          this.reflectionAppendArray(this.getObject());                                                       
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
Field[] fields = clazz.getDeclaredFields();                                                            Field[] fields = clazz.getDeclaredFields();                                                         
AccessibleObject.setAccessible(fields, true);                                                          AccessibleObject.setAccessible(fields, true);                                                       
for (int i = 0; i &lt; fields.length; i++) {                                                           for (int i = 0; i &lt; fields.length; i++) {                                                        
Field field = fields[i];                                                                               Field field = fields[i];                                                                            
String fieldName = field.getName();                                                                    String fieldName = field.getName();                                                                 
if (this.accept(field)) {                                                                              if (this.accept(field)) {                                                                           
try {                                                                                                  try {                                                                                               
// Warning: Field.get(Object) creates wrappers objects                                                 // Warning: Field.get(Object) creates wrappers objects                                              
// for primitive types.                                                                                // for primitive types.                                                                             
Object fieldValue = this.getValue(field);                                                              Object fieldValue = this.getValue(field);                                                           
this.append(fieldName, fieldValue);                                                                    this.append(fieldName, fieldValue);                                                                 
} catch (IllegalAccessException ex) {                                                                  } catch (IllegalAccessException ex) {                                                               
// this can't happen. Would get a Security exception                                                   // this can't happen. Would get a Security exception                                                
// instead                                                                                             // instead                                                                                          
// throw a runtime exception in case the impossible                                                    // throw a runtime exception in case the impossible                                                 
// happens.                                                                                            // happens.                                                                                         
throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());                      throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
