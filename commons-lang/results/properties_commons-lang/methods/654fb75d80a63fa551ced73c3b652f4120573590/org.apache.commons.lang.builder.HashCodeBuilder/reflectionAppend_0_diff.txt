/**                                                                                                    /**                                                                                                 
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Appends the fields and values defined by the given object of the given &lt;code&gt;Class&lt;/code&   * Appends the fields and values defined by the given object of the given &lt;code&gt;Class&lt;/code&
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* @param object                                                                                        * @param object                                                                                     
*            the object to append details of                                                           *            the object to append details of                                                        
* @param clazz                                                                                         * @param clazz                                                                                      
*            the class to append details of                                                            *            the class to append details of                                                         
* @param builder                                                                                       * @param builder                                                                                    
*            the builder to append to                                                                  *            the builder to append to                                                               
* @param useTransients                                                                                 * @param useTransients                                                                              
*            whether to use transient fields                                                           *            whether to use transient fields                                                        
* @param excludeFields                                                                                 * @param excludeFields                                                                              
*            Collection of String field names to exclude from use in calculation of hash code          *            Collection of String field names to exclude from use in calculation of hash code       
*/                                                                                                     */                                                                                                  
private static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean us | private static void reflectionAppend(Object object, Class&lt;?&gt; clazz, HashCodeBuilder builder, b
if (isRegistered(object)) {                                                                            if (isRegistered(object)) {                                                                         
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
register(object);                                                                                      register(object);                                                                                   
Field[] fields = clazz.getDeclaredFields();                                                            Field[] fields = clazz.getDeclaredFields();                                                         
List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LI   List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LI
AccessibleObject.setAccessible(fields, true);                                                          AccessibleObject.setAccessible(fields, true);                                                       
for (int i = 0; i &lt; fields.length; i++) {                                                           for (int i = 0; i &lt; fields.length; i++) {                                                        
Field field = fields[i];                                                                               Field field = fields[i];                                                                            
if (!excludedFieldList.contains(field.getName()) && (field.getName().indexOf('$') == -1) && (useTran   if (!excludedFieldList.contains(field.getName()) && (field.getName().indexOf('$') == -1) && (useTran
try {                                                                                                  try {                                                                                               
Object fieldValue = field.get(object);                                                                 Object fieldValue = field.get(object);                                                              
builder.append(fieldValue);                                                                            builder.append(fieldValue);                                                                         
} catch (IllegalAccessException e) {                                                                   } catch (IllegalAccessException e) {                                                                
// this can't happen. Would get a Security exception instead                                           // this can't happen. Would get a Security exception instead                                        
// throw a runtime exception in case the impossible happens.                                           // throw a runtime exception in case the impossible happens.                                        
throw new InternalError("Unexpected IllegalAccessException");                                          throw new InternalError("Unexpected IllegalAccessException");                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
unregister(object);                                                                                    unregister(object);                                                                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
