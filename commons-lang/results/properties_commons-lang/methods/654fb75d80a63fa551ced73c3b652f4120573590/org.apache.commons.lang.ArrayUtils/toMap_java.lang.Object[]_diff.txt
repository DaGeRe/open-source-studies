// To map                                                                                              // To map                                                                                           
// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Converts the given array into a {@link java.util.Map}. Each element of the array            * &lt;p&gt;Converts the given array into a {@link java.util.Map}. Each element of the array         
* must be either a {@link java.util.Map.Entry} or an Array, containing at least two                    * must be either a {@link java.util.Map.Entry} or an Array, containing at least two                 
* elements, where the first element is used as key and the second as                                   * elements, where the first element is used as key and the second as                                
* value.&lt;/p&gt;                                                                                     * value.&lt;/p&gt;                                                                                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method can be used to initialize:&lt;/p&gt;                                            * &lt;p&gt;This method can be used to initialize:&lt;/p&gt;                                         
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* // Create a Map mapping colors.                                                                      * // Create a Map mapping colors.                                                                   
* Map colorMap = MapUtils.toMap(new String[][] {{                                                      * Map colorMap = MapUtils.toMap(new String[][] {{                                                   
*     {"RED", "#FF0000"},                                                                              *     {"RED", "#FF0000"},                                                                           
*     {"GREEN", "#00FF00"},                                                                            *     {"GREEN", "#00FF00"},                                                                         
*     {"BLUE", "#0000FF"}});                                                                           *     {"BLUE", "#0000FF"}});                                                                        
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; inp   * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; inp
*                                                                                                      *                                                                                                   
* @param array  an array whose elements are either a {@link java.util.Map.Entry} or                    * @param array  an array whose elements are either a {@link java.util.Map.Entry} or                 
*  an Array containing at least two elements, may be &lt;code&gt;null&lt;/code&gt;                     *  an Array containing at least two elements, may be &lt;code&gt;null&lt;/code&gt;                  
* @return a &lt;code&gt;Map&lt;/code&gt; that was created from the array                               * @return a &lt;code&gt;Map&lt;/code&gt; that was created from the array                            
* @throws IllegalArgumentException  if one element of this Array is                                    * @throws IllegalArgumentException  if one element of this Array is                                 
*  itself an Array containing less then two elements                                                   *  itself an Array containing less then two elements                                                
* @throws IllegalArgumentException  if the array contains elements other                               * @throws IllegalArgumentException  if the array contains elements other                            
*  than {@link java.util.Map.Entry} and an Array                                                       *  than {@link java.util.Map.Entry} and an Array                                                    
*/                                                                                                     */                                                                                                  
public static Map toMap(Object[] array) {                                                            | public static Map&lt;Object, Object&gt; toMap(Object[] array) {                                     
if (array == null) {                                                                                   if (array == null) {                                                                                
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
final Map map = new HashMap((int) (array.length * 1.5));                                             | final Map&lt;Object, Object&gt; map = new HashMap&lt;Object, Object&gt;((int) (array.length * 1.5));
for (int i = 0; i &lt; array.length; i++) {                                                            for (int i = 0; i &lt; array.length; i++) {                                                         
Object object = array[i];                                                                              Object object = array[i];                                                                           
if (object instanceof Map.Entry) {                                                                     if (object instanceof Map.Entry) {                                                                  
Map.Entry entry = (Map.Entry) object;                                                                  Map.Entry entry = (Map.Entry) object;                                                               
map.put(entry.getKey(), entry.getValue());                                                             map.put(entry.getKey(), entry.getValue());                                                          
} else if (object instanceof Object[]) {                                                               } else if (object instanceof Object[]) {                                                            
Object[] entry = (Object[]) object;                                                                    Object[] entry = (Object[]) object;                                                                 
if (entry.length &lt; 2) {                                                                             if (entry.length &lt; 2) {                                                                          
throw new IllegalArgumentException("Array element " + i + ", '" + object + "', has a length less tha   throw new IllegalArgumentException("Array element " + i + ", '" + object + "', has a length less tha
}                                                                                                      }                                                                                                   
map.put(entry[0], entry[1]);                                                                           map.put(entry[0], entry[1]);                                                                        
} else {                                                                                               } else {                                                                                            
throw new IllegalArgumentException("Array element " + i + ", '" + object + "', is neither of type Ma   throw new IllegalArgumentException("Array element " + i + ", '" + object + "', is neither of type Ma
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return map;                                                                                            return map;                                                                                         
}                                                                                                      }                                                                                                   
