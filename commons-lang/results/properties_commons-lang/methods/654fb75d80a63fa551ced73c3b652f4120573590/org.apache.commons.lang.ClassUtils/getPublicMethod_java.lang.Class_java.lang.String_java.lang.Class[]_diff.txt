// Public method                                                                                     |                                                                                                     
// ----------------------------------------------------------------------                            |                                                                                                     
/**                                                                                                  |                                                                                                     
* &lt;p&gt;Returns the desired Method much like &lt;code&gt;Class.getMethod&lt;/code&gt;, however    |                                                                                                     
* it ensures that the returned Method is from a public class or interface and not                    |                                                                                                     
* from an anonymous inner class. This means that the Method is invokable and                         |                                                                                                     
* doesn't fall foul of Java bug                                                                      |                                                                                                     
* &lt;a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957"&gt;4071957&lt;/a&gt;).     |                                                                                                     
*                                                                                                    |                                                                                                     
*  &lt;code&gt;&lt;pre&gt;Set set = Collections.unmodifiableSet(...);                                |                                                                                                     
*  Method method = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]);             |                                                                                                     
*  Object result = method.invoke(set, new Object[]);&lt;/pre&gt;&lt;/code&gt;                        |                                                                                                     
* &lt;/p&gt;                                                                                         |                                                                                                     
*                                                                                                    |                                                                                                     
* @param cls  the class to check, not null                                                           |                                                                                                     
* @param methodName  the name of the method                                                          |                                                                                                     
* @param parameterTypes  the list of parameters                                                      |                                                                                                     
* @return the method                                                                                 |                                                                                                     
* @throws NullPointerException if the class is null                                                  |                                                                                                     
* @throws SecurityException if a a security violation occured                                        |                                                                                                     
* @throws NoSuchMethodException if the method is not found in the given class                        |                                                                                                     
*  or if the metothod doen't conform with the requirements                                           |                                                                                                     
*/                                                                                                   |                                                                                                     
public static Method getPublicMethod(Class cls, String methodName, Class[] parameterTypes) throws Se |                                                                                                     
Method declaredMethod = cls.getMethod(methodName, parameterTypes);                                   |                                                                                                     
if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {                          |                                                                                                     
return declaredMethod;                                                                               |                                                                                                     
}                                                                                                    |                                                                                                     
List candidateClasses = new ArrayList();                                                             |                                                                                                     
candidateClasses.addAll(getAllInterfaces(cls));                                                      |                                                                                                     
candidateClasses.addAll(getAllSuperclasses(cls));                                                    |                                                                                                     
for (Iterator it = candidateClasses.iterator(); it.hasNext(); ) {                                    |                                                                                                     
Class candidateClass = (Class) it.next();                                                            |                                                                                                     
if (!Modifier.isPublic(candidateClass.getModifiers())) {                                             |                                                                                                     
continue;                                                                                            |                                                                                                     
}                                                                                                    |                                                                                                     
Method candidateMethod;                                                                              |                                                                                                     
try {                                                                                                |                                                                                                     
candidateMethod = candidateClass.getMethod(methodName, parameterTypes);                              |                                                                                                     
} catch (NoSuchMethodException ex) {                                                                 |                                                                                                     
continue;                                                                                            |                                                                                                     
}                                                                                                    |                                                                                                     
if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {                         |                                                                                                     
return candidateMethod;                                                                              |                                                                                                     
}                                                                                                    |                                                                                                     
}                                                                                                    |                                                                                                     
throw new NoSuchMethodException("Can't find a public method for " + methodName + " " + ArrayUtils.to |                                                                                                     
}                                                                                                    |                                                                                                     
