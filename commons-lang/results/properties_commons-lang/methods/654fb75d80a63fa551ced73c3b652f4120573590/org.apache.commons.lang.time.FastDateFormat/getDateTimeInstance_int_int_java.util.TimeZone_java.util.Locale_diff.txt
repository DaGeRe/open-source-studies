/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Gets a date/time formatter instance using the specified style,                              * &lt;p&gt;Gets a date/time formatter instance using the specified style,                           
* time zone and locale.&lt;/p&gt;                                                                      * time zone and locale.&lt;/p&gt;                                                                   
*                                                                                                      *                                                                                                   
* @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT                                           * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT                                        
* @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT                                           * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT                                        
* @param timeZone  optional time zone, overrides time zone of                                          * @param timeZone  optional time zone, overrides time zone of                                       
*  formatted date                                                                                      *  formatted date                                                                                   
* @param locale  optional locale, overrides system locale                                              * @param locale  optional locale, overrides system locale                                           
* @return a localized standard date/time formatter                                                     * @return a localized standard date/time formatter                                                  
* @throws IllegalArgumentException if the Locale has no date/time                                      * @throws IllegalArgumentException if the Locale has no date/time                                   
*  pattern defined                                                                                     *  pattern defined                                                                                  
*/                                                                                                     */                                                                                                  
public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone   public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone
Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));                               | Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));                      
if (timeZone != null) {                                                                                if (timeZone != null) {                                                                             
key = new Pair(key, timeZone);                                                                         key = new Pair(key, timeZone);                                                                      
}                                                                                                      }                                                                                                   
if (locale == null) {                                                                                  if (locale == null) {                                                                               
locale = Locale.getDefault();                                                                          locale = Locale.getDefault();                                                                       
}                                                                                                      }                                                                                                   
key = new Pair(key, locale);                                                                           key = new Pair(key, locale);                                                                        
FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);                            | FastDateFormat format = cDateTimeInstanceCache.get(key);                                            
if (format == null) {                                                                                  if (format == null) {                                                                               
try {                                                                                                  try {                                                                                               
SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,   SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
String pattern = formatter.toPattern();                                                                String pattern = formatter.toPattern();                                                             
format = getInstance(pattern, timeZone, locale);                                                       format = getInstance(pattern, timeZone, locale);                                                    
cDateTimeInstanceCache.put(key, format);                                                               cDateTimeInstanceCache.put(key, format);                                                            
} catch (ClassCastException ex) {                                                                      } catch (ClassCastException ex) {                                                                   
throw new IllegalArgumentException("No date time pattern for locale: " + locale);                      throw new IllegalArgumentException("No date time pattern for locale: " + locale);                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return format;                                                                                         return format;                                                                                      
}                                                                                                      }                                                                                                   
