/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Gets a date formatter instance using the specified style, time                              * &lt;p&gt;Gets a date formatter instance using the specified style, time                           
* zone and locale.&lt;/p&gt;                                                                           * zone and locale.&lt;/p&gt;                                                                        
*                                                                                                      *                                                                                                   
* @param style  date style: FULL, LONG, MEDIUM, or SHORT                                               * @param style  date style: FULL, LONG, MEDIUM, or SHORT                                            
* @param timeZone  optional time zone, overrides time zone of                                          * @param timeZone  optional time zone, overrides time zone of                                       
*  formatted date                                                                                      *  formatted date                                                                                   
* @param locale  optional locale, overrides system locale                                              * @param locale  optional locale, overrides system locale                                           
* @return a localized standard date formatter                                                          * @return a localized standard date formatter                                                       
* @throws IllegalArgumentException if the Locale has no date                                           * @throws IllegalArgumentException if the Locale has no date                                        
*  pattern defined                                                                                     *  pattern defined                                                                                  
*/                                                                                                     */                                                                                                  
public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale local   public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale local
Object key = new Integer(style);                                                                     | Object key = Integer.valueOf(style);                                                                
if (timeZone != null) {                                                                                if (timeZone != null) {                                                                             
key = new Pair(key, timeZone);                                                                         key = new Pair(key, timeZone);                                                                      
}                                                                                                      }                                                                                                   
if (locale == null) {                                                                                  if (locale == null) {                                                                               
locale = Locale.getDefault();                                                                          locale = Locale.getDefault();                                                                       
}                                                                                                      }                                                                                                   
key = new Pair(key, locale);                                                                           key = new Pair(key, locale);                                                                        
FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);                                | FastDateFormat format = cDateInstanceCache.get(key);                                                
if (format == null) {                                                                                  if (format == null) {                                                                               
try {                                                                                                  try {                                                                                               
SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);             SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);          
String pattern = formatter.toPattern();                                                                String pattern = formatter.toPattern();                                                             
format = getInstance(pattern, timeZone, locale);                                                       format = getInstance(pattern, timeZone, locale);                                                    
cDateInstanceCache.put(key, format);                                                                   cDateInstanceCache.put(key, format);                                                                
} catch (ClassCastException ex) {                                                                      } catch (ClassCastException ex) {                                                                   
throw new IllegalArgumentException("No date pattern for locale: " + locale);                           throw new IllegalArgumentException("No date pattern for locale: " + locale);                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return format;                                                                                         return format;                                                                                      
}                                                                                                      }                                                                                                   
