/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Returns the list of &lt;code&gt;Throwable&lt;/code&gt; objects in the                       * &lt;p&gt;Returns the list of &lt;code&gt;Throwable&lt;/code&gt; objects in the                    
* exception chain.&lt;/p&gt;                                                                           * exception chain.&lt;/p&gt;                                                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;A throwable without cause will return an array containing                                   * &lt;p&gt;A throwable without cause will return an array containing                                
* one element - the input throwable.                                                                   * one element - the input throwable.                                                                
* A throwable with one cause will return an array containing                                           * A throwable with one cause will return an array containing                                        
* two elements. - the input throwable and the cause throwable.                                         * two elements. - the input throwable and the cause throwable.                                      
* A &lt;code&gt;null&lt;/code&gt; throwable will return an array of size zero.&lt;/p&gt;               * A &lt;code&gt;null&lt;/code&gt; throwable will return an array of size zero.&lt;/p&gt;            
*                                                                                                      *                                                                                                   
* &lt;p&gt;From version 2.2, this method handles recursive cause structures                            * &lt;p&gt;From version 2.2, this method handles recursive cause structures                         
* that might otherwise cause infinite loops. The cause chain is                                        * that might otherwise cause infinite loops. The cause chain is                                     
* processed until the end is reached, or until the next item in the                                    * processed until the end is reached, or until the next item in the                                 
* chain is already in the result set.&lt;/p&gt;                                                        * chain is already in the result set.&lt;/p&gt;                                                     
*                                                                                                      *                                                                                                   
* @see #getThrowableList(Throwable)                                                                    * @see #getThrowableList(Throwable)                                                                 
* @param throwable  the throwable to inspect, may be null                                              * @param throwable  the throwable to inspect, may be null                                           
* @return the array of throwables, never null                                                          * @return the array of throwables, never null                                                       
*/                                                                                                     */                                                                                                  
public static Throwable[] getThrowables(Throwable throwable) {                                         public static Throwable[] getThrowables(Throwable throwable) {                                      
List list = getThrowableList(throwable);                                                             | List&lt;Throwable&gt; list = getThrowableList(throwable);                                           
return (Throwable[]) list.toArray(new Throwable[list.size()]);                                       | return list.toArray(new Throwable[list.size()]);                                                    
}                                                                                                      }                                                                                                   
