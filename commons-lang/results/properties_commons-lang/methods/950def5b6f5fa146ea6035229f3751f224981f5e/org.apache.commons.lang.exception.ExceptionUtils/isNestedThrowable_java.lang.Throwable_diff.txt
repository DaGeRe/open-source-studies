/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks whether this &lt;code&gt;Throwable&lt;/code&gt; class can store a cause.&lt;/p&gt;   * &lt;p&gt;Checks whether this &lt;code&gt;Throwable&lt;/code&gt; class can store a cause.&lt;/p&gt;
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method does &lt;b&gt;not&lt;/b&gt; check whether it actually does store a cause.&lt;   * &lt;p&gt;This method does &lt;b&gt;not&lt;/b&gt; check whether it actually does store a cause.&lt;
*                                                                                                      *                                                                                                   
* @param throwable  the &lt;code&gt;Throwable&lt;/code&gt; to examine, may be null                     * @param throwable  the &lt;code&gt;Throwable&lt;/code&gt; to examine, may be null                  
* @return boolean &lt;code&gt;true&lt;/code&gt; if nested otherwise &lt;code&gt;false&lt;/code&gt;     * @return boolean &lt;code&gt;true&lt;/code&gt; if nested otherwise &lt;code&gt;false&lt;/code&gt;  
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static boolean isNestedThrowable(Throwable throwable) {                                         public static boolean isNestedThrowable(Throwable throwable) {                                      
if (throwable == null) {                                                                               if (throwable == null) {                                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
if (throwable instanceof SQLException) {                                                               if (throwable instanceof SQLException) {                                                            
return true;                                                                                           return true;                                                                                        
} else if (throwable instanceof InvocationTargetException) {                                           } else if (throwable instanceof InvocationTargetException) {                                        
return true;                                                                                           return true;                                                                                        
} else if (isThrowableNested()) {                                                                      } else if (isThrowableNested()) {                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
Class cls = throwable.getClass();                                                                    | Class&lt;? extends Throwable&gt; cls = throwable.getClass();                                        
synchronized (CAUSE_METHOD_NAMES) {                                                                    synchronized (CAUSE_METHOD_NAMES) {                                                                 
for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i &lt; isize; i++) {                                for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i &lt; isize; i++) {                             
try {                                                                                                  try {                                                                                               
Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], (Class[]) null);                                  Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], (Class[]) null);                               
if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {                      if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
} catch (NoSuchMethodException ignored) {                                                              } catch (NoSuchMethodException ignored) {                                                           
// exception ignored                                                                                   // exception ignored                                                                                
} catch (SecurityException ignored) {                                                                  } catch (SecurityException ignored) {                                                               
// exception ignored                                                                                   // exception ignored                                                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
Field field = cls.getField("detail");                                                                  Field field = cls.getField("detail");                                                               
if (field != null) {                                                                                   if (field != null) {                                                                                
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
} catch (NoSuchFieldException ignored) {                                                               } catch (NoSuchFieldException ignored) {                                                            
// exception ignored                                                                                   // exception ignored                                                                                
} catch (SecurityException ignored) {                                                                  } catch (SecurityException ignored) {                                                               
// exception ignored                                                                                   // exception ignored                                                                                
}                                                                                                      }                                                                                                   
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
