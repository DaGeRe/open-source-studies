/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Worker method for the &lt;code&gt;indexOfType&lt;/code&gt; methods.&lt;/p&gt;               * &lt;p&gt;Worker method for the &lt;code&gt;indexOfType&lt;/code&gt; methods.&lt;/p&gt;            
*                                                                                                      *                                                                                                   
* @param throwable  the throwable to inspect, may be null                                              * @param throwable  the throwable to inspect, may be null                                           
* @param type  the type to search for, subclasses match, null returns -1                               * @param type  the type to search for, subclasses match, null returns -1                            
* @param fromIndex  the (zero based) index of the starting position,                                   * @param fromIndex  the (zero based) index of the starting position,                                
*  negative treated as zero, larger than chain size returns -1                                         *  negative treated as zero, larger than chain size returns -1                                      
* @param subclass if &lt;code&gt;true&lt;/code&gt;, compares with {@link Class#isAssignableFrom(Clas   * @param subclass if &lt;code&gt;true&lt;/code&gt;, compares with {@link Class#isAssignableFrom(Clas
* using references                                                                                     * using references                                                                                  
* @return index of the &lt;code&gt;type&lt;/code&gt; within throwables nested withing the specified    * @return index of the &lt;code&gt;type&lt;/code&gt; within throwables nested withing the specified 
*/                                                                                                     */                                                                                                  
private static int indexOf(Throwable throwable, Class type, int fromIndex, boolean subclass) {       | private static int indexOf(Throwable throwable, Class&lt;?&gt; type, int fromIndex, boolean subclass
if (throwable == null || type == null) {                                                               if (throwable == null || type == null) {                                                            
return -1;                                                                                             return -1;                                                                                          
}                                                                                                      }                                                                                                   
if (fromIndex &lt; 0) {                                                                                if (fromIndex &lt; 0) {                                                                             
fromIndex = 0;                                                                                         fromIndex = 0;                                                                                      
}                                                                                                      }                                                                                                   
Throwable[] throwables = ExceptionUtils.getThrowables(throwable);                                      Throwable[] throwables = ExceptionUtils.getThrowables(throwable);                                   
if (fromIndex &gt;= throwables.length) {                                                               if (fromIndex &gt;= throwables.length) {                                                            
return -1;                                                                                             return -1;                                                                                          
}                                                                                                      }                                                                                                   
if (subclass) {                                                                                        if (subclass) {                                                                                     
for (int i = fromIndex; i &lt; throwables.length; i++) {                                               for (int i = fromIndex; i &lt; throwables.length; i++) {                                            
if (type.isAssignableFrom(throwables[i].getClass())) {                                                 if (type.isAssignableFrom(throwables[i].getClass())) {                                              
return i;                                                                                              return i;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
for (int i = fromIndex; i &lt; throwables.length; i++) {                                               for (int i = fromIndex; i &lt; throwables.length; i++) {                                            
if (type.equals(throwables[i].getClass())) {                                                           if (type.equals(throwables[i].getClass())) {                                                        
return i;                                                                                              return i;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return -1;                                                                                             return -1;                                                                                          
}                                                                                                      }                                                                                                   
