/**                                                                                                    /**                                                                                                 
* Reads a possibly quoted string token.                                                                * Reads a possibly quoted string token.                                                             
*                                                                                                      *                                                                                                   
* @param chars  the character array being tokenized                                                    * @param chars  the character array being tokenized                                                 
* @param start  the first character of field                                                           * @param start  the first character of field                                                        
* @param len  the length of the character array being tokenized                                        * @param len  the length of the character array being tokenized                                     
* @param workArea  a temporary work area                                                               * @param workArea  a temporary work area                                                            
* @param tokens  the list of parsed tokens                                                             * @param tokens  the list of parsed tokens                                                          
* @param quoteStart  the start position of the matched quote, 0 if no quoting                          * @param quoteStart  the start position of the matched quote, 0 if no quoting                       
* @param quoteLen  the length of the matched quote, 0 if no quoting                                    * @param quoteLen  the length of the matched quote, 0 if no quoting                                 
* @return the starting position of the next field (the character                                       * @return the starting position of the next field (the character                                    
*  immediately after the delimiter, or if end of string found,                                         *  immediately after the delimiter, or if end of string found,                                      
*  then the length of string                                                                           *  then the length of string                                                                        
*/                                                                                                     */                                                                                                  
private int readWithQuotes(char[] chars, int start, int len, StrBuilder workArea, List tokens, int q | private int readWithQuotes(char[] chars, int start, int len, StrBuilder workArea, List&lt;String&gt;
// Loop until we've found the end of the quoted                                                        // Loop until we've found the end of the quoted                                                     
// string or the end of the input                                                                      // string or the end of the input                                                                   
workArea.clear();                                                                                      workArea.clear();                                                                                   
int pos = start;                                                                                       int pos = start;                                                                                    
boolean quoting = (quoteLen &gt; 0);                                                                   boolean quoting = (quoteLen &gt; 0);                                                                
int trimStart = 0;                                                                                     int trimStart = 0;                                                                                  
while (pos &lt; len) {                                                                                 while (pos &lt; len) {                                                                              
// quoting mode can occur several times throughout a string                                            // quoting mode can occur several times throughout a string                                         
// we must switch between quoting and non-quoting until we                                             // we must switch between quoting and non-quoting until we                                          
// encounter a non-quoted delimiter, or end of string                                                  // encounter a non-quoted delimiter, or end of string                                               
if (quoting) {                                                                                         if (quoting) {                                                                                      
// In quoting mode                                                                                     // In quoting mode                                                                                  
// If we've found a quote character, see if it's                                                       // If we've found a quote character, see if it's                                                    
// followed by a second quote.  If so, then we need                                                    // followed by a second quote.  If so, then we need                                                 
// to actually put the quote character into the token                                                  // to actually put the quote character into the token                                               
// rather than end the token.                                                                          // rather than end the token.                                                                       
if (isQuote(chars, pos, len, quoteStart, quoteLen)) {                                                  if (isQuote(chars, pos, len, quoteStart, quoteLen)) {                                               
if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {                                       if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {                                    
// matched pair of quotes, thus an escaped quote                                                       // matched pair of quotes, thus an escaped quote                                                    
workArea.append(chars, pos, quoteLen);                                                                 workArea.append(chars, pos, quoteLen);                                                              
pos += (quoteLen * 2);                                                                                 pos += (quoteLen * 2);                                                                              
trimStart = workArea.size();                                                                           trimStart = workArea.size();                                                                        
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// end of quoting                                                                                      // end of quoting                                                                                   
quoting = false;                                                                                       quoting = false;                                                                                    
pos += quoteLen;                                                                                       pos += quoteLen;                                                                                    
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// copy regular character from inside quotes                                                           // copy regular character from inside quotes                                                        
workArea.append(chars[pos++]);                                                                         workArea.append(chars[pos++]);                                                                      
trimStart = workArea.size();                                                                           trimStart = workArea.size();                                                                        
} else {                                                                                               } else {                                                                                            
// Not in quoting mode                                                                                 // Not in quoting mode                                                                              
// check for delimiter, and thus end of token                                                          // check for delimiter, and thus end of token                                                       
int delimLen = getDelimiterMatcher().isMatch(chars, pos, start, len);                                  int delimLen = getDelimiterMatcher().isMatch(chars, pos, start, len);                               
if (delimLen &gt; 0) {                                                                                 if (delimLen &gt; 0) {                                                                              
// return condition when end of token found                                                            // return condition when end of token found                                                         
addToken(tokens, workArea.substring(0, trimStart));                                                    addToken(tokens, workArea.substring(0, trimStart));                                                 
return pos + delimLen;                                                                                 return pos + delimLen;                                                                              
}                                                                                                      }                                                                                                   
// check for quote, and thus back into quoting mode                                                    // check for quote, and thus back into quoting mode                                                 
if (quoteLen &gt; 0) {                                                                                 if (quoteLen &gt; 0) {                                                                              
if (isQuote(chars, pos, len, quoteStart, quoteLen)) {                                                  if (isQuote(chars, pos, len, quoteStart, quoteLen)) {                                               
quoting = true;                                                                                        quoting = true;                                                                                     
pos += quoteLen;                                                                                       pos += quoteLen;                                                                                    
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// check for ignored (outside quotes), and ignore                                                      // check for ignored (outside quotes), and ignore                                                   
int ignoredLen = getIgnoredMatcher().isMatch(chars, pos, start, len);                                  int ignoredLen = getIgnoredMatcher().isMatch(chars, pos, start, len);                               
if (ignoredLen &gt; 0) {                                                                               if (ignoredLen &gt; 0) {                                                                            
pos += ignoredLen;                                                                                     pos += ignoredLen;                                                                                  
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// check for trimmed character                                                                         // check for trimmed character                                                                      
// don't yet know if its at the end, so copy to workArea                                               // don't yet know if its at the end, so copy to workArea                                            
// use trimStart to keep track of trim at the end                                                      // use trimStart to keep track of trim at the end                                                   
int trimmedLen = getTrimmerMatcher().isMatch(chars, pos, start, len);                                  int trimmedLen = getTrimmerMatcher().isMatch(chars, pos, start, len);                               
if (trimmedLen &gt; 0) {                                                                               if (trimmedLen &gt; 0) {                                                                            
workArea.append(chars, pos, trimmedLen);                                                               workArea.append(chars, pos, trimmedLen);                                                            
pos += trimmedLen;                                                                                     pos += trimmedLen;                                                                                  
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// copy regular character from outside quotes                                                          // copy regular character from outside quotes                                                       
workArea.append(chars[pos++]);                                                                         workArea.append(chars[pos++]);                                                                      
trimStart = workArea.size();                                                                           trimStart = workArea.size();                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// return condition when end of string found                                                           // return condition when end of string found                                                        
addToken(tokens, workArea.substring(0, trimStart));                                                    addToken(tokens, workArea.substring(0, trimStart));                                                 
return -1;                                                                                             return -1;                                                                                          
}                                                                                                      }                                                                                                   
