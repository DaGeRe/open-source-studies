/**                                                                                                    /**                                                                                                 
* Internal method to performs the tokenization.                                                        * Internal method to performs the tokenization.                                                     
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Most users of this class do not need to call this method. This method                                * Most users of this class do not need to call this method. This method                             
* will be called automatically by other (public) methods when required.                                * will be called automatically by other (public) methods when required.                             
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* This method exists to allow subclasses to add code before or after the                               * This method exists to allow subclasses to add code before or after the                            
* tokenization. For example, a subclass could alter the character array,                               * tokenization. For example, a subclass could alter the character array,                            
* offset or count to be parsed, or call the tokenizer multiple times on                                * offset or count to be parsed, or call the tokenizer multiple times on                             
* multiple strings. It is also be possible to filter the results.                                      * multiple strings. It is also be possible to filter the results.                                   
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* &lt;code&gt;StrTokenizer&lt;/code&gt; will always pass a zero offset and a count                     * &lt;code&gt;StrTokenizer&lt;/code&gt; will always pass a zero offset and a count                  
* equal to the length of the array to this method, however a subclass                                  * equal to the length of the array to this method, however a subclass                               
* may pass other values, or even an entirely different array.                                          * may pass other values, or even an entirely different array.                                       
*                                                                                                      *                                                                                                   
* @param chars  the character array being tokenized, may be null                                       * @param chars  the character array being tokenized, may be null                                    
* @param offset  the start position within the character array, must be valid                          * @param offset  the start position within the character array, must be valid                       
* @param count  the number of characters to tokenize, must be valid                                    * @param count  the number of characters to tokenize, must be valid                                 
* @return the modifiable list of String tokens, unmodifiable if null array or zero count               * @return the modifiable list of String tokens, unmodifiable if null array or zero count            
*/                                                                                                     */                                                                                                  
protected List tokenize(char[] chars, int offset, int count) {                                       | protected List&lt;String&gt; tokenize(char[] chars, int offset, int count) {                        
if (chars == null || count == 0) {                                                                     if (chars == null || count == 0) {                                                                  
return Collections.EMPTY_LIST;                                                                       | return Collections.emptyList();                                                                     
}                                                                                                      }                                                                                                   
StrBuilder buf = new StrBuilder();                                                                     StrBuilder buf = new StrBuilder();                                                                  
List tokens = new ArrayList();                                                                       | List&lt;String&gt; tokens = new ArrayList&lt;String&gt;();                                          
int pos = offset;                                                                                      int pos = offset;                                                                                   
// loop around the entire buffer                                                                       // loop around the entire buffer                                                                    
while (pos &gt;= 0 && pos &lt; count) {                                                                while (pos &gt;= 0 && pos &lt; count) {                                                             
// find next token                                                                                     // find next token                                                                                  
pos = readNextToken(chars, pos, count, buf, tokens);                                                   pos = readNextToken(chars, pos, count, buf, tokens);                                                
// handle case where end of string is a delimiter                                                      // handle case where end of string is a delimiter                                                   
if (pos &gt;= count) {                                                                                 if (pos &gt;= count) {                                                                              
addToken(tokens, "");                                                                                  addToken(tokens, "");                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return tokens;                                                                                         return tokens;                                                                                      
}                                                                                                      }                                                                                                   
