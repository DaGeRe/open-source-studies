/**                                                                                                    /**                                                                                                 
* Reads character by character through the String to get the next token.                               * Reads character by character through the String to get the next token.                            
*                                                                                                      *                                                                                                   
* @param chars  the character array being tokenized                                                    * @param chars  the character array being tokenized                                                 
* @param start  the first character of field                                                           * @param start  the first character of field                                                        
* @param len  the length of the character array being tokenized                                        * @param len  the length of the character array being tokenized                                     
* @param workArea  a temporary work area                                                               * @param workArea  a temporary work area                                                            
* @param tokens  the list of parsed tokens                                                             * @param tokens  the list of parsed tokens                                                          
* @return the starting position of the next field (the character                                       * @return the starting position of the next field (the character                                    
*  immediately after the delimiter), or -1 if end of string found                                      *  immediately after the delimiter), or -1 if end of string found                                   
*/                                                                                                     */                                                                                                  
private int readNextToken(char[] chars, int start, int len, StrBuilder workArea, List tokens) {      | private int readNextToken(char[] chars, int start, int len, StrBuilder workArea, List&lt;String&gt; 
// skip all leading whitespace, unless it is the                                                       // skip all leading whitespace, unless it is the                                                    
// field delimiter or the quote character                                                              // field delimiter or the quote character                                                           
while (start &lt; len) {                                                                               while (start &lt; len) {                                                                            
int removeLen = Math.max(getIgnoredMatcher().isMatch(chars, start, start, len), getTrimmerMatcher().   int removeLen = Math.max(getIgnoredMatcher().isMatch(chars, start, start, len), getTrimmerMatcher().
if (removeLen == 0 || getDelimiterMatcher().isMatch(chars, start, start, len) &gt; 0 || getQuoteMatc   if (removeLen == 0 || getDelimiterMatcher().isMatch(chars, start, start, len) &gt; 0 || getQuoteMatc
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
start += removeLen;                                                                                    start += removeLen;                                                                                 
}                                                                                                      }                                                                                                   
// handle reaching end                                                                                 // handle reaching end                                                                              
if (start &gt;= len) {                                                                                 if (start &gt;= len) {                                                                              
addToken(tokens, "");                                                                                  addToken(tokens, "");                                                                               
return -1;                                                                                             return -1;                                                                                          
}                                                                                                      }                                                                                                   
// handle empty token                                                                                  // handle empty token                                                                               
int delimLen = getDelimiterMatcher().isMatch(chars, start, start, len);                                int delimLen = getDelimiterMatcher().isMatch(chars, start, start, len);                             
if (delimLen &gt; 0) {                                                                                 if (delimLen &gt; 0) {                                                                              
addToken(tokens, "");                                                                                  addToken(tokens, "");                                                                               
return start + delimLen;                                                                               return start + delimLen;                                                                            
}                                                                                                      }                                                                                                   
// handle found token                                                                                  // handle found token                                                                               
int quoteLen = getQuoteMatcher().isMatch(chars, start, start, len);                                    int quoteLen = getQuoteMatcher().isMatch(chars, start, start, len);                                 
if (quoteLen &gt; 0) {                                                                                 if (quoteLen &gt; 0) {                                                                              
return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);                return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);             
}                                                                                                      }                                                                                                   
return readWithQuotes(chars, start, len, workArea, tokens, 0, 0);                                      return readWithQuotes(chars, start, len, workArea, tokens, 0, 0);                                   
}                                                                                                      }                                                                                                   
