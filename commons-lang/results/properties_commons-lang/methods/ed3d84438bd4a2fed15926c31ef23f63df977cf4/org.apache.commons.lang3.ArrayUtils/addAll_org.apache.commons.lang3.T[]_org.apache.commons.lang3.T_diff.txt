/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;                       * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;                    
* &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed       * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed    
* by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always      * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always   
* a new array.&lt;/p&gt;                                                                               * a new array.&lt;/p&gt;                                                                            
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* ArrayUtils.addAll(null, null)     = null                                                             * ArrayUtils.addAll(null, null)     = null                                                          
* ArrayUtils.addAll(array1, null)   = cloned copy of array1                                            * ArrayUtils.addAll(array1, null)   = cloned copy of array1                                         
* ArrayUtils.addAll(null, array2)   = cloned copy of array2                                            * ArrayUtils.addAll(null, array2)   = cloned copy of array2                                         
* ArrayUtils.addAll([], [])         = []                                                               * ArrayUtils.addAll([], [])         = []                                                            
* ArrayUtils.addAll([null], [null]) = [null, null]                                                     * ArrayUtils.addAll([null], [null]) = [null, null]                                                  
* ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]                 * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]              
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param array1  the first array whose elements are added to the new array, may be &lt;code&gt;null&   * @param array1  the first array whose elements are added to the new array, may be &lt;code&gt;null&
* @param array2  the second array whose elements are added to the new array, may be &lt;code&gt;null   * @param array2  the second array whose elements are added to the new array, may be &lt;code&gt;null
* @return The new array, &lt;code&gt;null&lt;/code&gt; if both arrays are &lt;code&gt;null&lt;/code&   * @return The new array, &lt;code&gt;null&lt;/code&gt; if both arrays are &lt;code&gt;null&lt;/code&
*      The type of the new array is the type of the first array,                                       *      The type of the new array is the type of the first array,                                    
*      unless the first array is null, in which case the type is the same as the second array.         *      unless the first array is null, in which case the type is the same as the second array.      
* @since 2.1                                                                                           * @since 2.1                                                                                        
*/                                                                                                     */                                                                                                  
@SuppressWarnings("unchecked")                                                                       |                                                                                                     
public static &lt;T&gt; T[] addAll(T[] array1, T... array2) {                                          public static &lt;T&gt; T[] addAll(T[] array1, T... array2) {                                       
if (array1 == null) {                                                                                  if (array1 == null) {                                                                               
return clone(array2);                                                                                  return clone(array2);                                                                               
} else if (array2 == null) {                                                                           } else if (array2 == null) {                                                                        
return clone(array1);                                                                                  return clone(array1);                                                                               
}                                                                                                      }                                                                                                   
final Class&lt;?&gt; type1 = array1.getClass().getComponentType();                                     final Class&lt;?&gt; type1 = array1.getClass().getComponentType();                                  
                                                                                                     | // OK, because array is of type T                                                                   
                                                                                                     | @SuppressWarnings("unchecked")                                                                      
T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);                       T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);                    
System.arraycopy(array1, 0, joinedArray, 0, array1.length);                                            System.arraycopy(array1, 0, joinedArray, 0, array1.length);                                         
try {                                                                                                  try {                                                                                               
System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);                                System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);                             
} catch (ArrayStoreException ase) {                                                                    } catch (ArrayStoreException ase) {                                                                 
// Check if problem is incompatible types                                                              // Check if problem is incompatible types                                                           
final Class&lt;?&gt; type2 = array2.getClass().getComponentType();                                     final Class&lt;?&gt; type2 = array2.getClass().getComponentType();                                  
if (!type1.isAssignableFrom(type2)) {                                                                  if (!type1.isAssignableFrom(type2)) {                                                               
throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.ge   throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.ge
}                                                                                                      }                                                                                                   
// No, so rethrow original                                                                             // No, so rethrow original                                                                          
throw ase;                                                                                             throw ase;                                                                                          
}                                                                                                      }                                                                                                   
return joinedArray;                                                                                    return joinedArray;                                                                                 
}                                                                                                      }                                                                                                   
