// Subarrays                                                                                           // Subarrays                                                                                        
// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Produces a new array containing the elements between                                        * &lt;p&gt;Produces a new array containing the elements between                                     
* the start and end indices.&lt;/p&gt;                                                                 * the start and end indices.&lt;/p&gt;                                                              
*                                                                                                      *                                                                                                   
* &lt;p&gt;The start index is inclusive, the end index exclusive.                                      * &lt;p&gt;The start index is inclusive, the end index exclusive.                                   
* Null array input produces null output.&lt;/p&gt;                                                     * Null array input produces null output.&lt;/p&gt;                                                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;The component type of the subarray is always the same as                                    * &lt;p&gt;The component type of the subarray is always the same as                                 
* that of the input array. Thus, if the input is an array of type                                      * that of the input array. Thus, if the input is an array of type                                   
* &lt;code&gt;Date&lt;/code&gt;, the following usage is envisaged:&lt;/p&gt;                           * &lt;code&gt;Date&lt;/code&gt;, the following usage is envisaged:&lt;/p&gt;                        
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);                                      * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);                                   
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param array  the array                                                                              * @param array  the array                                                                           
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)                                   * @param startIndexInclusive  the starting index. Undervalue (&lt;0)                                
*      is promoted to 0, overvalue (&gt;array.length) results                                          *      is promoted to 0, overvalue (&gt;array.length) results                                       
*      in an empty array.                                                                              *      in an empty array.                                                                           
* @param endIndexExclusive  elements up to endIndex-1 are present in the                               * @param endIndexExclusive  elements up to endIndex-1 are present in the                            
*      returned subarray. Undervalue (&lt; startIndex) produces                                        *      returned subarray. Undervalue (&lt; startIndex) produces                                     
*      empty array, overvalue (&gt;array.length) is demoted to                                         *      empty array, overvalue (&gt;array.length) is demoted to                                      
*      array length.                                                                                   *      array length.                                                                                
* @return a new array containing the elements between                                                  * @return a new array containing the elements between                                               
*      the start and end indices.                                                                      *      the start and end indices.                                                                   
* @since 2.1                                                                                           * @since 2.1                                                                                        
*/                                                                                                     */                                                                                                  
@SuppressWarnings("unchecked")                                                                       |                                                                                                     
public static &lt;T&gt; T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {      public static &lt;T&gt; T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {   
if (array == null) {                                                                                   if (array == null) {                                                                                
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
if (startIndexInclusive &lt; 0) {                                                                      if (startIndexInclusive &lt; 0) {                                                                   
startIndexInclusive = 0;                                                                               startIndexInclusive = 0;                                                                            
}                                                                                                      }                                                                                                   
if (endIndexExclusive &gt; array.length) {                                                             if (endIndexExclusive &gt; array.length) {                                                          
endIndexExclusive = array.length;                                                                      endIndexExclusive = array.length;                                                                   
}                                                                                                      }                                                                                                   
int newSize = endIndexExclusive - startIndexInclusive;                                                 int newSize = endIndexExclusive - startIndexInclusive;                                              
Class&lt;?&gt; type = array.getClass().getComponentType();                                             Class&lt;?&gt; type = array.getClass().getComponentType();                                          
if (newSize &lt;= 0) {                                                                                 if (newSize &lt;= 0) {                                                                              
return (T[]) Array.newInstance(type, 0);                                                             | // OK, because array is of type T                                                                   
                                                                                                     | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | final T[] emptyArray = (T[]) Array.newInstance(type, 0);                                            
                                                                                                     | return emptyArray;                                                                                  
}                                                                                                      }                                                                                                   
                                                                                                     | // OK, because array is of type T                                                                   
                                                                                                     | @SuppressWarnings("unchecked")                                                                      
T[] subarray = (T[]) Array.newInstance(type, newSize);                                                 T[] subarray = (T[]) Array.newInstance(type, newSize);                                              
System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);                                    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);                                 
return subarray;                                                                                       return subarray;                                                                                    
}                                                                                                      }                                                                                                   
