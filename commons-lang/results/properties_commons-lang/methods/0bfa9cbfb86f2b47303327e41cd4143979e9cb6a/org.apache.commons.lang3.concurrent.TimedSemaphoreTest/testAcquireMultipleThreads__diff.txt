/**
 * Tests the acquire() method if more threads are involved than the limit.
 * This method starts a number of threads that all invoke the semaphore. The
 * semaphore's limit is set to 1, so in each period only a single thread can
 * acquire the semaphore.
 */
@Test
public void testAcquireMultipleThreads() throws InterruptedException {
    ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);
    ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
    prepareStartTimer(service, future);
    EasyMock.replay(service, future);
    TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, 1);
    semaphore.latch = new CountDownLatch(1);
    final int count = 10;
    SemaphoreThread[] threads = new SemaphoreThread[count];
    for (int i = 0; i < count; i++) {
        threads[i] = new SemaphoreThread(semaphore, null, 1, 0);
        threads[i].start();
    }
    for (int i = 0; i < count; i++) {
        semaphore.latch.await();
        assertEquals("Wrong count", 1, semaphore.getAcquireCount());
        semaphore.latch = new CountDownLatch(1);
        semaphore.endOfPeriod();
        assertEquals("Wrong acquire count", 1, semaphore.getLastAcquiresPerPeriod());
    }
    for (int i = 0; i < count; i++) {
        threads[i].join();
    }
    EasyMock.verify(service, future);
}