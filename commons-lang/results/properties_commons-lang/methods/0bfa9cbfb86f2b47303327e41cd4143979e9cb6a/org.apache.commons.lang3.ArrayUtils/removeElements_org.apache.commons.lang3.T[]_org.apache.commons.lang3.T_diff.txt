/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Removes occurrences of specified elements, in specified quantities,                         * &lt;p&gt;Removes occurrences of specified elements, in specified quantities,                      
* from the specified array. All subsequent elements are shifted left.                                  * from the specified array. All subsequent elements are shifted left.                               
* For any element-to-be-removed specified in greater quantities than                                   * For any element-to-be-removed specified in greater quantities than                                
* contained in the original array, no change occurs beyond the                                         * contained in the original array, no change occurs beyond the                                      
* removal of the existing matching items.&lt;/p&gt;                                                    * removal of the existing matching items.&lt;/p&gt;                                                 
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method returns a new array with the same elements of the input                         * &lt;p&gt;This method returns a new array with the same elements of the input                      
* array except for the earliest-encountered occurrences of the specified                               * array except for the earliest-encountered occurrences of the specified                            
* elements. The component type of the returned array is always the same                                * elements. The component type of the returned array is always the same                             
* as that of the input array.&lt;/p&gt;                                                                * as that of the input array.&lt;/p&gt;                                                             
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* ArrayUtils.removeElements(null, "a", "b")            = null                                          * ArrayUtils.removeElements(null, "a", "b")            = null                                       
* ArrayUtils.removeElements([], "a", "b")              = []                                            * ArrayUtils.removeElements([], "a", "b")              = []                                         
* ArrayUtils.removeElements(["a"], "b", "c")           = ["a"]                                         * ArrayUtils.removeElements(["a"], "b", "c")           = ["a"]                                      
* ArrayUtils.removeElements(["a", "b"], "a", "c")      = ["b"]                                         * ArrayUtils.removeElements(["a", "b"], "a", "c")      = ["b"]                                      
* ArrayUtils.removeElements(["a", "b", "a"], "a")      = ["b", "a"]                                    * ArrayUtils.removeElements(["a", "b", "a"], "a")      = ["b", "a"]                                 
* ArrayUtils.removeElements(["a", "b", "a"], "a", "a") = ["b"]                                         * ArrayUtils.removeElements(["a", "b", "a"], "a", "a") = ["b"]                                      
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param array  the array to remove the element from, may be {@code null}                              * @param array  the array to remove the element from, may be {@code null}                           
* @param elements  the elements to be removed                                                          * @param elements  the elements to be removed                                                       
* @return A new array containing the existing elements except the                                      * @return A new array containing the existing elements except the                                   
*         earliest-encountered occurrences of the specified elements.                                  *         earliest-encountered occurrences of the specified elements.                               
* @since 3.0.1                                                                                         * @since 3.0.1                                                                                      
*/                                                                                                     */                                                                                                  
public static &lt;T&gt; T[] removeElements(T[] array, T... values) {                                   public static &lt;T&gt; T[] removeElements(T[] array, T... values) {                                
if (isEmpty(array) || isEmpty(values)) {                                                               if (isEmpty(array) || isEmpty(values)) {                                                            
return clone(array);                                                                                   return clone(array);                                                                                
}                                                                                                      }                                                                                                   
HashMap&lt;T, MutableInt&gt; occurrences = new HashMap&lt;T, MutableInt&gt;(values.length);            HashMap&lt;T, MutableInt&gt; occurrences = new HashMap&lt;T, MutableInt&gt;(values.length);         
for (T v : values) {                                                                                   for (T v : values) {                                                                                
MutableInt count = occurrences.get(v);                                                                 MutableInt count = occurrences.get(v);                                                              
if (count == null) {                                                                                   if (count == null) {                                                                                
occurrences.put(v, new MutableInt(1));                                                                 occurrences.put(v, new MutableInt(1));                                                              
} else {                                                                                               } else {                                                                                            
count.increment();                                                                                     count.increment();                                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
HashSet&lt;Integer&gt; toRemove = new HashSet&lt;Integer&gt;();                                        HashSet&lt;Integer&gt; toRemove = new HashSet&lt;Integer&gt;();                                     
for (Map.Entry&lt;T, MutableInt&gt; e : occurrences.entrySet()) {                                      for (Map.Entry&lt;T, MutableInt&gt; e : occurrences.entrySet()) {                                   
T v = e.getKey();                                                                                      T v = e.getKey();                                                                                   
int found = 0;                                                                                         int found = 0;                                                                                      
for (int i = 0, ct = e.getValue().intValue(); i &lt; ct; i++) {                                        for (int i = 0, ct = e.getValue().intValue(); i &lt; ct; i++) {                                     
found = indexOf(array, v, found);                                                                      found = indexOf(array, v, found);                                                                   
if (found &lt; 0) {                                                                                    if (found &lt; 0) {                                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
toRemove.add(found++);                                                                                 toRemove.add(found++);                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return removeAll(array, toPrimitive(toRemove.toArray(new Integer[toRemove.size()])));                | return removeAll(array, extractIndices(toRemove));                                                  
}                                                                                                      }                                                                                                   
