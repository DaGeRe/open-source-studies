/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Compares all CharSequences in an array and returns the index at which the                   * &lt;p&gt;Compares all CharSequences in an array and returns the index at which the                
* CharSequences begin to differ.&lt;/p&gt;                                                             * CharSequences begin to differ.&lt;/p&gt;                                                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;For example,                                                                                * &lt;p&gt;For example,                                                                             
* &lt;code&gt;indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -&gt; 7&lt;/code&gt   * &lt;code&gt;indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -&gt; 7&lt;/code&gt
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.indexOfDifference(null) = -1                                                             * StringUtils.indexOfDifference(null) = -1                                                          
* StringUtils.indexOfDifference(new String[] {}) = -1                                                  * StringUtils.indexOfDifference(new String[] {}) = -1                                               
* StringUtils.indexOfDifference(new String[] {"abc"}) = -1                                             * StringUtils.indexOfDifference(new String[] {"abc"}) = -1                                          
* StringUtils.indexOfDifference(new String[] {null, null}) = -1                                        * StringUtils.indexOfDifference(new String[] {null, null}) = -1                                     
* StringUtils.indexOfDifference(new String[] {"", ""}) = -1                                            * StringUtils.indexOfDifference(new String[] {"", ""}) = -1                                         
* StringUtils.indexOfDifference(new String[] {"", null}) = 0                                           * StringUtils.indexOfDifference(new String[] {"", null}) = 0                                        
* StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0                                  * StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0                               
* StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0                                  * StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0                               
* StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0                                          * StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0                                       
* StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0                                          * StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0                                       
* StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1                                      * StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1                                   
* StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1                                         * StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1                                      
* StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2                                      * StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2                                   
* StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2                                   * StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2                                
* StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0                                     * StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0                                  
* StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0                                     * StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0                                  
* StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7                   * StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7                
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param css  array of CharSequences, entries may be null                                              * @param css  array of CharSequences, entries may be null                                           
* @return the index where the strings begin to differ; -1 if they are all equal                        * @return the index where the strings begin to differ; -1 if they are all equal                     
* @since 2.4                                                                                           * @since 2.4                                                                                        
*/                                                                                                     */                                                                                                  
public static int indexOfDifference(CharSequence[] css) {                                            | public static int indexOfDifference(CharSequence... css) {                                          
if (css == null || css.length &lt;= 1) {                                                               if (css == null || css.length &lt;= 1) {                                                            
return INDEX_NOT_FOUND;                                                                                return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
boolean anyStringNull = false;                                                                         boolean anyStringNull = false;                                                                      
boolean allStringsNull = true;                                                                         boolean allStringsNull = true;                                                                      
int arrayLen = css.length;                                                                             int arrayLen = css.length;                                                                          
int shortestStrLen = Integer.MAX_VALUE;                                                                int shortestStrLen = Integer.MAX_VALUE;                                                             
int longestStrLen = 0;                                                                                 int longestStrLen = 0;                                                                              
// find the min and max string lengths; this avoids checking to make                                   // find the min and max string lengths; this avoids checking to make                                
// sure we are not exceeding the length of the string each time through                                // sure we are not exceeding the length of the string each time through                             
// the bottom loop.                                                                                    // the bottom loop.                                                                                 
for (int i = 0; i &lt; arrayLen; i++) {                                                                for (int i = 0; i &lt; arrayLen; i++) {                                                             
if (css[i] == null) {                                                                                  if (css[i] == null) {                                                                               
anyStringNull = true;                                                                                  anyStringNull = true;                                                                               
shortestStrLen = 0;                                                                                    shortestStrLen = 0;                                                                                 
} else {                                                                                               } else {                                                                                            
allStringsNull = false;                                                                                allStringsNull = false;                                                                             
shortestStrLen = Math.min(css[i].length(), shortestStrLen);                                            shortestStrLen = Math.min(css[i].length(), shortestStrLen);                                         
longestStrLen = Math.max(css[i].length(), longestStrLen);                                              longestStrLen = Math.max(css[i].length(), longestStrLen);                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// handle lists containing all nulls or all empty strings                                              // handle lists containing all nulls or all empty strings                                           
if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {                                        if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {                                     
return INDEX_NOT_FOUND;                                                                                return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
// handle lists containing some nulls or some empty strings                                            // handle lists containing some nulls or some empty strings                                         
if (shortestStrLen == 0) {                                                                             if (shortestStrLen == 0) {                                                                          
return 0;                                                                                              return 0;                                                                                           
}                                                                                                      }                                                                                                   
// find the position with the first difference across all strings                                      // find the position with the first difference across all strings                                   
int firstDiff = -1;                                                                                    int firstDiff = -1;                                                                                 
for (int stringPos = 0; stringPos &lt; shortestStrLen; stringPos++) {                                  for (int stringPos = 0; stringPos &lt; shortestStrLen; stringPos++) {                               
char comparisonChar = css[0].charAt(stringPos);                                                        char comparisonChar = css[0].charAt(stringPos);                                                     
for (int arrayPos = 1; arrayPos &lt; arrayLen; arrayPos++) {                                           for (int arrayPos = 1; arrayPos &lt; arrayLen; arrayPos++) {                                        
if (css[arrayPos].charAt(stringPos) != comparisonChar) {                                               if (css[arrayPos].charAt(stringPos) != comparisonChar) {                                            
firstDiff = stringPos;                                                                                 firstDiff = stringPos;                                                                              
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (firstDiff != -1) {                                                                                 if (firstDiff != -1) {                                                                              
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (firstDiff == -1 && shortestStrLen != longestStrLen) {                                              if (firstDiff == -1 && shortestStrLen != longestStrLen) {                                           
// we compared all of the characters up to the length of the                                           // we compared all of the characters up to the length of the                                        
// shortest string and didn't find a match, but the string lengths                                     // shortest string and didn't find a match, but the string lengths                                  
// vary, so return the length of the shortest string.                                                  // vary, so return the length of the shortest string.                                               
return shortestStrLen;                                                                                 return shortestStrLen;                                                                              
}                                                                                                      }                                                                                                   
return firstDiff;                                                                                      return firstDiff;                                                                                   
}                                                                                                      }                                                                                                   
