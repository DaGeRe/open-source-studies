// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks if two annotations are equal.&lt;/p&gt;                                              * &lt;p&gt;Checks if two annotations are equal.&lt;/p&gt;                                           
*                                                                                                      *                                                                                                   
* &lt;p&gt;Dynamically created {@link Annotation} instances are always proxy                           * &lt;p&gt;Dynamically created {@link Annotation} instances are always proxy                        
* objects which cannot be depended upon to know how to implement                                       * objects which cannot be depended upon to know how to implement                                    
* {@link Annotation#equals(Object)} correctly.&lt;/p&gt;                                               * {@link Annotation#equals(Object)} correctly.&lt;/p&gt;                                            
*                                                                                                      *                                                                                                   
* @param a1 the first Annotation to compare, null returns false unless both are null                   * @param a1 the first Annotation to compare, null returns false unless both are null                
* @param a2 the second Annotation to compare, null returns false unless both are null                  * @param a2 the second Annotation to compare, null returns false unless both are null               
* @return true if the two annotations are equal or both null                                           * @return true if the two annotations are equal or both null                                        
*/                                                                                                     */                                                                                                  
public static boolean equals(Annotation a1, Annotation a2) {                                           public static boolean equals(Annotation a1, Annotation a2) {                                        
if (a1 == a2) {                                                                                        if (a1 == a2) {                                                                                     
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
if (a1 == null || a2 == null) {                                                                        if (a1 == null || a2 == null) {                                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
Class&lt;? extends Annotation&gt; type = a1.annotationType();                                          Class&lt;? extends Annotation&gt; type = a1.annotationType();                                       
Class&lt;? extends Annotation&gt; type2 = a2.annotationType();                                         Class&lt;? extends Annotation&gt; type2 = a2.annotationType();                                      
Validate.notNull(type, "Annotation %s with null annotationType()", a1);                                Validate.notNull(type, "Annotation %s with null annotationType()", a1);                             
Validate.notNull(type2, "Annotation %s with null annotationType()", a2);                               Validate.notNull(type2, "Annotation %s with null annotationType()", a2);                            
if (!type.equals(type2)) {                                                                             if (!type.equals(type2)) {                                                                          
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
for (Method m : type.getDeclaredMethods()) {                                                           for (Method m : type.getDeclaredMethods()) {                                                        
if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {             if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {          
Object v1 = m.invoke(a1);                                                                              Object v1 = m.invoke(a1);                                                                           
Object v2 = m.invoke(a2);                                                                              Object v2 = m.invoke(a2);                                                                           
if (!memberEquals(m.getReturnType(), v1, v2)) {                                                        if (!memberEquals(m.getReturnType(), v1, v2)) {                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (IllegalAccessException e) {                                                                 | } catch (IllegalAccessException ex) {                                                               
return false;                                                                                          return false;                                                                                       
} catch (InvocationTargetException e) {                                                              | } catch (InvocationTargetException ex) {                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
