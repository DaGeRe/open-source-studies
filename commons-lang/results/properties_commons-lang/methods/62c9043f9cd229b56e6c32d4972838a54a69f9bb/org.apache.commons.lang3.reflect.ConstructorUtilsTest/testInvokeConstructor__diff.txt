public void testInvokeConstructor() throws Exception {                                                 public void testInvokeConstructor() throws Exception {                                              
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY). | assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CL
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Class[]) null).toString());   | assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); 
assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString());           assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString());        
assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()   assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()
assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()   assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()
assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE   assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE
assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toStr   assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toStr
assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).to   assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).to
assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).   assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).
}                                                                                                      }                                                                                                   
