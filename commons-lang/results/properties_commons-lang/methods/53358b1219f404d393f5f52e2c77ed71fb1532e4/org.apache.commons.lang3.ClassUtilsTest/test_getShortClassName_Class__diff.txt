public void test_getShortClassName_Class() {                                                           public void test_getShortClassName_Class() {                                                        
assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                            assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                         
assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                              assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                           
assertEquals("", ClassUtils.getShortClassName((Class&lt;?&gt;) null));                                 assertEquals("", ClassUtils.getShortClassName((Class&lt;?&gt;) null));                              
// LANG-535                                                                                            // LANG-535                                                                                         
assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                                assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                             
assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                          assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                       
// Primitives                                                                                          // Primitives                                                                                       
assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                                  assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                               
assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                        assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                     
assertEquals("char", ClassUtils.getShortClassName(char.class));                                        assertEquals("char", ClassUtils.getShortClassName(char.class));                                     
assertEquals("short", ClassUtils.getShortClassName(short.class));                                      assertEquals("short", ClassUtils.getShortClassName(short.class));                                   
assertEquals("int", ClassUtils.getShortClassName(int.class));                                          assertEquals("int", ClassUtils.getShortClassName(int.class));                                       
assertEquals("long", ClassUtils.getShortClassName(long.class));                                        assertEquals("long", ClassUtils.getShortClassName(long.class));                                     
assertEquals("float", ClassUtils.getShortClassName(float.class));                                      assertEquals("float", ClassUtils.getShortClassName(float.class));                                   
assertEquals("double", ClassUtils.getShortClassName(double.class));                                    assertEquals("double", ClassUtils.getShortClassName(double.class));                                 
// Primitive Arrays                                                                                    // Primitive Arrays                                                                                 
assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                              assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                           
assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                                    assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                                 
assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                                    assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                                 
assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                                  assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                               
assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                                      assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                                   
assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                                    assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                                 
assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                                  assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                               
assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                                assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                             
// Arrays of arrays of ...                                                                             // Arrays of arrays of ...                                                                          
assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                            assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                         
assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                        assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                     
assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));                    assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));                 
                                                                                                     | // Inner types                                                                                      
                                                                                                     | class Named extends Object {                                                                        
}                                                                                                      }                                                                                                   
                                                                                                     | ;                                                                                                   
                                                                                                     | assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() {                        
                                                                                                     | }.getClass()));                                                                                     
                                                                                                     | assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class));                   
                                                                                                     | assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class));                    
                                                                                                     | }                                                                                                   
