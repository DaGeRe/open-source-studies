/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Case in-sensitive find of the last index within a CharSequence                              * &lt;p&gt;Case in-sensitive find of the last index within a CharSequence                           
* from the specified position.&lt;/p&gt;                                                               * from the specified position.&lt;/p&gt;                                                            
*                                                                                                      *                                                                                                   
* &lt;p&gt;A {@code null} CharSequence will return {@code -1}.                                         * &lt;p&gt;A {@code null} CharSequence will return {@code -1}.                                      
* A negative start position returns {@code -1}.                                                        * A negative start position returns {@code -1}.                                                     
* An empty ("") search CharSequence always matches unless the start position is negative.              * An empty ("") search CharSequence always matches unless the start position is negative.           
* A start position greater than the string length searches the whole string.&lt;/p&gt;                 * A start position greater than the string length searches the whole string.&lt;/p&gt;              
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1                                          * StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1                                       
* StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1                                          * StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1                                       
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)  = 7                                           * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)  = 7                                        
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)  = 5                                           * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)  = 5                                        
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8) = 4                                           * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8) = 4                                        
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)  = 5                                           * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)  = 5                                        
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1) = -1                                          * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1) = -1                                       
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)  = 0                                           * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)  = 0                                        
* StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)  = -1                                          * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)  = -1                                       
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param str  the CharSequence to check, may be null                                                   * @param str  the CharSequence to check, may be null                                                
* @param searchStr  the CharSequence to find, may be null                                              * @param searchStr  the CharSequence to find, may be null                                           
* @param startPos  the start position                                                                  * @param startPos  the start position                                                               
* @return the first index of the search CharSequence,                                                  * @return the first index of the search CharSequence,                                               
*  -1 if no match or {@code null} input                                                                *  -1 if no match or {@code null} input                                                             
* @since 2.5                                                                                           * @since 2.5                                                                                        
*/                                                                                                     */                                                                                                  
public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {      public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {   
if (str == null || searchStr == null) {                                                                if (str == null || searchStr == null) {                                                             
return INDEX_NOT_FOUND;                                                                                return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
if (startPos &gt; (str.length() - searchStr.length())) {                                               if (startPos &gt; (str.length() - searchStr.length())) {                                            
startPos = str.length() - searchStr.length();                                                          startPos = str.length() - searchStr.length();                                                       
}                                                                                                      }                                                                                                   
if (startPos &lt; 0) {                                                                                 if (startPos &lt; 0) {                                                                              
return INDEX_NOT_FOUND;                                                                                return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
if (searchStr.length() == 0) {                                                                         if (searchStr.length() == 0) {                                                                      
return startPos;                                                                                       return startPos;                                                                                    
}                                                                                                      }                                                                                                   
for (int i = startPos; i &gt;= 0; i--) {                                                               for (int i = startPos; i &gt;= 0; i--) {                                                            
if (regionMatchesSequence(str, true, i, searchStr, 0, searchStr.length())) {                         | if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {              
return i;                                                                                              return i;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return INDEX_NOT_FOUND;                                                                                return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
