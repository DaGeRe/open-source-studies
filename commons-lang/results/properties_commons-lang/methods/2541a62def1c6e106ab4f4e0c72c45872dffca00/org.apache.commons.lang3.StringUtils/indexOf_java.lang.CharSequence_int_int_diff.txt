/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Finds the first index within a CharSequence from a start position,                          * &lt;p&gt;Finds the first index within a CharSequence from a start position,                       
* handling {@code null}.                                                                               * handling {@code null}.                                                                            
* This method uses {@link String#indexOf(int, int)} if possible.&lt;/p&gt;                             * This method uses {@link String#indexOf(int, int)} if possible.&lt;/p&gt;                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;A {@code null} or empty ("") CharSequence will return {@code (INDEX_NOT_FOUND) -1}.         * &lt;p&gt;A {@code null} or empty ("") CharSequence will return {@code (INDEX_NOT_FOUND) -1}.      
* A negative start position is treated as zero.                                                        * A negative start position is treated as zero.                                                     
* A start position greater than the string length returns {@code -1}.&lt;/p&gt;                        * A start position greater than the string length returns {@code -1}.&lt;/p&gt;                     
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.indexOf(null, *, *)          = -1                                                        * StringUtils.indexOf(null, *, *)          = -1                                                     
* StringUtils.indexOf("", *, *)            = -1                                                        * StringUtils.indexOf("", *, *)            = -1                                                     
* StringUtils.indexOf("aabaabaa", 'b', 0)  = 2                                                         * StringUtils.indexOf("aabaabaa", 'b', 0)  = 2                                                      
* StringUtils.indexOf("aabaabaa", 'b', 3)  = 5                                                         * StringUtils.indexOf("aabaabaa", 'b', 3)  = 5                                                      
* StringUtils.indexOf("aabaabaa", 'b', 9)  = -1                                                        * StringUtils.indexOf("aabaabaa", 'b', 9)  = -1                                                     
* StringUtils.indexOf("aabaabaa", 'b', -1) = 2                                                         * StringUtils.indexOf("aabaabaa", 'b', -1) = 2                                                      
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param seq  the CharSequence to check, may be null                                                   * @param seq  the CharSequence to check, may be null                                                
* @param searchChar  the character to find                                                             * @param searchChar  the character to find                                                          
* @param startPos  the start position, negative treated as zero                                        * @param startPos  the start position, negative treated as zero                                     
* @return the first index of the search character,                                                     * @return the first index of the search character,                                                  
*  -1 if no match or {@code null} string input                                                         *  -1 if no match or {@code null} string input                                                      
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static int indexOf(CharSequence seq, int searchChar, int startPos) {                            public static int indexOf(CharSequence seq, int searchChar, int startPos) {                         
if (isEmpty(seq)) {                                                                                    if (isEmpty(seq)) {                                                                                 
return INDEX_NOT_FOUND;                                                                                return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
return StringUtils.indexOfSequence(seq, searchChar, startPos);                                       | return CharSequenceUtils.indexOf(seq, searchChar, startPos);                                        
}                                                                                                      }                                                                                                   
