/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks whether the String a valid Java number.&lt;/p&gt;                                    * &lt;p&gt;Checks whether the String a valid Java number.&lt;/p&gt;                                 
*                                                                                                      *                                                                                                   
* &lt;p&gt;Valid numbers include hexadecimal marked with the &lt;code&gt;0x&lt;/code&gt;               * &lt;p&gt;Valid numbers include hexadecimal marked with the &lt;code&gt;0x&lt;/code&gt;            
* qualifier, scientific notation and numbers marked with a type                                        * qualifier, scientific notation and numbers marked with a type                                     
* qualifier (e.g. 123L).&lt;/p&gt;                                                                     * qualifier (e.g. 123L).&lt;/p&gt;                                                                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; and empty String will return                                  * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; and empty String will return                               
* &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;                                                            * &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;                                                         
*                                                                                                      *                                                                                                   
* @param str  the &lt;code&gt;String&lt;/code&gt; to check                                             * @param str  the &lt;code&gt;String&lt;/code&gt; to check                                          
* @return &lt;code&gt;true&lt;/code&gt; if the string is a correctly formatted number                  * @return &lt;code&gt;true&lt;/code&gt; if the string is a correctly formatted number               
*/                                                                                                     */                                                                                                  
public static boolean isNumber(String str) {                                                           public static boolean isNumber(String str) {                                                        
if (StringUtils.isEmpty(str)) {                                                                        if (StringUtils.isEmpty(str)) {                                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
char[] chars = str.toCharArray();                                                                      char[] chars = str.toCharArray();                                                                   
int sz = chars.length;                                                                                 int sz = chars.length;                                                                              
boolean hasExp = false;                                                                                boolean hasExp = false;                                                                             
boolean hasDecPoint = false;                                                                           boolean hasDecPoint = false;                                                                        
boolean allowSigns = false;                                                                            boolean allowSigns = false;                                                                         
boolean foundDigit = false;                                                                            boolean foundDigit = false;                                                                         
// deal with any possible sign up front                                                                // deal with any possible sign up front                                                             
int start = (chars[0] == '-') ? 1 : 0;                                                                 int start = (chars[0] == '-') ? 1 : 0;                                                              
if (sz &gt; start + 1) {                                                                               if (sz &gt; start + 1) {                                                                            
if (chars[start] == '0' && chars[start + 1] == 'x') {                                                  if (chars[start] == '0' && chars[start + 1] == 'x') {                                               
int i = start + 2;                                                                                     int i = start + 2;                                                                                  
if (i == sz) {                                                                                         if (i == sz) {                                                                                      
// str == "0x"                                                                                         // str == "0x"                                                                                      
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
// checking hex (it can't be anything else)                                                            // checking hex (it can't be anything else)                                                         
for (; i &lt; chars.length; i++) {                                                                     for (; i &lt; chars.length; i++) {                                                                  
if ((chars[i] &lt; '0' || chars[i] &gt; '9') && (chars[i] &lt; 'a' || chars[i] &gt; 'f') && (chars[i   if ((chars[i] &lt; '0' || chars[i] &gt; '9') && (chars[i] &lt; 'a' || chars[i] &gt; 'f') && (chars[i
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// don't want to loop to the last char, check it afterwords                                            // don't want to loop to the last char, check it afterwords                                         
sz--;                                                                                                  sz--;                                                                                               
// for type qualifiers                                                                                 // for type qualifiers                                                                              
int i = start;                                                                                         int i = start;                                                                                      
// loop to the next to last char or to the last char if we need another digit to                       // loop to the next to last char or to the last char if we need another digit to                    
// make a valid number (e.g. chars[0..5] = "1234E")                                                    // make a valid number (e.g. chars[0..5] = "1234E")                                                 
while (i &lt; sz || (i &lt; sz + 1 && allowSigns && !foundDigit)) {                                    while (i &lt; sz || (i &lt; sz + 1 && allowSigns && !foundDigit)) {                                 
if (chars[i] &gt;= '0' && chars[i] &lt;= '9') {                                                        if (chars[i] &gt;= '0' && chars[i] &lt;= '9') {                                                     
foundDigit = true;                                                                                     foundDigit = true;                                                                                  
allowSigns = false;                                                                                    allowSigns = false;                                                                                 
} else if (chars[i] == '.') {                                                                          } else if (chars[i] == '.') {                                                                       
if (hasDecPoint || hasExp) {                                                                           if (hasDecPoint || hasExp) {                                                                        
// two decimal points or dec in exponent                                                               // two decimal points or dec in exponent                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
hasDecPoint = true;                                                                                    hasDecPoint = true;                                                                                 
} else if (chars[i] == 'e' || chars[i] == 'E') {                                                       } else if (chars[i] == 'e' || chars[i] == 'E') {                                                    
// we've already taken care of hex.                                                                    // we've already taken care of hex.                                                                 
if (hasExp) {                                                                                          if (hasExp) {                                                                                       
// two E's                                                                                             // two E's                                                                                          
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
if (!foundDigit) {                                                                                     if (!foundDigit) {                                                                                  
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
hasExp = true;                                                                                         hasExp = true;                                                                                      
allowSigns = true;                                                                                     allowSigns = true;                                                                                  
} else if (chars[i] == '+' || chars[i] == '-') {                                                       } else if (chars[i] == '+' || chars[i] == '-') {                                                    
if (!allowSigns) {                                                                                     if (!allowSigns) {                                                                                  
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
allowSigns = false;                                                                                    allowSigns = false;                                                                                 
// we need a digit after the E                                                                         // we need a digit after the E                                                                      
foundDigit = false;                                                                                    foundDigit = false;                                                                                 
} else {                                                                                               } else {                                                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
if (i &lt; chars.length) {                                                                             if (i &lt; chars.length) {                                                                          
if (chars[i] &gt;= '0' && chars[i] &lt;= '9') {                                                        if (chars[i] &gt;= '0' && chars[i] &lt;= '9') {                                                     
// no type qualifier, OK                                                                               // no type qualifier, OK                                                                            
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
if (chars[i] == 'e' || chars[i] == 'E') {                                                              if (chars[i] == 'e' || chars[i] == 'E') {                                                           
// can't have an E at the last byte                                                                    // can't have an E at the last byte                                                                 
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
                                                                                                     | if (chars[i] == '.') {                                                                              
                                                                                                     | if (hasDecPoint || hasExp) {                                                                        
                                                                                                     | // two decimal points or dec in exponent                                                            
                                                                                                     | return false;                                                                                       
                                                                                                     | }                                                                                                   
                                                                                                     | // single trailing decimal point after non-exponent is ok                                           
                                                                                                     | return foundDigit;                                                                                  
                                                                                                     | }                                                                                                   
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {       if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {    
return foundDigit;                                                                                     return foundDigit;                                                                                  
}                                                                                                      }                                                                                                   
if (chars[i] == 'l' || chars[i] == 'L') {                                                              if (chars[i] == 'l' || chars[i] == 'L') {                                                           
// not allowing L with an exponent                                                                     // not allowing L with an exponent                                                                  
return foundDigit && !hasExp;                                                                          return foundDigit && !hasExp;                                                                       
}                                                                                                      }                                                                                                   
// last character is illegal                                                                           // last character is illegal                                                                        
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
// allowSigns is true iff the val ends in 'E'                                                          // allowSigns is true iff the val ends in 'E'                                                       
// found digit it to make sure weird stuff like '.' and '1E-' doesn't pass                             // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass                          
return !allowSigns && foundDigit;                                                                      return !allowSigns && foundDigit;                                                                   
}                                                                                                      }                                                                                                   
