/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Appends to the &lt;code&gt;builder&lt;/code&gt; the comparison of                           * &lt;p&gt;Appends to the &lt;code&gt;builder&lt;/code&gt; the comparison of                        
* two &lt;code&gt;Object&lt;/code&gt;s.&lt;/p&gt;                                                      * two &lt;code&gt;Object&lt;/code&gt;s.&lt;/p&gt;                                                   
*                                                                                                      *                                                                                                   
* &lt;ol&gt;                                                                                           * &lt;ol&gt;                                                                                        
* &lt;li&gt;Check if &lt;code&gt;lhs == rhs&lt;/code&gt;&lt;/li&gt;                                    * &lt;li&gt;Check if &lt;code&gt;lhs == rhs&lt;/code&gt;&lt;/li&gt;                                 
* &lt;li&gt;Check if either &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&gt; is &lt;code   * &lt;li&gt;Check if either &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&gt; is &lt;code
*     a &lt;code&gt;null&lt;/code&gt; object is less than a non-&lt;code&gt;null&lt;/code&gt; object   *     a &lt;code&gt;null&lt;/code&gt; object is less than a non-&lt;code&gt;null&lt;/code&gt; object
* &lt;li&gt;Check the object contents&lt;/li&gt;                                                       * &lt;li&gt;Check the object contents&lt;/li&gt;                                                    
* &lt;/ol&gt;                                                                                          * &lt;/ol&gt;                                                                                       
*                                                                                                      *                                                                                                   
* &lt;p&gt;If &lt;code&gt;lhs&lt;/code&gt; is an array, array comparison methods will be used.         * &lt;p&gt;If &lt;code&gt;lhs&lt;/code&gt; is an array, array comparison methods will be used.      
* Otherwise &lt;code&gt;comparator&lt;/code&gt; will be used to compare the objects.                   * Otherwise &lt;code&gt;comparator&lt;/code&gt; will be used to compare the objects.                
* If &lt;code&gt;comparator&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;lhs&lt;/code&   * If &lt;code&gt;comparator&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;lhs&lt;/code&
* implement {@link Comparable} instead.&lt;/p&gt;                                                      * implement {@link Comparable} instead.&lt;/p&gt;                                                   
*                                                                                                      *                                                                                                   
* @param lhs  left-hand object                                                                         * @param lhs  left-hand object                                                                      
* @param rhs  right-hand object                                                                        * @param rhs  right-hand object                                                                     
* @param comparator  &lt;code&gt;Comparator&lt;/code&gt; used to compare the objects,                  * @param comparator  &lt;code&gt;Comparator&lt;/code&gt; used to compare the objects,               
*  &lt;code&gt;null&lt;/code&gt; means treat lhs as &lt;code&gt;Comparable&lt;/code&gt;                *  &lt;code&gt;null&lt;/code&gt; means treat lhs as &lt;code&gt;Comparable&lt;/code&gt;             
* @return this - used to chain append calls                                                            * @return this - used to chain append calls                                                         
* @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible             * @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible          
*  with &lt;code&gt;lhs&lt;/code&gt;                                                                   *  with &lt;code&gt;lhs&lt;/code&gt;                                                                
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public CompareToBuilder append(Object lhs, Object rhs, Comparator comparator) {                      | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | public CompareToBuilder append(Object lhs, Object rhs, Comparator&lt;?&gt; comparator) {            
if (comparison != 0) {                                                                                 if (comparison != 0) {                                                                              
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs == rhs) {                                                                                      if (lhs == rhs) {                                                                                   
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs == null) {                                                                                     if (lhs == null) {                                                                                  
comparison = -1;                                                                                       comparison = -1;                                                                                    
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (rhs == null) {                                                                                     if (rhs == null) {                                                                                  
comparison = +1;                                                                                       comparison = +1;                                                                                    
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs.getClass().isArray()) {                                                                        if (lhs.getClass().isArray()) {                                                                     
// switch on type of array, to dispatch to the correct handler                                         // switch on type of array, to dispatch to the correct handler                                      
// handles multi dimensional arrays                                                                    // handles multi dimensional arrays                                                                 
// throws a ClassCastException if rhs is not the correct array type                                    // throws a ClassCastException if rhs is not the correct array type                                 
if (lhs instanceof long[]) {                                                                           if (lhs instanceof long[]) {                                                                        
append((long[]) lhs, (long[]) rhs);                                                                    append((long[]) lhs, (long[]) rhs);                                                                 
} else if (lhs instanceof int[]) {                                                                     } else if (lhs instanceof int[]) {                                                                  
append((int[]) lhs, (int[]) rhs);                                                                      append((int[]) lhs, (int[]) rhs);                                                                   
} else if (lhs instanceof short[]) {                                                                   } else if (lhs instanceof short[]) {                                                                
append((short[]) lhs, (short[]) rhs);                                                                  append((short[]) lhs, (short[]) rhs);                                                               
} else if (lhs instanceof char[]) {                                                                    } else if (lhs instanceof char[]) {                                                                 
append((char[]) lhs, (char[]) rhs);                                                                    append((char[]) lhs, (char[]) rhs);                                                                 
} else if (lhs instanceof byte[]) {                                                                    } else if (lhs instanceof byte[]) {                                                                 
append((byte[]) lhs, (byte[]) rhs);                                                                    append((byte[]) lhs, (byte[]) rhs);                                                                 
} else if (lhs instanceof double[]) {                                                                  } else if (lhs instanceof double[]) {                                                               
append((double[]) lhs, (double[]) rhs);                                                                append((double[]) lhs, (double[]) rhs);                                                             
} else if (lhs instanceof float[]) {                                                                   } else if (lhs instanceof float[]) {                                                                
append((float[]) lhs, (float[]) rhs);                                                                  append((float[]) lhs, (float[]) rhs);                                                               
} else if (lhs instanceof boolean[]) {                                                                 } else if (lhs instanceof boolean[]) {                                                              
append((boolean[]) lhs, (boolean[]) rhs);                                                              append((boolean[]) lhs, (boolean[]) rhs);                                                           
} else {                                                                                               } else {                                                                                            
// not an array of primitives                                                                          // not an array of primitives                                                                       
// throws a ClassCastException if rhs is not an array                                                  // throws a ClassCastException if rhs is not an array                                               
append((Object[]) lhs, (Object[]) rhs, comparator);                                                    append((Object[]) lhs, (Object[]) rhs, comparator);                                                 
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// the simple case, not an array, just test the element                                                // the simple case, not an array, just test the element                                             
if (comparator == null) {                                                                              if (comparator == null) {                                                                           
comparison = ((Comparable) lhs).compareTo(rhs);                                                        comparison = ((Comparable) lhs).compareTo(rhs);                                                     
} else {                                                                                               } else {                                                                                            
comparison = comparator.compare(lhs, rhs);                                                           | comparison = ((Comparator) comparator).compare(lhs, rhs);                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
