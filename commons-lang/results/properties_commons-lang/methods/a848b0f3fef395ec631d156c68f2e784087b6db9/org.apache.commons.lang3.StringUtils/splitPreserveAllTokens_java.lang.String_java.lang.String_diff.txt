/**
 * <p>Splits the provided text into an array, separators specified,
 * preserving all tokens, including empty tokens created by adjacent
 * separators. This is an alternative to using StringTokenizer.</p>
 *
 * <p>The separator is not included in the returned String array.
 * Adjacent separators are treated as separators for empty tokens.
 * For more control over the split use the StrTokenizer class.</p>
 *
 * <p>A <code>null</code> input String returns <code>null</code>.
 * A <code>null</code> separatorChars splits on whitespace.</p>
 *
 * <pre>
 * StringUtils.splitPreserveAllTokens(null, *)           = null
 * StringUtils.splitPreserveAllTokens("", *)             = []
 * StringUtils.splitPreserveAllTokens("abc def", null)   = ["abc", "def"]
 * StringUtils.splitPreserveAllTokens("abc def", " ")    = ["abc", "def"]
 * StringUtils.splitPreserveAllTokens("abc  def", " ")   = ["abc", "", def"]
 * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":")   = ["ab", "cd", "ef"]
 * StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":")  = ["ab", "cd", "ef", ""]
 * StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""]
 * StringUtils.splitPreserveAllTokens("ab::cd:ef", ":")  = ["ab", "", cd", "ef"]
 * StringUtils.splitPreserveAllTokens(":cd:ef", ":")     = ["", cd", "ef"]
 * StringUtils.splitPreserveAllTokens("::cd:ef", ":")    = ["", "", cd", "ef"]
 * StringUtils.splitPreserveAllTokens(":cd:ef:", ":")    = ["", cd", "ef", ""]
 * </pre>
 *
 * @param str  the String to parse, may be <code>null</code>
 * @param separatorChars  the characters used as the delimiters,
 *  <code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.1
 */
public static String[] splitPreserveAllTokens(String str, String separatorChars) {
    return splitWorker(str, separatorChars, -1, true);
}