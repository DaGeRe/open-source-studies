/**
 * <p>Constructs a new <code>NumberRange</code> using the specified
 * number as both the minimum and maximum in this range.</p>
 *
 * @param num the number to use for this range
 * @throws IllegalArgumentException if the number is <code>null</code>
 * @throws IllegalArgumentException if the number doesn't implement <code>Comparable</code>
 * @throws IllegalArgumentException if the number is <code>Double.NaN</code> or <code>Float.NaN</code>
 */
public NumberRange(Number num) {
    if (num == null) {
        throw new IllegalArgumentException("The number must not be null");
    }
    if (num instanceof Comparable<?> == false) {
        throw new IllegalArgumentException("The number must implement Comparable");
    }
    if (num instanceof Double && ((Double) num).isNaN()) {
        throw new IllegalArgumentException("The number must not be NaN");
    }
    if (num instanceof Float && ((Float) num).isNaN()) {
        throw new IllegalArgumentException("The number must not be NaN");
    }
    this.min = num;
    this.max = num;
}