// Class loading
// ----------------------------------------------------------------------
/**
 * Returns the class represented by <code>className</code> using the
 * <code>classLoader</code>.  This implementation supports the syntaxes
 * "<code>java.util.Map.Entry[]</code>", "<code>java.util.Map$Entry[]</code>",
 * "<code>[Ljava.util.Map.Entry;</code>", and "<code>[Ljava.util.Map$Entry;</code>".
 *
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by <code>className</code> using the <code>classLoader</code>
 * @throws ClassNotFoundException if the class is not found
 */
public static Class<?> getClass(ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {
    try {
        Class<?> clazz;
        if (abbreviationMap.containsKey(className)) {
            String clsName = "[" + abbreviationMap.get(className);
            clazz = Class.forName(clsName, initialize, classLoader).getComponentType();
        } else {
            clazz = Class.forName(toCanonicalName(className), initialize, classLoader);
        }
        return clazz;
    } catch (ClassNotFoundException ex) {
        // allow path separators (.) as inner class name separators
        int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
        if (lastDotIndex != -1) {
            try {
                return getClass(classLoader, className.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1), initialize);
            } catch (ClassNotFoundException ex2) {
            }
        }
        throw ex;
    }
}