// -----------------------------------------------------------------------
/**
 * Compares this object against some other object. The result is <code>true</code> if and only if the argument is
 * not <code>null</code> and is a <code>Float</code> object that represents a <code>float</code> that has the
 * identical bit pattern to the bit pattern of the <code>float</code> represented by this object. For this
 * purpose, two float values are considered to be the same if and only if the method
 * {@link Float#floatToIntBits(float)}returns the same int value when applied to each.
 * <p>
 * Note that in most cases, for two instances of class <code>Float</code>,<code>f1</code> and <code>f2</code>,
 * the value of <code>f1.equals(f2)</code> is <code>true</code> if and only if <blockquote>
 *
 * <pre>
 *   f1.floatValue() == f2.floatValue()
 * </pre>
 *
 * </blockquote>
 * <p>
 * also has the value <code>true</code>. However, there are two exceptions:
 * <ul>
 * <li>If <code>f1</code> and <code>f2</code> both represent <code>Float.NaN</code>, then the
 * <code>equals</code> method returns <code>true</code>, even though <code>Float.NaN==Float.NaN</code> has
 * the value <code>false</code>.
 * <li>If <code>f1</code> represents <code>+0.0f</code> while <code>f2</code> represents <code>-0.0f</code>,
 * or vice versa, the <code>equal</code> test has the value <code>false</code>, even though
 * <code>0.0f==-0.0f</code> has the value <code>true</code>.
 * </ul>
 * This definition allows hashtables to operate properly.
 *
 * @param obj  the object to compare with, null returns false
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 * @see java.lang.Float#floatToIntBits(float)
 */
@Override
public boolean equals(Object obj) {
    return (obj instanceof MutableFloat) && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.floatToIntBits(value));
}