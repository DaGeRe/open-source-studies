/**
 * <p>Creates a Fraction from a <code>String</code>.</p>
 *
 * <p>The formats accepted are:</p>
 *
 * <ol>
 *  <li><code>double</code> String containing a dot</li>
 *  <li>'X Y/Z'</li>
 *  <li>'Y/Z'</li>
 *  <li>'X' (a simple whole number)</li>
 * </ol>
 * and a .</p>
 *
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */
public static Fraction getFraction(String str) {
    if (str == null) {
        throw new IllegalArgumentException("The string must not be null");
    }
    // parse double format
    int pos = str.indexOf('.');
    if (pos >= 0) {
        return getFraction(Double.parseDouble(str));
    }
    // parse X Y/Z format
    pos = str.indexOf(' ');
    if (pos > 0) {
        int whole = Integer.parseInt(str.substring(0, pos));
        str = str.substring(pos + 1);
        pos = str.indexOf('/');
        if (pos < 0) {
            throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(whole, numer, denom);
        }
    }
    // parse Y/Z format
    pos = str.indexOf('/');
    if (pos < 0) {
        // simple whole number
        return getFraction(Integer.parseInt(str), 1);
    } else {
        int numer = Integer.parseInt(str.substring(0, pos));
        int denom = Integer.parseInt(str.substring(pos + 1));
        return getFraction(numer, denom);
    }
}