/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Gets a fraction that is raised to the passed in power.&lt;/p&gt;                            * &lt;p&gt;Gets a fraction that is raised to the passed in power.&lt;/p&gt;                         
*                                                                                                      *                                                                                                   
* &lt;p&gt;The returned fraction is in reduced form.&lt;/p&gt;                                         * &lt;p&gt;The returned fraction is in reduced form.&lt;/p&gt;                                      
*                                                                                                      *                                                                                                   
* @param power  the power to raise the fraction to                                                     * @param power  the power to raise the fraction to                                                  
* @return &lt;code&gt;this&lt;/code&gt; if the power is one, &lt;code&gt;ONE&lt;/code&gt; if the pow   * @return &lt;code&gt;this&lt;/code&gt; if the power is one, &lt;code&gt;ONE&lt;/code&gt; if the pow
* is zero (even if the fraction equals ZERO) or a new fraction instance                                * is zero (even if the fraction equals ZERO) or a new fraction instance                             
* raised to the appropriate power                                                                      * raised to the appropriate power                                                                   
* @throws ArithmeticException if the resulting numerator or denominator exceeds                        * @throws ArithmeticException if the resulting numerator or denominator exceeds                     
*  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;                                                          *  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;                                                       
*/                                                                                                     */                                                                                                  
public Fraction pow(int power) {                                                                       public Fraction pow(int power) {                                                                    
if (power == 1) {                                                                                      if (power == 1) {                                                                                   
return this;                                                                                           return this;                                                                                        
} else if (power == 0) {                                                                               } else if (power == 0) {                                                                            
return ONE;                                                                                            return ONE;                                                                                         
} else if (power &lt; 0) {                                                                             } else if (power &lt; 0) {                                                                          
if (power == Integer.MIN_VALUE) {                                                                      if (power == Integer.MIN_VALUE) {                                                                   
// MIN_VALUE can't be negated.                                                                         // MIN_VALUE can't be negated.                                                                      
return this.invert().pow(2).pow(-(power / 2));                                                         return this.invert().pow(2).pow(-(power / 2));                                                      
}                                                                                                      }                                                                                                   
return this.invert().pow(-power);                                                                      return this.invert().pow(-power);                                                                   
} else {                                                                                               } else {                                                                                            
Fraction f = this.multiplyBy(this);                                                                    Fraction f = this.multiplyBy(this);                                                                 
if ((power % 2) == 0) {                                                                              | if (power % 2 == 0) {                                                                               
// if even...                                                                                          // if even...                                                                                       
return f.pow(power / 2);                                                                               return f.pow(power / 2);                                                                            
} else {                                                                                               } else {                                                                                            
// if odd...                                                                                           // if odd...                                                                                        
return f.pow(power / 2).multiplyBy(this);                                                              return f.pow(power / 2).multiplyBy(this);                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
