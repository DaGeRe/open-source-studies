/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Creates a &lt;code&gt;Fraction&lt;/code&gt; instance from a &lt;code&gt;double&lt;/code&g   * &lt;p&gt;Creates a &lt;code&gt;Fraction&lt;/code&gt; instance from a &lt;code&gt;double&lt;/code&g
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method uses the &lt;a href="http://archives.math.utk.edu/articles/atuyl/confrac/"&gt   * &lt;p&gt;This method uses the &lt;a href="http://archives.math.utk.edu/articles/atuyl/confrac/"&gt
*  continued fraction algorithm&lt;/a&gt;, computing a maximum of                                      *  continued fraction algorithm&lt;/a&gt;, computing a maximum of                                   
*  25 convergents and bounding the denominator by 10,000.&lt;/p&gt;                                    *  25 convergents and bounding the denominator by 10,000.&lt;/p&gt;                                 
*                                                                                                      *                                                                                                   
* @param value  the double value to convert                                                            * @param value  the double value to convert                                                         
* @return a new fraction instance that is close to the value                                           * @return a new fraction instance that is close to the value                                        
* @throws ArithmeticException if &lt;code&gt;|value| &gt; Integer.MAX_VALUE&lt;/code&gt;               * @throws ArithmeticException if &lt;code&gt;|value| &gt; Integer.MAX_VALUE&lt;/code&gt;            
*  or &lt;code&gt;value = NaN&lt;/code&gt;                                                             *  or &lt;code&gt;value = NaN&lt;/code&gt;                                                          
* @throws ArithmeticException if the calculated denominator is &lt;code&gt;zero&lt;/code&gt;           * @throws ArithmeticException if the calculated denominator is &lt;code&gt;zero&lt;/code&gt;        
* @throws ArithmeticException if the the algorithm does not converge                                   * @throws ArithmeticException if the the algorithm does not converge                                
*/                                                                                                     */                                                                                                  
public static Fraction getFraction(double value) {                                                     public static Fraction getFraction(double value) {                                                  
int sign = (value &lt; 0 ? -1 : 1);                                                                  | int sign = value &lt; 0 ? -1 : 1;                                                                   
value = Math.abs(value);                                                                               value = Math.abs(value);                                                                            
if (value &gt; Integer.MAX_VALUE || Double.isNaN(value)) {                                             if (value &gt; Integer.MAX_VALUE || Double.isNaN(value)) {                                          
throw new ArithmeticException("The value must not be greater than Integer.MAX_VALUE or NaN");          throw new ArithmeticException("The value must not be greater than Integer.MAX_VALUE or NaN");       
}                                                                                                      }                                                                                                   
int wholeNumber = (int) value;                                                                         int wholeNumber = (int) value;                                                                      
value -= wholeNumber;                                                                                  value -= wholeNumber;                                                                               
// the pre-previous                                                                                    // the pre-previous                                                                                 
int numer0 = 0;                                                                                        int numer0 = 0;                                                                                     
// the pre-previous                                                                                    // the pre-previous                                                                                 
int denom0 = 1;                                                                                        int denom0 = 1;                                                                                     
// the previous                                                                                        // the previous                                                                                     
int numer1 = 1;                                                                                        int numer1 = 1;                                                                                     
// the previous                                                                                        // the previous                                                                                     
int denom1 = 0;                                                                                        int denom1 = 0;                                                                                     
// the current, setup in calculation                                                                   // the current, setup in calculation                                                                
int numer2 = 0;                                                                                        int numer2 = 0;                                                                                     
// the current, setup in calculation                                                                   // the current, setup in calculation                                                                
int denom2 = 0;                                                                                        int denom2 = 0;                                                                                     
int a1 = (int) value;                                                                                  int a1 = (int) value;                                                                               
int a2 = 0;                                                                                            int a2 = 0;                                                                                         
double x1 = 1;                                                                                         double x1 = 1;                                                                                      
double x2 = 0;                                                                                         double x2 = 0;                                                                                      
double y1 = value - a1;                                                                                double y1 = value - a1;                                                                             
double y2 = 0;                                                                                         double y2 = 0;                                                                                      
double delta1, delta2 = Double.MAX_VALUE;                                                              double delta1, delta2 = Double.MAX_VALUE;                                                           
double fraction;                                                                                       double fraction;                                                                                    
int i = 1;                                                                                             int i = 1;                                                                                          
// System.out.println("---");                                                                          // System.out.println("---");                                                                       
do {                                                                                                   do {                                                                                                
delta1 = delta2;                                                                                       delta1 = delta2;                                                                                    
a2 = (int) (x1 / y1);                                                                                  a2 = (int) (x1 / y1);                                                                               
x2 = y1;                                                                                               x2 = y1;                                                                                            
y2 = x1 - a2 * y1;                                                                                     y2 = x1 - a2 * y1;                                                                                  
numer2 = a1 * numer1 + numer0;                                                                         numer2 = a1 * numer1 + numer0;                                                                      
denom2 = a1 * denom1 + denom0;                                                                         denom2 = a1 * denom1 + denom0;                                                                      
fraction = (double) numer2 / (double) denom2;                                                          fraction = (double) numer2 / (double) denom2;                                                       
delta2 = Math.abs(value - fraction);                                                                   delta2 = Math.abs(value - fraction);                                                                
// System.out.println(numer2 + " " + denom2 + " " + fraction + " " + delta2 + " " + y1);               // System.out.println(numer2 + " " + denom2 + " " + fraction + " " + delta2 + " " + y1);            
a1 = a2;                                                                                               a1 = a2;                                                                                            
x1 = x2;                                                                                               x1 = x2;                                                                                            
y1 = y2;                                                                                               y1 = y2;                                                                                            
numer0 = numer1;                                                                                       numer0 = numer1;                                                                                    
denom0 = denom1;                                                                                       denom0 = denom1;                                                                                    
numer1 = numer2;                                                                                       numer1 = numer2;                                                                                    
denom1 = denom2;                                                                                       denom1 = denom2;                                                                                    
i++;                                                                                                   i++;                                                                                                
// System.out.println("&gt;&gt;" + delta1 +" "+ delta2+" "+(delta1 &gt; delta2)+" "+i+" "+denom2);     // System.out.println("&gt;&gt;" + delta1 +" "+ delta2+" "+(delta1 &gt; delta2)+" "+i+" "+denom2);  
} while ((delta1 &gt; delta2) && (denom2 &lt;= 10000) && (denom2 &gt; 0) && (i &lt; 25));            | } while (delta1 &gt; delta2 && denom2 &lt;= 10000 && denom2 &gt; 0 && i &lt; 25);                   
if (i == 25) {                                                                                         if (i == 25) {                                                                                      
throw new ArithmeticException("Unable to convert double to fraction");                                 throw new ArithmeticException("Unable to convert double to fraction");                              
}                                                                                                      }                                                                                                   
return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);                             return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);                          
}                                                                                                      }                                                                                                   
