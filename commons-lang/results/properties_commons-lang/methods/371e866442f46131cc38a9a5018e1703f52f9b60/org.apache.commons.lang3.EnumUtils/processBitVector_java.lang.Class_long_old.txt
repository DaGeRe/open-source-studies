/**
 * <p>Convert a long value created by {@link EnumUtils#generateBitVector} into the set of
 * enum values that it represents.</p>
 *
 * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param value     the long value representation of a set of enum values
 * @param <E>       the type of the enumeration
 * @return a set of enum values
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 */
public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {
    final E[] constants = checkBitVectorable(enumClass).getEnumConstants();
    final EnumSet<E> results = EnumSet.noneOf(enumClass);
    for (E constant : constants) {
        if ((value & (1 << constant.ordinal())) != 0) {
            results.add(constant);
        }
    }
    return results;
}