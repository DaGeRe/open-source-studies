@Test                                                                                                  @Test                                                                                               
public void testMultiBooleanArray() {                                                                  public void testMultiBooleanArray() {                                                               
boolean[][] array1 = new boolean[2][2];                                                                boolean[][] array1 = new boolean[2][2];                                                             
boolean[][] array2 = new boolean[2][2];                                                                boolean[][] array2 = new boolean[2][2];                                                             
boolean[][] array3 = new boolean[2][3];                                                                boolean[][] array3 = new boolean[2][3];                                                             
for (int i = 0; i &lt; array1.length; ++i) {                                                           for (int i = 0; i &lt; array1.length; ++i) {                                                        
for (int j = 0; j &lt; array1[0].length; j++) {                                                        for (int j = 0; j &lt; array1[0].length; j++) {                                                     
array1[i][j] = ((i == 1) ^ (j == 1));                                                                | array1[i][j] = i == 1 ^ j == 1;                                                                     
array2[i][j] = ((i == 1) ^ (j == 1));                                                                | array2[i][j] = i == 1 ^ j == 1;                                                                     
array3[i][j] = ((i == 1) ^ (j == 1));                                                                | array3[i][j] = i == 1 ^ j == 1;                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
array3[1][2] = false;                                                                                  array3[1][2] = false;                                                                               
array3[1][2] = false;                                                                                  array3[1][2] = false;                                                                               
assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);                         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);                      
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);                         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);                      
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() &lt; 0);                       assertTrue(new CompareToBuilder().append(array1, array3).toComparison() &lt; 0);                    
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() &gt; 0);                       assertTrue(new CompareToBuilder().append(array3, array1).toComparison() &gt; 0);                    
array1[1][1] = true;                                                                                   array1[1][1] = true;                                                                                
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() &gt; 0);                       assertTrue(new CompareToBuilder().append(array1, array2).toComparison() &gt; 0);                    
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() &lt; 0);                       assertTrue(new CompareToBuilder().append(array2, array1).toComparison() &lt; 0);                    
}                                                                                                      }                                                                                                   
