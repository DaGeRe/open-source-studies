/**
 * <p>Finds an accessible constructor with compatible parameters.</p>
 *
 * <p>This checks all the constructor and finds one with compatible parameters
 * This requires that every parameter is assignable from the given parameter types.
 * This is a more flexible search than the normal exact matching algorithm.</p>
 *
 * <p>First it checks if there is a constructor matching the exact signature.
 * If not then all the constructors of the class are checked to see if their
 * signatures are assignment compatible with the parameter types.
 * The first assignment compatible matching constructor is returned.</p>
 *
 * @param <T> the constructor type
 * @param cls  the class to find a constructor for, not null
 * @param parameterTypes find method with compatible parameters
 * @return the constructor, null if no matching accessible constructor found
 */
public static <T> Constructor<T> getMatchingAccessibleConstructor(Class<T> cls, Class<?>... parameterTypes) {
    // see if we can find the constructor directly
    // most of the time this works and it's much faster
    try {
        Constructor<T> ctor = cls.getConstructor(parameterTypes);
        MemberUtils.setAccessibleWorkaround(ctor);
        return ctor;
    } catch (NoSuchMethodException e) {
        // NOPMD - Swallow
    }
    Constructor<T> result = null;
    /*
         * (1) Class.getConstructors() is documented to return Constructor<T> so as
         * long as the array is not subsequently modified, everything's fine.
         */
    Constructor<?>[] ctors = cls.getConstructors();
    // return best match:
    for (Constructor<?> ctor : ctors) {
        // compare parameters
        if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {
            // get accessible version of constructor
            ctor = getAccessibleConstructor(ctor);
            if (ctor != null) {
                MemberUtils.setAccessibleWorkaround(ctor);
                if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParameterTypes(), parameterTypes) < 0) {
                    // temporary variable for annotation, see comment above (1)
                    @SuppressWarnings("unchecked")
                    Constructor<T> constructor = (Constructor<T>) ctor;
                    result = constructor;
                }
            }
        }
    }
    return result;
}