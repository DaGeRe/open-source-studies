/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Creates a random string based on a variety of options, using                                * &lt;p&gt;Creates a random string based on a variety of options, using                             
* supplied source of randomness.&lt;/p&gt;                                                             * supplied source of randomness.&lt;/p&gt;                                                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;If start and end are both {@code 0}, start and end are set                                  * &lt;p&gt;If start and end are both {@code 0}, start and end are set                               
* to {@code ' '} and {@code 'z'}, the ASCII printable                                                  * to {@code ' '} and {@code 'z'}, the ASCII printable                                               
* characters, will be used, unless letters and numbers are both                                        * characters, will be used, unless letters and numbers are both                                     
* {@code false}, in which case, start and end are set to                                               * {@code false}, in which case, start and end are set to                                            
* {@code 0} and {@code Integer.MAX_VALUE}.                                                             * {@code 0} and {@code Integer.MAX_VALUE}.                                                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;If set is not {@code null}, characters between start and                                    * &lt;p&gt;If set is not {@code null}, characters between start and                                 
* end are chosen.&lt;/p&gt;                                                                            * end are chosen.&lt;/p&gt;                                                                         
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method accepts a user-supplied {@link Random}                                          * &lt;p&gt;This method accepts a user-supplied {@link Random}                                       
* instance to use as a source of randomness. By seeding a single                                       * instance to use as a source of randomness. By seeding a single                                    
* {@link Random} instance with a fixed seed and using it for each call,                                * {@link Random} instance with a fixed seed and using it for each call,                             
* the same random sequence of strings can be generated repeatedly                                      * the same random sequence of strings can be generated repeatedly                                   
* and predictably.&lt;/p&gt;                                                                           * and predictably.&lt;/p&gt;                                                                        
*                                                                                                      *                                                                                                   
* @param count  the length of random string to create                                                  * @param count  the length of random string to create                                               
* @param start  the position in set of chars to start at                                               * @param start  the position in set of chars to start at                                            
* @param end  the position in set of chars to end before                                               * @param end  the position in set of chars to end before                                            
* @param letters  only allow letters?                                                                  * @param letters  only allow letters?                                                               
* @param numbers  only allow numbers?                                                                  * @param numbers  only allow numbers?                                                               
* @param chars  the set of chars to choose randoms from.                                               * @param chars  the set of chars to choose randoms from.                                            
*  If {@code null}, then it will use the set of all chars.                                             *  If {@code null}, then it will use the set of all chars.                                          
* @param random  a source of randomness.                                                               * @param random  a source of randomness.                                                            
* @return the random string                                                                            * @return the random string                                                                         
* @throws ArrayIndexOutOfBoundsException if there are not                                              * @throws ArrayIndexOutOfBoundsException if there are not                                           
*  {@code (end - start) + 1} characters in the set array.                                              *  {@code (end - start) + 1} characters in the set array.                                           
* @throws IllegalArgumentException if {@code count} &lt; 0.                                            * @throws IllegalArgumentException if {@code count} &lt; 0.                                         
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static String random(int count, int start, int end, boolean letters, boolean numbers, char[]    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] 
if (count == 0) {                                                                                      if (count == 0) {                                                                                   
return "";                                                                                             return "";                                                                                          
} else if (count &lt; 0) {                                                                             } else if (count &lt; 0) {                                                                          
throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");    throw new IllegalArgumentException("Requested random string length " + count + " is less than 0."); 
}                                                                                                      }                                                                                                   
if ((start == 0) && (end == 0)) {                                                                    | if (start == 0 && end == 0) {                                                                       
end = 'z' + 1;                                                                                         end = 'z' + 1;                                                                                      
start = ' ';                                                                                           start = ' ';                                                                                        
if (!letters && !numbers) {                                                                            if (!letters && !numbers) {                                                                         
start = 0;                                                                                             start = 0;                                                                                          
end = Integer.MAX_VALUE;                                                                               end = Integer.MAX_VALUE;                                                                            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
char[] buffer = new char[count];                                                                       char[] buffer = new char[count];                                                                    
int gap = end - start;                                                                                 int gap = end - start;                                                                              
while (count-- != 0) {                                                                                 while (count-- != 0) {                                                                              
char ch;                                                                                               char ch;                                                                                            
if (chars == null) {                                                                                   if (chars == null) {                                                                                
ch = (char) (random.nextInt(gap) + start);                                                             ch = (char) (random.nextInt(gap) + start);                                                          
} else {                                                                                               } else {                                                                                            
ch = chars[random.nextInt(gap) + start];                                                               ch = chars[random.nextInt(gap) + start];                                                            
}                                                                                                      }                                                                                                   
if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbe | if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
if (ch &gt;= 56320 && ch &lt;= 57343) {                                                                if (ch &gt;= 56320 && ch &lt;= 57343) {                                                             
if (count == 0) {                                                                                      if (count == 0) {                                                                                   
count++;                                                                                               count++;                                                                                            
} else {                                                                                               } else {                                                                                            
// low surrogate, insert high surrogate after putting it in                                            // low surrogate, insert high surrogate after putting it in                                         
buffer[count] = ch;                                                                                    buffer[count] = ch;                                                                                 
count--;                                                                                               count--;                                                                                            
buffer[count] = (char) (55296 + random.nextInt(128));                                                  buffer[count] = (char) (55296 + random.nextInt(128));                                               
}                                                                                                      }                                                                                                   
} else if (ch &gt;= 55296 && ch &lt;= 56191) {                                                         } else if (ch &gt;= 55296 && ch &lt;= 56191) {                                                      
if (count == 0) {                                                                                      if (count == 0) {                                                                                   
count++;                                                                                               count++;                                                                                            
} else {                                                                                               } else {                                                                                            
// high surrogate, insert low surrogate before putting it in                                           // high surrogate, insert low surrogate before putting it in                                        
buffer[count] = (char) (56320 + random.nextInt(128));                                                  buffer[count] = (char) (56320 + random.nextInt(128));                                               
count--;                                                                                               count--;                                                                                            
buffer[count] = ch;                                                                                    buffer[count] = ch;                                                                                 
}                                                                                                      }                                                                                                   
} else if (ch &gt;= 56192 && ch &lt;= 56319) {                                                         } else if (ch &gt;= 56192 && ch &lt;= 56319) {                                                      
// private high surrogate, no effing clue, so skip it                                                  // private high surrogate, no effing clue, so skip it                                               
count++;                                                                                               count++;                                                                                            
} else {                                                                                               } else {                                                                                            
buffer[count] = ch;                                                                                    buffer[count] = ch;                                                                                 
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
count++;                                                                                               count++;                                                                                            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return new String(buffer);                                                                             return new String(buffer);                                                                          
}                                                                                                      }                                                                                                   
