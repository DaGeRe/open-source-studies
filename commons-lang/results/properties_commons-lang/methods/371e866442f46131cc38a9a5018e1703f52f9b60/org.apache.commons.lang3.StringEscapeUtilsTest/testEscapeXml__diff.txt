@Test
public void testEscapeXml() throws Exception {
    assertEquals("&lt;abc&gt;", StringEscapeUtils.escapeXml("<abc>"));
    assertEquals("<abc>", StringEscapeUtils.unescapeXml("&lt;abc&gt;"));
    assertEquals("XML should not escape >0x7f values", "\u00A1", StringEscapeUtils.escapeXml("\u00A1"));
    assertEquals("XML should be able to unescape >0x7f values", "\u00A0", StringEscapeUtils.unescapeXml("&#160;"));
    assertEquals("XML should be able to unescape >0x7f values with one leading 0", "\u00A0", StringEscapeUtils.unescapeXml("&#0160;"));
    assertEquals("XML should be able to unescape >0x7f values with two leading 0s", "\u00A0", StringEscapeUtils.unescapeXml("&#00160;"));
    assertEquals("XML should be able to unescape >0x7f values with three leading 0s", "\u00A0", StringEscapeUtils.unescapeXml("&#000160;"));
    assertEquals("ain't", StringEscapeUtils.unescapeXml("ain&apos;t"));
    assertEquals("ain&apos;t", StringEscapeUtils.escapeXml("ain't"));
    assertEquals("", StringEscapeUtils.escapeXml(""));
    assertEquals(null, StringEscapeUtils.escapeXml(null));
    assertEquals(null, StringEscapeUtils.unescapeXml(null));
    StringWriter sw = new StringWriter();
    try {
        StringEscapeUtils.ESCAPE_XML.translate("<abc>", sw);
    } catch (IOException e) {
    }
    assertEquals("XML was escaped incorrectly", "&lt;abc&gt;", sw.toString());
    sw = new StringWriter();
    try {
        StringEscapeUtils.UNESCAPE_XML.translate("&lt;abc&gt;", sw);
    } catch (IOException e) {
    }
    assertEquals("XML was unescaped incorrectly", "<abc>", sw.toString());
}