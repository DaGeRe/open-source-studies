@Test
public void testUnescapeHtml4() {
    for (int i = 0; i < HTML_ESCAPES.length; ++i) {
        String message = HTML_ESCAPES[i][0];
        String expected = HTML_ESCAPES[i][2];
        String original = HTML_ESCAPES[i][1];
        assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original));
        StringWriter sw = new StringWriter();
        try {
            StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);
        } catch (IOException e) {
        }
        String actual = original == null ? null : sw.toString();
        assertEquals(message, expected, actual);
    }
    // \u00E7 is a cedilla (c with wiggle under)
    // note that the test string must be 7-bit-clean (Unicode escaped) or else it will compile incorrectly
    // on some locales
    assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais"));
    assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World"));
    assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World"));
    assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World"));
    assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World"));
}