/**
 * Recursive handler for multiple levels of interpolation. This is the main
 * interpolation method, which resolves the values of all variable references
 * contained in the passed in text.
 *
 * @param buf  the string builder to substitute into, not null
 * @param offset  the start offset within the builder, must be valid
 * @param length  the length within the builder to be processed, must be valid
 * @param priorVariables  the stack keeping track of the replaced variables, may be null
 * @return the length change that occurs, unless priorVariables is null when the int
 *  represents a boolean flag as to whether any change occurred.
 */
private int substitute(StrBuilder buf, int offset, int length, List<String> priorVariables) {
    StrMatcher prefixMatcher = getVariablePrefixMatcher();
    StrMatcher suffixMatcher = getVariableSuffixMatcher();
    char escape = getEscapeChar();
    boolean top = priorVariables == null;
    boolean altered = false;
    int lengthChange = 0;
    char[] chars = buf.buffer;
    int bufEnd = offset + length;
    int pos = offset;
    while (pos < bufEnd) {
        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);
        if (startMatchLen == 0) {
            pos++;
        } else {
            // found variable start marker
            if (pos > offset && chars[pos - 1] == escape) {
                // escaped
                buf.deleteCharAt(pos - 1);
                // in case buffer was altered
                chars = buf.buffer;
                lengthChange--;
                altered = true;
                bufEnd--;
            } else {
                // find suffix
                int startPos = pos;
                pos += startMatchLen;
                int endMatchLen = 0;
                int nestedVarCount = 0;
                while (pos < bufEnd) {
                    if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {
                        // found a nested variable start
                        nestedVarCount++;
                        pos += endMatchLen;
                        continue;
                    }
                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);
                    if (endMatchLen == 0) {
                        pos++;
                    } else {
                        // found variable end marker
                        if (nestedVarCount == 0) {
                            String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);
                            if (isEnableSubstitutionInVariables()) {
                                StrBuilder bufName = new StrBuilder(varName);
                                substitute(bufName, 0, bufName.length());
                                varName = bufName.toString();
                            }
                            pos += endMatchLen;
                            int endPos = pos;
                            // on the first call initialize priorVariables
                            if (priorVariables == null) {
                                priorVariables = new ArrayList<String>();
                                priorVariables.add(new String(chars, offset, length));
                            }
                            // handle cyclic substitution
                            checkCyclicSubstitution(varName, priorVariables);
                            priorVariables.add(varName);
                            // resolve the variable
                            String varValue = resolveVariable(varName, buf, startPos, endPos);
                            if (varValue != null) {
                                // recursive replace
                                int varLen = varValue.length();
                                buf.replace(startPos, endPos, varValue);
                                altered = true;
                                int change = substitute(buf, startPos, varLen, priorVariables);
                                change = change + varLen - (endPos - startPos);
                                pos += change;
                                bufEnd += change;
                                lengthChange += change;
                                // in case buffer was
                                chars = buf.buffer;
                                // altered
                            }
                            // remove variable from the cyclic stack
                            priorVariables.remove(priorVariables.size() - 1);
                            break;
                        } else {
                            nestedVarCount--;
                            pos += endMatchLen;
                        }
                    }
                }
            }
        }
    }
    if (top) {
        return altered ? 1 : 0;
    }
    return lengthChange;
}