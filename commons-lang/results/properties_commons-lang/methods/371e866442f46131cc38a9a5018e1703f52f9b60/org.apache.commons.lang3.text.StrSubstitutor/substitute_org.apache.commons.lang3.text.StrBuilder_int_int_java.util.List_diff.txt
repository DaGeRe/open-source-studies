/**                                                                                                    /**                                                                                                 
* Recursive handler for multiple levels of interpolation. This is the main                             * Recursive handler for multiple levels of interpolation. This is the main                          
* interpolation method, which resolves the values of all variable references                           * interpolation method, which resolves the values of all variable references                        
* contained in the passed in text.                                                                     * contained in the passed in text.                                                                  
*                                                                                                      *                                                                                                   
* @param buf  the string builder to substitute into, not null                                          * @param buf  the string builder to substitute into, not null                                       
* @param offset  the start offset within the builder, must be valid                                    * @param offset  the start offset within the builder, must be valid                                 
* @param length  the length within the builder to be processed, must be valid                          * @param length  the length within the builder to be processed, must be valid                       
* @param priorVariables  the stack keeping track of the replaced variables, may be null                * @param priorVariables  the stack keeping track of the replaced variables, may be null             
* @return the length change that occurs, unless priorVariables is null when the int                    * @return the length change that occurs, unless priorVariables is null when the int                 
*  represents a boolean flag as to whether any change occurred.                                        *  represents a boolean flag as to whether any change occurred.                                     
*/                                                                                                     */                                                                                                  
private int substitute(StrBuilder buf, int offset, int length, List&lt;String&gt; priorVariables) {    private int substitute(StrBuilder buf, int offset, int length, List&lt;String&gt; priorVariables) { 
StrMatcher prefixMatcher = getVariablePrefixMatcher();                                                 StrMatcher prefixMatcher = getVariablePrefixMatcher();                                              
StrMatcher suffixMatcher = getVariableSuffixMatcher();                                                 StrMatcher suffixMatcher = getVariableSuffixMatcher();                                              
char escape = getEscapeChar();                                                                         char escape = getEscapeChar();                                                                      
boolean top = (priorVariables == null);                                                              | boolean top = priorVariables == null;                                                               
boolean altered = false;                                                                               boolean altered = false;                                                                            
int lengthChange = 0;                                                                                  int lengthChange = 0;                                                                               
char[] chars = buf.buffer;                                                                             char[] chars = buf.buffer;                                                                          
int bufEnd = offset + length;                                                                          int bufEnd = offset + length;                                                                       
int pos = offset;                                                                                      int pos = offset;                                                                                   
while (pos &lt; bufEnd) {                                                                              while (pos &lt; bufEnd) {                                                                           
int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);                                 int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);                              
if (startMatchLen == 0) {                                                                              if (startMatchLen == 0) {                                                                           
pos++;                                                                                                 pos++;                                                                                              
} else {                                                                                               } else {                                                                                            
// found variable start marker                                                                         // found variable start marker                                                                      
if (pos &gt; offset && chars[pos - 1] == escape) {                                                     if (pos &gt; offset && chars[pos - 1] == escape) {                                                  
// escaped                                                                                             // escaped                                                                                          
buf.deleteCharAt(pos - 1);                                                                             buf.deleteCharAt(pos - 1);                                                                          
// in case buffer was altered                                                                          // in case buffer was altered                                                                       
chars = buf.buffer;                                                                                    chars = buf.buffer;                                                                                 
lengthChange--;                                                                                        lengthChange--;                                                                                     
altered = true;                                                                                        altered = true;                                                                                     
bufEnd--;                                                                                              bufEnd--;                                                                                           
} else {                                                                                               } else {                                                                                            
// find suffix                                                                                         // find suffix                                                                                      
int startPos = pos;                                                                                    int startPos = pos;                                                                                 
pos += startMatchLen;                                                                                  pos += startMatchLen;                                                                               
int endMatchLen = 0;                                                                                   int endMatchLen = 0;                                                                                
int nestedVarCount = 0;                                                                                int nestedVarCount = 0;                                                                             
while (pos &lt; bufEnd) {                                                                              while (pos &lt; bufEnd) {                                                                           
if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bu   if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bu
// found a nested variable start                                                                       // found a nested variable start                                                                    
nestedVarCount++;                                                                                      nestedVarCount++;                                                                                   
pos += endMatchLen;                                                                                    pos += endMatchLen;                                                                                 
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);                                       endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);                                    
if (endMatchLen == 0) {                                                                                if (endMatchLen == 0) {                                                                             
pos++;                                                                                                 pos++;                                                                                              
} else {                                                                                               } else {                                                                                            
// found variable end marker                                                                           // found variable end marker                                                                        
if (nestedVarCount == 0) {                                                                             if (nestedVarCount == 0) {                                                                          
String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);          String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);       
if (isEnableSubstitutionInVariables()) {                                                               if (isEnableSubstitutionInVariables()) {                                                            
StrBuilder bufName = new StrBuilder(varName);                                                          StrBuilder bufName = new StrBuilder(varName);                                                       
substitute(bufName, 0, bufName.length());                                                              substitute(bufName, 0, bufName.length());                                                           
varName = bufName.toString();                                                                          varName = bufName.toString();                                                                       
}                                                                                                      }                                                                                                   
pos += endMatchLen;                                                                                    pos += endMatchLen;                                                                                 
int endPos = pos;                                                                                      int endPos = pos;                                                                                   
// on the first call initialize priorVariables                                                         // on the first call initialize priorVariables                                                      
if (priorVariables == null) {                                                                          if (priorVariables == null) {                                                                       
priorVariables = new ArrayList&lt;String&gt;();                                                        priorVariables = new ArrayList&lt;String&gt;();                                                     
priorVariables.add(new String(chars, offset, length));                                                 priorVariables.add(new String(chars, offset, length));                                              
}                                                                                                      }                                                                                                   
// handle cyclic substitution                                                                          // handle cyclic substitution                                                                       
checkCyclicSubstitution(varName, priorVariables);                                                      checkCyclicSubstitution(varName, priorVariables);                                                   
priorVariables.add(varName);                                                                           priorVariables.add(varName);                                                                        
// resolve the variable                                                                                // resolve the variable                                                                             
String varValue = resolveVariable(varName, buf, startPos, endPos);                                     String varValue = resolveVariable(varName, buf, startPos, endPos);                                  
if (varValue != null) {                                                                                if (varValue != null) {                                                                             
// recursive replace                                                                                   // recursive replace                                                                                
int varLen = varValue.length();                                                                        int varLen = varValue.length();                                                                     
buf.replace(startPos, endPos, varValue);                                                               buf.replace(startPos, endPos, varValue);                                                            
altered = true;                                                                                        altered = true;                                                                                     
int change = substitute(buf, startPos, varLen, priorVariables);                                        int change = substitute(buf, startPos, varLen, priorVariables);                                     
change = change + (varLen - (endPos - startPos));                                                    | change = change + varLen - (endPos - startPos);                                                     
pos += change;                                                                                         pos += change;                                                                                      
bufEnd += change;                                                                                      bufEnd += change;                                                                                   
lengthChange += change;                                                                                lengthChange += change;                                                                             
// in case buffer was                                                                                  // in case buffer was                                                                               
chars = buf.buffer;                                                                                    chars = buf.buffer;                                                                                 
// altered                                                                                             // altered                                                                                          
}                                                                                                      }                                                                                                   
// remove variable from the cyclic stack                                                               // remove variable from the cyclic stack                                                            
priorVariables.remove(priorVariables.size() - 1);                                                      priorVariables.remove(priorVariables.size() - 1);                                                   
break;                                                                                                 break;                                                                                              
} else {                                                                                               } else {                                                                                            
nestedVarCount--;                                                                                      nestedVarCount--;                                                                                   
pos += endMatchLen;                                                                                    pos += endMatchLen;                                                                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (top) {                                                                                             if (top) {                                                                                          
return (altered ? 1 : 0);                                                                            | return altered ? 1 : 0;                                                                             
}                                                                                                      }                                                                                                   
return lengthChange;                                                                                   return lengthChange;                                                                                
}                                                                                                      }                                                                                                   
