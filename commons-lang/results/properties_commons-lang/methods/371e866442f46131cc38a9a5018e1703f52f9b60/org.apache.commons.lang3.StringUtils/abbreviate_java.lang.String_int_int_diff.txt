/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Abbreviates a String using ellipses. This will turn                                         * &lt;p&gt;Abbreviates a String using ellipses. This will turn                                      
* "Now is the time for all good men" into "...is the time for..."&lt;/p&gt;                            * "Now is the time for all good men" into "...is the time for..."&lt;/p&gt;                         
*                                                                                                      *                                                                                                   
* &lt;p&gt;Works like {@code abbreviate(String, int)}, but allows you to specify                       * &lt;p&gt;Works like {@code abbreviate(String, int)}, but allows you to specify                    
* a "left edge" offset.  Note that this left edge is not necessarily going to                          * a "left edge" offset.  Note that this left edge is not necessarily going to                       
* be the leftmost character in the result, or the first character following the                        * be the leftmost character in the result, or the first character following the                     
* ellipses, but it will appear somewhere in the result.                                                * ellipses, but it will appear somewhere in the result.                                             
*                                                                                                      *                                                                                                   
* &lt;p&gt;In no case will it return a String of length greater than                                   * &lt;p&gt;In no case will it return a String of length greater than                                
* {@code maxWidth}.&lt;/p&gt;                                                                          * {@code maxWidth}.&lt;/p&gt;                                                                       
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.abbreviate(null, *, *)                = null                                             * StringUtils.abbreviate(null, *, *)                = null                                          
* StringUtils.abbreviate("", 0, 4)                  = ""                                               * StringUtils.abbreviate("", 0, 4)                  = ""                                            
* StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..."                                     * StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..."                                  
* StringUtils.abbreviate("abcdefghijklmno", 0, 10)  = "abcdefg..."                                     * StringUtils.abbreviate("abcdefghijklmno", 0, 10)  = "abcdefg..."                                  
* StringUtils.abbreviate("abcdefghijklmno", 1, 10)  = "abcdefg..."                                     * StringUtils.abbreviate("abcdefghijklmno", 1, 10)  = "abcdefg..."                                  
* StringUtils.abbreviate("abcdefghijklmno", 4, 10)  = "abcdefg..."                                     * StringUtils.abbreviate("abcdefghijklmno", 4, 10)  = "abcdefg..."                                  
* StringUtils.abbreviate("abcdefghijklmno", 5, 10)  = "...fghi..."                                     * StringUtils.abbreviate("abcdefghijklmno", 5, 10)  = "...fghi..."                                  
* StringUtils.abbreviate("abcdefghijklmno", 6, 10)  = "...ghij..."                                     * StringUtils.abbreviate("abcdefghijklmno", 6, 10)  = "...ghij..."                                  
* StringUtils.abbreviate("abcdefghijklmno", 8, 10)  = "...ijklmno"                                     * StringUtils.abbreviate("abcdefghijklmno", 8, 10)  = "...ijklmno"                                  
* StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno"                                     * StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno"                                  
* StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno"                                     * StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno"                                  
* StringUtils.abbreviate("abcdefghij", 0, 3)        = IllegalArgumentException                         * StringUtils.abbreviate("abcdefghij", 0, 3)        = IllegalArgumentException                      
* StringUtils.abbreviate("abcdefghij", 5, 6)        = IllegalArgumentException                         * StringUtils.abbreviate("abcdefghij", 5, 6)        = IllegalArgumentException                      
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param str  the String to check, may be null                                                         * @param str  the String to check, may be null                                                      
* @param offset  left edge of source String                                                            * @param offset  left edge of source String                                                         
* @param maxWidth  maximum length of result String, must be at least 4                                 * @param maxWidth  maximum length of result String, must be at least 4                              
* @return abbreviated String, {@code null} if null String input                                        * @return abbreviated String, {@code null} if null String input                                     
* @throws IllegalArgumentException if the width is too small                                           * @throws IllegalArgumentException if the width is too small                                        
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static String abbreviate(String str, int offset, int maxWidth) {                                public static String abbreviate(String str, int offset, int maxWidth) {                             
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
if (maxWidth &lt; 4) {                                                                                 if (maxWidth &lt; 4) {                                                                              
throw new IllegalArgumentException("Minimum abbreviation width is 4");                                 throw new IllegalArgumentException("Minimum abbreviation width is 4");                              
}                                                                                                      }                                                                                                   
if (str.length() &lt;= maxWidth) {                                                                     if (str.length() &lt;= maxWidth) {                                                                  
return str;                                                                                            return str;                                                                                         
}                                                                                                      }                                                                                                   
if (offset &gt; str.length()) {                                                                        if (offset &gt; str.length()) {                                                                     
offset = str.length();                                                                                 offset = str.length();                                                                              
}                                                                                                      }                                                                                                   
if ((str.length() - offset) &lt; (maxWidth - 3)) {                                                   | if (str.length() - offset &lt; maxWidth - 3) {                                                      
offset = str.length() - (maxWidth - 3);                                                                offset = str.length() - (maxWidth - 3);                                                             
}                                                                                                      }                                                                                                   
final String abrevMarker = "...";                                                                      final String abrevMarker = "...";                                                                   
if (offset &lt;= 4) {                                                                                  if (offset &lt;= 4) {                                                                               
return str.substring(0, maxWidth - 3) + abrevMarker;                                                   return str.substring(0, maxWidth - 3) + abrevMarker;                                                
}                                                                                                      }                                                                                                   
if (maxWidth &lt; 7) {                                                                                 if (maxWidth &lt; 7) {                                                                              
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");                     throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");                  
}                                                                                                      }                                                                                                   
if ((offset + (maxWidth - 3)) &lt; str.length()) {                                                   | if (offset + maxWidth - 3 &lt; str.length()) {                                                      
return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);                                  return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);                               
}                                                                                                      }                                                                                                   
return abrevMarker + str.substring(str.length() - (maxWidth - 3));                                     return abrevMarker + str.substring(str.length() - (maxWidth - 3));                                  
}                                                                                                      }                                                                                                   
