// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* Invokes the specified {@code ConcurrentInitializer} and returns the                                  * Invokes the specified {@code ConcurrentInitializer} and returns the                               
* object produced by the initializer. This method just invokes the {@code                              * object produced by the initializer. This method just invokes the {@code                           
* get()} method of the given {@code ConcurrentInitializer}. It is                                      * get()} method of the given {@code ConcurrentInitializer}. It is                                   
* &lt;b&gt;null&lt;/b&gt;-safe: if the argument is &lt;b&gt;null&lt;/b&gt;, result is also             * &lt;b&gt;null&lt;/b&gt;-safe: if the argument is &lt;b&gt;null&lt;/b&gt;, result is also          
* &lt;b&gt;null&lt;/b&gt;.                                                                             * &lt;b&gt;null&lt;/b&gt;.                                                                          
*                                                                                                      *                                                                                                   
* @param &lt;T&gt; the type of the object produced by the initializer                                  * @param &lt;T&gt; the type of the object produced by the initializer                               
* @param initializer the {@code ConcurrentInitializer} to be invoked                                   * @param initializer the {@code ConcurrentInitializer} to be invoked                                
* @return the object managed by the {@code ConcurrentInitializer}                                      * @return the object managed by the {@code ConcurrentInitializer}                                   
* @throws ConcurrentException if the {@code ConcurrentInitializer} throws                              * @throws ConcurrentException if the {@code ConcurrentInitializer} throws                           
* an exception                                                                                         * an exception                                                                                      
*/                                                                                                     */                                                                                                  
public static &lt;T&gt; T initialize(ConcurrentInitializer&lt;T&gt; initializer) throws ConcurrentEx   public static &lt;T&gt; T initialize(ConcurrentInitializer&lt;T&gt; initializer) throws ConcurrentEx
return (initializer != null) ? initializer.get() : null;                                             | return initializer != null ? initializer.get() : null;                                              
}                                                                                                      }                                                                                                   
