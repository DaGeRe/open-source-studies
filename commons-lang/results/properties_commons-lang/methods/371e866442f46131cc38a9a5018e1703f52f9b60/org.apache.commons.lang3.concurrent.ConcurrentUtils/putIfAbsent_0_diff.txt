// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Puts a value in the specified {@code ConcurrentMap} if the key is not yet                            * Puts a value in the specified {@code ConcurrentMap} if the key is not yet                         
* present. This method works similar to the {@code putIfAbsent()} method of                            * present. This method works similar to the {@code putIfAbsent()} method of                         
* the {@code ConcurrentMap} interface, but the value returned is different.                            * the {@code ConcurrentMap} interface, but the value returned is different.                         
* Basically, this method is equivalent to the following code fragment:                                 * Basically, this method is equivalent to the following code fragment:                              
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* if (!map.containsKey(key)) {                                                                         * if (!map.containsKey(key)) {                                                                      
*     map.put(key, value);                                                                             *     map.put(key, value);                                                                          
*     return value;                                                                                    *     return value;                                                                                 
* } else {                                                                                             * } else {                                                                                          
*     return map.get(key);                                                                             *     return map.get(key);                                                                          
* }                                                                                                    * }                                                                                                 
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* except that the action is performed atomically. So this method always                                * except that the action is performed atomically. So this method always                             
* returns the value which is stored in the map.                                                        * returns the value which is stored in the map.                                                     
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* This method is &lt;b&gt;null&lt;/b&gt;-safe: It accepts a &lt;b&gt;null&lt;/b&gt; map as input       * This method is &lt;b&gt;null&lt;/b&gt;-safe: It accepts a &lt;b&gt;null&lt;/b&gt; map as input    
* without throwing an exception. In this case the return value is                                      * without throwing an exception. In this case the return value is                                   
* &lt;b&gt;null&lt;/b&gt;, too.                                                                        * &lt;b&gt;null&lt;/b&gt;, too.                                                                     
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* @param &lt;K&gt; the type of the keys of the map                                                     * @param &lt;K&gt; the type of the keys of the map                                                  
* @param &lt;V&gt; the type of the values of the map                                                   * @param &lt;V&gt; the type of the values of the map                                                
* @param map the map to be modified                                                                    * @param map the map to be modified                                                                 
* @param key the key of the value to be added                                                          * @param key the key of the value to be added                                                       
* @param value the value to be added                                                                   * @param value the value to be added                                                                
* @return the value stored in the map after this operation                                             * @return the value stored in the map after this operation                                          
*/                                                                                                     */                                                                                                  
public static &lt;K, V&gt; V putIfAbsent(ConcurrentMap&lt;K, V&gt; map, K key, V value) {              public static &lt;K, V&gt; V putIfAbsent(ConcurrentMap&lt;K, V&gt; map, K key, V value) {           
if (map == null) {                                                                                     if (map == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
V result = map.putIfAbsent(key, value);                                                                V result = map.putIfAbsent(key, value);                                                             
return (result != null) ? result : value;                                                            | return result != null ? result : value;                                                             
}                                                                                                      }                                                                                                   
