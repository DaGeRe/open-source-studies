@Test                                                                                                  @Test                                                                                               
public void testAddObjectArrayToObjectArray() {                                                        public void testAddObjectArrayToObjectArray() {                                                     
assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));                                       assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));                                    
Object[] newArray;                                                                                     Object[] newArray;                                                                                  
String[] stringArray1 = new String[] { "a", "b", "c" };                                                String[] stringArray1 = new String[] { "a", "b", "c" };                                             
String[] stringArray2 = new String[] { "1", "2", "3" };                                                String[] stringArray2 = new String[] { "1", "2", "3" };                                             
newArray = ArrayUtils.addAll(stringArray1, (String[]) null);                                           newArray = ArrayUtils.addAll(stringArray1, (String[]) null);                                        
assertNotSame(stringArray1, newArray);                                                                 assertNotSame(stringArray1, newArray);                                                              
assertTrue(Arrays.equals(stringArray1, newArray));                                                     assertTrue(Arrays.equals(stringArray1, newArray));                                                  
assertTrue(Arrays.equals((new String[] { "a", "b", "c" }), newArray));                               | assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray));                                
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
newArray = ArrayUtils.addAll(null, stringArray2);                                                      newArray = ArrayUtils.addAll(null, stringArray2);                                                   
assertNotSame(stringArray2, newArray);                                                                 assertNotSame(stringArray2, newArray);                                                              
assertTrue(Arrays.equals(stringArray2, newArray));                                                     assertTrue(Arrays.equals(stringArray2, newArray));                                                  
assertTrue(Arrays.equals((new String[] { "1", "2", "3" }), newArray));                               | assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray));                                
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
newArray = ArrayUtils.addAll(stringArray1, stringArray2);                                              newArray = ArrayUtils.addAll(stringArray1, stringArray2);                                           
assertTrue(Arrays.equals((new String[] { "a", "b", "c", "1", "2", "3" }), newArray));                | assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray));                 
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);                          newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);                       
assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));                                    assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));                                 
assertTrue(Arrays.equals((new String[] {}), newArray));                                              | assertTrue(Arrays.equals(new String[] {}, newArray));                                               
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);                                     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);                                  
assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));                                    assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));                                 
assertTrue(Arrays.equals((new String[] {}), newArray));                                              | assertTrue(Arrays.equals(new String[] {}, newArray));                                               
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);            newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);         
assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));                                    assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));                                 
assertTrue(Arrays.equals((new String[] {}), newArray));                                              | assertTrue(Arrays.equals(new String[] {}, newArray));                                               
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
String[] stringArrayNull = new String[] { null };                                                      String[] stringArrayNull = new String[] { null };                                                   
newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);                                        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);                                     
assertTrue(Arrays.equals((new String[] { null, null }), newArray));                                  | assertTrue(Arrays.equals(new String[] { null, null }, newArray));                                   
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
// boolean                                                                                             // boolean                                                                                          
assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[]   assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[]
assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { fals   assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { fals
assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, fals   assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, fals
// char                                                                                                // char                                                                                             
assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b'    assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' 
assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' })))   assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' })))
assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null)))   assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null)))
// byte                                                                                                // byte                                                                                             
assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(ne   assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(ne
assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (by   assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (by
assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0,   assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0,
// short                                                                                               // short                                                                                            
assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.   assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.
assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[]   assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[]
assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (sh   assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (sh
// int                                                                                                 // int                                                                                              
assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 },    assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, 
assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 })))   assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 })))
assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null)));      assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null)));   
// long                                                                                                // long                                                                                             
assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -   assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -
assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -   assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -
assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null)));    assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); 
// float                                                                                               // float                                                                                            
assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] {    assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 
assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.   assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.
assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f    assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f 
// double                                                                                              // double                                                                                           
assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[]   assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[]
assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 })   assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 })
assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.P   assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.P
}                                                                                                      }                                                                                                   
