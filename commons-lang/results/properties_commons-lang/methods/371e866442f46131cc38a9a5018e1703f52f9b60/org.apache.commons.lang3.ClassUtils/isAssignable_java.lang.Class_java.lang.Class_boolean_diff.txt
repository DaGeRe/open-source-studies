/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks if one {@code Class} can be assigned to a variable of                                * &lt;p&gt;Checks if one {@code Class} can be assigned to a variable of                             
* another {@code Class}.&lt;/p&gt;                                                                     * another {@code Class}.&lt;/p&gt;                                                                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,                          * &lt;p&gt;Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,                       
* this method takes into account widenings of primitive classes and                                    * this method takes into account widenings of primitive classes and                                 
* {@code null}s.&lt;/p&gt;                                                                             * {@code null}s.&lt;/p&gt;                                                                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;Primitive widenings allow an int to be assigned to a long, float or                         * &lt;p&gt;Primitive widenings allow an int to be assigned to a long, float or                      
* double. This method returns the correct result for these cases.&lt;/p&gt;                            * double. This method returns the correct result for these cases.&lt;/p&gt;                         
*                                                                                                      *                                                                                                   
* &lt;p&gt;{@code Null} may be assigned to any reference type. This method                             * &lt;p&gt;{@code Null} may be assigned to any reference type. This method                          
* will return {@code true} if {@code null} is passed in and the                                        * will return {@code true} if {@code null} is passed in and the                                     
* toClass is non-primitive.&lt;/p&gt;                                                                  * toClass is non-primitive.&lt;/p&gt;                                                               
*                                                                                                      *                                                                                                   
* &lt;p&gt;Specifically, this method tests whether the type represented by the                         * &lt;p&gt;Specifically, this method tests whether the type represented by the                      
* specified {@code Class} parameter can be converted to the type                                       * specified {@code Class} parameter can be converted to the type                                    
* represented by this {@code Class} object via an identity conversion                                  * represented by this {@code Class} object via an identity conversion                               
* widening primitive or widening reference conversion. See                                             * widening primitive or widening reference conversion. See                                          
* &lt;em&gt;&lt;a href="http://java.sun.com/docs/books/jls/"&gt;The Java Language Specification&lt;/   * &lt;em&gt;&lt;a href="http://java.sun.com/docs/books/jls/"&gt;The Java Language Specification&lt;/
* sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;/p&gt;                                               * sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;/p&gt;                                            
*                                                                                                      *                                                                                                   
* @param cls  the Class to check, may be null                                                          * @param cls  the Class to check, may be null                                                       
* @param toClass  the Class to try to assign into, returns false if null                               * @param toClass  the Class to try to assign into, returns false if null                            
* @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers       * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers    
* @return {@code true} if assignment possible                                                          * @return {@code true} if assignment possible                                                       
*/                                                                                                     */                                                                                                  
public static boolean isAssignable(Class&lt;?&gt; cls, Class&lt;?&gt; toClass, boolean autoboxing) {   public static boolean isAssignable(Class&lt;?&gt; cls, Class&lt;?&gt; toClass, boolean autoboxing) {
if (toClass == null) {                                                                                 if (toClass == null) {                                                                              
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
// have to check for null, as isAssignableFrom doesn't                                                 // have to check for null, as isAssignableFrom doesn't                                              
if (cls == null) {                                                                                     if (cls == null) {                                                                                  
return !(toClass.isPrimitive());                                                                     | return !toClass.isPrimitive();                                                                      
}                                                                                                      }                                                                                                   
// autoboxing:                                                                                         // autoboxing:                                                                                      
if (autoboxing) {                                                                                      if (autoboxing) {                                                                                   
if (cls.isPrimitive() && !toClass.isPrimitive()) {                                                     if (cls.isPrimitive() && !toClass.isPrimitive()) {                                                  
cls = primitiveToWrapper(cls);                                                                         cls = primitiveToWrapper(cls);                                                                      
if (cls == null) {                                                                                     if (cls == null) {                                                                                  
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (toClass.isPrimitive() && !cls.isPrimitive()) {                                                     if (toClass.isPrimitive() && !cls.isPrimitive()) {                                                  
cls = wrapperToPrimitive(cls);                                                                         cls = wrapperToPrimitive(cls);                                                                      
if (cls == null) {                                                                                     if (cls == null) {                                                                                  
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (cls.equals(toClass)) {                                                                             if (cls.equals(toClass)) {                                                                          
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
if (cls.isPrimitive()) {                                                                               if (cls.isPrimitive()) {                                                                            
if (toClass.isPrimitive() == false) {                                                                  if (toClass.isPrimitive() == false) {                                                               
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
if (Integer.TYPE.equals(cls)) {                                                                        if (Integer.TYPE.equals(cls)) {                                                                     
return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);         return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);      
}                                                                                                      }                                                                                                   
if (Long.TYPE.equals(cls)) {                                                                           if (Long.TYPE.equals(cls)) {                                                                        
return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);                                      return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);                                   
}                                                                                                      }                                                                                                   
if (Boolean.TYPE.equals(cls)) {                                                                        if (Boolean.TYPE.equals(cls)) {                                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
if (Double.TYPE.equals(cls)) {                                                                         if (Double.TYPE.equals(cls)) {                                                                      
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
if (Float.TYPE.equals(cls)) {                                                                          if (Float.TYPE.equals(cls)) {                                                                       
return Double.TYPE.equals(toClass);                                                                    return Double.TYPE.equals(toClass);                                                                 
}                                                                                                      }                                                                                                   
if (Character.TYPE.equals(cls)) {                                                                      if (Character.TYPE.equals(cls)) {                                                                   
return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Do   return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Do
}                                                                                                      }                                                                                                   
if (Short.TYPE.equals(cls)) {                                                                          if (Short.TYPE.equals(cls)) {                                                                       
return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Do   return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Do
}                                                                                                      }                                                                                                   
if (Byte.TYPE.equals(cls)) {                                                                           if (Byte.TYPE.equals(cls)) {                                                                        
return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Fl   return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Fl
}                                                                                                      }                                                                                                   
// should never get here                                                                               // should never get here                                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
return toClass.isAssignableFrom(cls);                                                                  return toClass.isAssignableFrom(cls);                                                               
}                                                                                                      }                                                                                                   
