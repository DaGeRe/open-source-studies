public void testAddObjectArrayObject() {                                                               public void testAddObjectArrayObject() {                                                            
Object[] newArray;                                                                                     Object[] newArray;                                                                                  
// show that not casting is okay                                                                       // show that not casting is okay                                                                    
newArray = ArrayUtils.add((Object[]) null, "a");                                                       newArray = ArrayUtils.add((Object[]) null, "a");                                                    
assertTrue(Arrays.equals((new String[] { "a" }), newArray));                                           assertTrue(Arrays.equals((new String[] { "a" }), newArray));                                        
assertTrue(Arrays.equals((new Object[] { "a" }), newArray));                                           assertTrue(Arrays.equals((new Object[] { "a" }), newArray));                                        
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
// show that not casting to Object[] is okay and will assume String based on "a"                       // show that not casting to Object[] is okay and will assume String based on "a"                    
String[] newStringArray = ArrayUtils.add(null, "a");                                                   String[] newStringArray = ArrayUtils.add(null, "a");                                                
assertTrue(Arrays.equals((new String[] { "a" }), newStringArray));                                     assertTrue(Arrays.equals((new String[] { "a" }), newStringArray));                                  
assertTrue(Arrays.equals((new Object[] { "a" }), newStringArray));                                     assertTrue(Arrays.equals((new Object[] { "a" }), newStringArray));                                  
assertEquals(String.class, newStringArray.getClass().getComponentType());                              assertEquals(String.class, newStringArray.getClass().getComponentType());                           
String[] stringArray1 = new String[] { "a", "b", "c" };                                                String[] stringArray1 = new String[] { "a", "b", "c" };                                             
newArray = ArrayUtils.add(stringArray1, null);                                                         newArray = ArrayUtils.add(stringArray1, null);                                                      
assertTrue(Arrays.equals((new String[] { "a", "b", "c", null }), newArray));                           assertTrue(Arrays.equals((new String[] { "a", "b", "c", null }), newArray));                        
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
newArray = ArrayUtils.add(stringArray1, "d");                                                          newArray = ArrayUtils.add(stringArray1, "d");                                                       
assertTrue(Arrays.equals((new String[] { "a", "b", "c", "d" }), newArray));                            assertTrue(Arrays.equals((new String[] { "a", "b", "c", "d" }), newArray));                         
assertEquals(String.class, newArray.getClass().getComponentType());                                    assertEquals(String.class, newArray.getClass().getComponentType());                                 
Number[] numberArray1 = new Number[] { Integer.valueOf(1), new Double(2) };                          | Number[] numberArray1 = new Number[] { Integer.valueOf(1), Double.valueOf(2) };                     
newArray = ArrayUtils.add(numberArray1, new Float(3));                                               | newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));                                          
assertTrue(Arrays.equals((new Number[] { Integer.valueOf(1), new Double(2), new Float(3) }), newArra | assertTrue(Arrays.equals((new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }),
assertEquals(Number.class, newArray.getClass().getComponentType());                                    assertEquals(Number.class, newArray.getClass().getComponentType());                                 
numberArray1 = null;                                                                                   numberArray1 = null;                                                                                
newArray = ArrayUtils.add(numberArray1, new Float(3));                                               | newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));                                          
assertTrue(Arrays.equals((new Float[] { new Float(3) }), newArray));                                 | assertTrue(Arrays.equals((new Float[] { Float.valueOf(3) }), newArray));                            
assertEquals(Float.class, newArray.getClass().getComponentType());                                     assertEquals(Float.class, newArray.getClass().getComponentType());                                  
}                                                                                                      }                                                                                                   
