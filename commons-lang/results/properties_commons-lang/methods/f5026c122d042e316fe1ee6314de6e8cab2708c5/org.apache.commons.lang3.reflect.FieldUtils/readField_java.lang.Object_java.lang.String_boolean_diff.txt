/**
 * Reads the named field. Superclasses will be considered.
 * @param target  the object to reflect, must not be null
 * @param fieldName  the field name to obtain
 * @param forceAccess  whether to break scope restrictions using the
 *  <code>setAccessible</code> method. <code>False</code> will only
 *  match public fields.
 * @return the field value
 * @throws IllegalArgumentException if the class or field name is null
 * @throws IllegalAccessException if the named field is not made accessible
 */
public static Object readField(Object target, String fieldName, boolean forceAccess) throws IllegalAccessException {
    if (target == null) {
        throw new IllegalArgumentException("target object must not be null");
    }
    Class<?> cls = target.getClass();
    Field field = getField(cls, fieldName, forceAccess);
    if (field == null) {
        throw new IllegalArgumentException("Cannot locate field " + fieldName + " on " + cls);
    }
    // already forced access above, don't repeat it here:
    return readField(field, target);
}