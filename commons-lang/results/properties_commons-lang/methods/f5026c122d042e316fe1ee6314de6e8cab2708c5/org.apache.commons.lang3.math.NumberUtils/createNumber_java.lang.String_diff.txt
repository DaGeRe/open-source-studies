// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
// must handle Long, Float, Integer, Float, Short,                                                     // must handle Long, Float, Integer, Float, Short,                                                  
// BigDecimal, BigInteger and Byte                                                                     // BigDecimal, BigInteger and Byte                                                                  
// useful methods:                                                                                     // useful methods:                                                                                  
// Byte.decode(String)                                                                                 // Byte.decode(String)                                                                              
// Byte.valueOf(String,int radix)                                                                      // Byte.valueOf(String,int radix)                                                                   
// Byte.valueOf(String)                                                                                // Byte.valueOf(String)                                                                             
// Double.valueOf(String)                                                                              // Double.valueOf(String)                                                                           
// Float.valueOf(String)                                                                               // Float.valueOf(String)                                                                            
// new Float(String)                                                                                 | // Float.valueOf(String)                                                                            
// Integer.valueOf(String,int radix)                                                                   // Integer.valueOf(String,int radix)                                                                
// Integer.valueOf(String)                                                                             // Integer.valueOf(String)                                                                          
// Integer.decode(String)                                                                              // Integer.decode(String)                                                                           
// Integer.getInteger(String)                                                                          // Integer.getInteger(String)                                                                       
// Integer.getInteger(String,int val)                                                                  // Integer.getInteger(String,int val)                                                               
// Integer.getInteger(String,Integer val)                                                              // Integer.getInteger(String,Integer val)                                                           
// Integer.valueOf(String)                                                                             // Integer.valueOf(String)                                                                          
// new Double(String)                                                                                | // Double.valueOf(String)                                                                           
// new Byte(String)                                                                                    // new Byte(String)                                                                                 
// Long.valueOf(String)                                                                                // Long.valueOf(String)                                                                             
// Long.getLong(String)                                                                                // Long.getLong(String)                                                                             
// Long.getLong(String,int)                                                                            // Long.getLong(String,int)                                                                         
// Long.getLong(String,Integer)                                                                        // Long.getLong(String,Integer)                                                                     
// Long.valueOf(String,int)                                                                            // Long.valueOf(String,int)                                                                         
// Long.valueOf(String)                                                                                // Long.valueOf(String)                                                                             
// Short.valueOf(String)                                                                               // Short.valueOf(String)                                                                            
// Short.decode(String)                                                                                // Short.decode(String)                                                                             
// Short.valueOf(String,int)                                                                           // Short.valueOf(String,int)                                                                        
// Short.valueOf(String)                                                                               // Short.valueOf(String)                                                                            
// new BigDecimal(String)                                                                              // new BigDecimal(String)                                                                           
// new BigInteger(String)                                                                              // new BigInteger(String)                                                                           
// new BigInteger(String,int radix)                                                                    // new BigInteger(String,int radix)                                                                 
// Possible inputs:                                                                                    // Possible inputs:                                                                                 
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd                                               // 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd                                            
// plus minus everything. Prolly more. A lot are not separable.                                        // plus minus everything. Prolly more. A lot are not separable.                                     
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Turns a string value into a java.lang.Number.&lt;/p&gt;                                     * &lt;p&gt;Turns a string value into a java.lang.Number.&lt;/p&gt;                                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;First, the value is examined for a type qualifier on the end                                * &lt;p&gt;First, the value is examined for a type qualifier on the end                             
* (&lt;code&gt;'f','F','d','D','l','L'&lt;/code&gt;).  If it is found, it starts                       * (&lt;code&gt;'f','F','d','D','l','L'&lt;/code&gt;).  If it is found, it starts                    
* trying to create successively larger types from the type specified                                   * trying to create successively larger types from the type specified                                
* until one is found that can represent the value.&lt;/p&gt;                                           * until one is found that can represent the value.&lt;/p&gt;                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;If a type specifier is not found, it will check for a decimal point                         * &lt;p&gt;If a type specifier is not found, it will check for a decimal point                      
* and then try successively larger types from &lt;code&gt;Integer&lt;/code&gt; to                      * and then try successively larger types from &lt;code&gt;Integer&lt;/code&gt; to                   
* &lt;code&gt;BigInteger&lt;/code&gt; and from &lt;code&gt;Float&lt;/code&gt; to                       * &lt;code&gt;BigInteger&lt;/code&gt; and from &lt;code&gt;Float&lt;/code&gt; to                    
* &lt;code&gt;BigDecimal&lt;/code&gt;.&lt;/p&gt;                                                       * &lt;code&gt;BigDecimal&lt;/code&gt;.&lt;/p&gt;                                                    
*                                                                                                      *                                                                                                   
* &lt;p&gt;If the string starts with &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;-0x&lt;/code&gt;, it   * &lt;p&gt;If the string starts with &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;-0x&lt;/code&gt;, it
* will be interpreted as a hexadecimal integer.  Values with leading                                   * will be interpreted as a hexadecimal integer.  Values with leading                                
* &lt;code&gt;0&lt;/code&gt;'s will not be interpreted as octal.&lt;/p&gt;                             * &lt;code&gt;0&lt;/code&gt;'s will not be interpreted as octal.&lt;/p&gt;                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;Returns &lt;code&gt;null&lt;/code&gt; if the string is &lt;code&gt;null&lt;/code&gt;.&lt;   * &lt;p&gt;Returns &lt;code&gt;null&lt;/code&gt; if the string is &lt;code&gt;null&lt;/code&gt;.&lt;
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method does not trim the input string, i.e., strings with leading                      * &lt;p&gt;This method does not trim the input string, i.e., strings with leading                   
* or trailing spaces will generate NumberFormatExceptions.&lt;/p&gt;                                   * or trailing spaces will generate NumberFormatExceptions.&lt;/p&gt;                                
*                                                                                                      *                                                                                                   
* @param str  String containing a number, may be null                                                  * @param str  String containing a number, may be null                                               
* @return Number created from the string                                                               * @return Number created from the string                                                            
* @throws NumberFormatException if the value cannot be converted                                       * @throws NumberFormatException if the value cannot be converted                                    
*/                                                                                                     */                                                                                                  
public static Number createNumber(String str) throws NumberFormatException {                           public static Number createNumber(String str) throws NumberFormatException {                        
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
if (StringUtils.isBlank(str)) {                                                                        if (StringUtils.isBlank(str)) {                                                                     
throw new NumberFormatException("A blank string is not a valid number");                               throw new NumberFormatException("A blank string is not a valid number");                            
}                                                                                                      }                                                                                                   
if (str.startsWith("--")) {                                                                            if (str.startsWith("--")) {                                                                         
// this is protection for poorness in java.lang.BigDecimal.                                            // this is protection for poorness in java.lang.BigDecimal.                                         
// it accepts this as a legal value, but it does not appear                                            // it accepts this as a legal value, but it does not appear                                         
// to be in specification of class. OS X Java parses it to                                             // to be in specification of class. OS X Java parses it to                                          
// a wrong value.                                                                                      // a wrong value.                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
if (str.startsWith("0x") || str.startsWith("-0x")) {                                                   if (str.startsWith("0x") || str.startsWith("-0x")) {                                                
return createInteger(str);                                                                             return createInteger(str);                                                                          
}                                                                                                      }                                                                                                   
char lastChar = str.charAt(str.length() - 1);                                                          char lastChar = str.charAt(str.length() - 1);                                                       
String mant;                                                                                           String mant;                                                                                        
String dec;                                                                                            String dec;                                                                                         
String exp;                                                                                            String exp;                                                                                         
int decPos = str.indexOf('.');                                                                         int decPos = str.indexOf('.');                                                                      
int expPos = str.indexOf('e') + str.indexOf('E') + 1;                                                  int expPos = str.indexOf('e') + str.indexOf('E') + 1;                                               
if (decPos &gt; -1) {                                                                                  if (decPos &gt; -1) {                                                                               
if (expPos &gt; -1) {                                                                                  if (expPos &gt; -1) {                                                                               
if (expPos &lt; decPos || expPos &gt; str.length()) {                                                  if (expPos &lt; decPos || expPos &gt; str.length()) {                                               
throw new NumberFormatException(str + " is not a valid number.");                                      throw new NumberFormatException(str + " is not a valid number.");                                   
}                                                                                                      }                                                                                                   
dec = str.substring(decPos + 1, expPos);                                                               dec = str.substring(decPos + 1, expPos);                                                            
} else {                                                                                               } else {                                                                                            
dec = str.substring(decPos + 1);                                                                       dec = str.substring(decPos + 1);                                                                    
}                                                                                                      }                                                                                                   
mant = str.substring(0, decPos);                                                                       mant = str.substring(0, decPos);                                                                    
} else {                                                                                               } else {                                                                                            
if (expPos &gt; -1) {                                                                                  if (expPos &gt; -1) {                                                                               
if (expPos &gt; str.length()) {                                                                        if (expPos &gt; str.length()) {                                                                     
throw new NumberFormatException(str + " is not a valid number.");                                      throw new NumberFormatException(str + " is not a valid number.");                                   
}                                                                                                      }                                                                                                   
mant = str.substring(0, expPos);                                                                       mant = str.substring(0, expPos);                                                                    
} else {                                                                                               } else {                                                                                            
mant = str;                                                                                            mant = str;                                                                                         
}                                                                                                      }                                                                                                   
dec = null;                                                                                            dec = null;                                                                                         
}                                                                                                      }                                                                                                   
if (!Character.isDigit(lastChar) && lastChar != '.') {                                                 if (!Character.isDigit(lastChar) && lastChar != '.') {                                              
if (expPos &gt; -1 && expPos &lt; str.length() - 1) {                                                  if (expPos &gt; -1 && expPos &lt; str.length() - 1) {                                               
exp = str.substring(expPos + 1, str.length() - 1);                                                     exp = str.substring(expPos + 1, str.length() - 1);                                                  
} else {                                                                                               } else {                                                                                            
exp = null;                                                                                            exp = null;                                                                                         
}                                                                                                      }                                                                                                   
// Requesting a specific type..                                                                        // Requesting a specific type..                                                                     
String numeric = str.substring(0, str.length() - 1);                                                   String numeric = str.substring(0, str.length() - 1);                                                
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);                                                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);                                             
switch(lastChar) {                                                                                     switch(lastChar) {                                                                                  
case 'l':                                                                                              case 'l':                                                                                           
case 'L':                                                                                              case 'L':                                                                                           
if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isD   if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isD
try {                                                                                                  try {                                                                                               
return createLong(numeric);                                                                            return createLong(numeric);                                                                         
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// Too big for a long                                                                                  // Too big for a long                                                                               
}                                                                                                      }                                                                                                   
return createBigInteger(numeric);                                                                      return createBigInteger(numeric);                                                                   
}                                                                                                      }                                                                                                   
throw new NumberFormatException(str + " is not a valid number.");                                      throw new NumberFormatException(str + " is not a valid number.");                                   
case 'f':                                                                                              case 'f':                                                                                           
case 'F':                                                                                              case 'F':                                                                                           
try {                                                                                                  try {                                                                                               
Float f = NumberUtils.createFloat(numeric);                                                            Float f = NumberUtils.createFloat(numeric);                                                         
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                                      if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                                   
// If it's too big for a float or the float value = 0 and the string                                   // If it's too big for a float or the float value = 0 and the string                                
// has non-zeros in it, then float does not have the precision we want                                 // has non-zeros in it, then float does not have the precision we want                              
return f;                                                                                              return f;                                                                                           
}                                                                                                      }                                                                                                   
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
// $FALL-THROUGH$                                                                                      // $FALL-THROUGH$                                                                                   
case 'd':                                                                                              case 'd':                                                                                           
case 'D':                                                                                              case 'D':                                                                                           
try {                                                                                                  try {                                                                                               
Double d = NumberUtils.createDouble(numeric);                                                          Double d = NumberUtils.createDouble(numeric);                                                       
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {                                      if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {                                   
return d;                                                                                              return d;                                                                                           
}                                                                                                      }                                                                                                   
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
return createBigDecimal(numeric);                                                                      return createBigDecimal(numeric);                                                                   
} catch (NumberFormatException e) {                                                                    } catch (NumberFormatException e) {                                                                 
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
// $FALL-THROUGH$                                                                                      // $FALL-THROUGH$                                                                                   
default:                                                                                               default:                                                                                            
throw new NumberFormatException(str + " is not a valid number.");                                      throw new NumberFormatException(str + " is not a valid number.");                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// User doesn't have a preference on the return type, so let's start                                   // User doesn't have a preference on the return type, so let's start                                
// small and go from there...                                                                          // small and go from there...                                                                       
if (expPos &gt; -1 && expPos &lt; str.length() - 1) {                                                  if (expPos &gt; -1 && expPos &lt; str.length() - 1) {                                               
exp = str.substring(expPos + 1, str.length());                                                         exp = str.substring(expPos + 1, str.length());                                                      
} else {                                                                                               } else {                                                                                            
exp = null;                                                                                            exp = null;                                                                                         
}                                                                                                      }                                                                                                   
if (dec == null && exp == null) {                                                                      if (dec == null && exp == null) {                                                                   
// Must be an int,long,bigint                                                                          // Must be an int,long,bigint                                                                       
try {                                                                                                  try {                                                                                               
return createInteger(str);                                                                             return createInteger(str);                                                                          
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
return createLong(str);                                                                                return createLong(str);                                                                             
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
return createBigInteger(str);                                                                          return createBigInteger(str);                                                                       
} else {                                                                                               } else {                                                                                            
// Must be a float,double,BigDec                                                                       // Must be a float,double,BigDec                                                                    
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);                                                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);                                             
try {                                                                                                  try {                                                                                               
Float f = createFloat(str);                                                                            Float f = createFloat(str);                                                                         
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                                      if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                                   
return f;                                                                                              return f;                                                                                           
}                                                                                                      }                                                                                                   
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
Double d = createDouble(str);                                                                          Double d = createDouble(str);                                                                       
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                                  
return d;                                                                                              return d;                                                                                           
}                                                                                                      }                                                                                                   
} catch (NumberFormatException nfe) {                                                                  } catch (NumberFormatException nfe) {                                                               
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore the bad number                                                                               // ignore the bad number                                                                            
}                                                                                                      }                                                                                                   
return createBigDecimal(str);                                                                          return createBigDecimal(str);                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
