/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Validates that the index is within the bounds of the argument                               * &lt;p&gt;Validates that the index is within the bounds of the argument                            
* collection; otherwise throwing an exception.&lt;/p&gt;                                               * collection; otherwise throwing an exception.&lt;/p&gt;                                            
*                                                                                                      *                                                                                                   
* &lt;pre&gt;Validate.validIndex(myCollection, 2);&lt;/pre&gt;                                         * &lt;pre&gt;Validate.validIndex(myCollection, 2);&lt;/pre&gt;                                      
*                                                                                                      *                                                                                                   
* &lt;p&gt;If the index is invalid, then the message of the exception                                  * &lt;p&gt;If the index is invalid, then the message of the exception                               
* is &quot;The validated collection index is invalid: &quot;                                           * is &quot;The validated collection index is invalid: &quot;                                        
* followed by the index.&lt;/p&gt;                                                                     * followed by the index.&lt;/p&gt;                                                                  
*                                                                                                      *                                                                                                   
* @param &lt;T&gt; the collection type                                                                 * @param &lt;T&gt; the collection type                                                              
* @param collection the collection to check                                                            * @param collection the collection to check                                                         
* @param index the index                                                                               * @param index the index                                                                            
* @return the validated collection (never &lt;code&gt;null&lt;/code&gt; for method chaining)           * @return the validated collection (never &lt;code&gt;null&lt;/code&gt; for method chaining)        
* @throws NullPointerException if the collection is &lt;code&gt;null&lt;/code&gt;                      * @throws NullPointerException if the collection is &lt;code&gt;null&lt;/code&gt;                   
* @throws IndexOutOfBoundsException if the index is invalid                                            * @throws IndexOutOfBoundsException if the index is invalid                                         
* @see #validIndex(Collection, int, String, Object...)                                                 * @see #validIndex(Collection, int, String, Object...)                                              
*/                                                                                                     */                                                                                                  
public static &lt;T extends Collection&lt;?&gt;&gt; T validIndex(T collection, int index) {            public static &lt;T extends Collection&lt;?&gt;&gt; T validIndex(T collection, int index) {         
return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, Integer.value | return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE, Integer.valueOf(inde
}                                                                                                      }                                                                                                   
