public void test_getInstance_String_TimeZone() {                                                       public void test_getInstance_String_TimeZone() {                                                    
Locale realDefaultLocale = Locale.getDefault();                                                        Locale realDefaultLocale = Locale.getDefault();                                                     
TimeZone realDefaultZone = TimeZone.getDefault();                                                      TimeZone realDefaultZone = TimeZone.getDefault();                                                   
try {                                                                                                  try {                                                                                               
Locale.setDefault(Locale.US);                                                                          Locale.setDefault(Locale.US);                                                                       
TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));                                         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));                                      
FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Rey   FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Rey
FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy");                                     FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy");                                  
FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());              FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());           
FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());              FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());           
FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault());              FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault());           
FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy");                                     FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy");                                  
// -- junit 3.8 version -- assertFalse(format1 == format2);                                            // -- junit 3.8 version -- assertFalse(format1 == format2);                                         
assertTrue(format1 != format2);                                                                        assertTrue(format1 != format2);                                                                     
assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());                       assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());                    
assertEquals(true, format1.getTimeZoneOverridesCalendar());                                          |                                                                                                     
assertEquals(TimeZone.getDefault(), format2.getTimeZone());                                            assertEquals(TimeZone.getDefault(), format2.getTimeZone());                                         
assertEquals(false, format2.getTimeZoneOverridesCalendar());                                         |                                                                                                     
assertSame(format3, format4);                                                                          assertSame(format3, format4);                                                                       
// -- junit 3.8 version -- assertFalse(format3 == format5);                                            // -- junit 3.8 version -- assertFalse(format3 == format5);                                         
assertTrue(format3 != format5);                                                                        assertTrue(format3 != format5);                                                                     
// -- junit 3.8 version -- assertFalse(format3 == format5);                                            // -- junit 3.8 version -- assertFalse(format3 == format5);                                         
assertTrue(format4 != format6);                                                                        assertTrue(format4 != format6);                                                                     
} finally {                                                                                            } finally {                                                                                         
Locale.setDefault(realDefaultLocale);                                                                  Locale.setDefault(realDefaultLocale);                                                               
TimeZone.setDefault(realDefaultZone);                                                                  TimeZone.setDefault(realDefaultZone);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
