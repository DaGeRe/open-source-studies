/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Sets the cause of a &lt;code&gt;Throwable&lt;/code&gt; using introspection, allowing        * &lt;p&gt;Sets the cause of a &lt;code&gt;Throwable&lt;/code&gt; using introspection, allowing     
* source code compatibility between pre-1.4 and post-1.4 Java releases.&lt;/p&gt;                      * source code compatibility between pre-1.4 and post-1.4 Java releases.&lt;/p&gt;                   
*                                                                                                      *                                                                                                   
* &lt;p&gt;The typical use of this method is inside a constructor as in                                * &lt;p&gt;The typical use of this method is inside a constructor as in                             
* the following example:&lt;/p&gt;                                                                     * the following example:&lt;/p&gt;                                                                  
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* import org.apache.commons.lang.exception.ExceptionUtils;                                             * import org.apache.commons.lang.exception.ExceptionUtils;                                          
*                                                                                                      *                                                                                                   
* public class MyException extends Exception {                                                         * public class MyException extends Exception {                                                      
*                                                                                                      *                                                                                                   
*    public MyException(String msg) {                                                                  *    public MyException(String msg) {                                                               
*       super(msg);                                                                                    *       super(msg);                                                                                 
*    }                                                                                                 *    }                                                                                              
*                                                                                                      *                                                                                                   
*    public MyException(String msg, Throwable cause) {                                                 *    public MyException(String msg, Throwable cause) {                                              
*       super(msg);                                                                                    *       super(msg);                                                                                 
*       ExceptionUtils.setCause(this, cause);                                                          *       ExceptionUtils.setCause(this, cause);                                                       
*    }                                                                                                 *    }                                                                                              
* }                                                                                                    * }                                                                                                 
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param target  the target &lt;code&gt;Throwable&lt;/code&gt;                                         * @param target  the target &lt;code&gt;Throwable&lt;/code&gt;                                      
* @param cause  the &lt;code&gt;Throwable&lt;/code&gt; to set in the target                            * @param cause  the &lt;code&gt;Throwable&lt;/code&gt; to set in the target                         
* @return a &lt;code&gt;true&lt;/code&gt; if the target has been modified                              * @return a &lt;code&gt;true&lt;/code&gt; if the target has been modified                           
* @since 2.2                                                                                           * @since 2.2                                                                                        
*/                                                                                                     */                                                                                                  
public static boolean setCause(Throwable target, Throwable cause) {                                    public static boolean setCause(Throwable target, Throwable cause) {                                 
if (target == null) {                                                                                  if (target == null) {                                                                               
throw new NullArgumentException("target");                                                           | throw new NullPointerException("target must not be null.");                                         
}                                                                                                      }                                                                                                   
Object[] causeArgs = new Object[] { cause };                                                           Object[] causeArgs = new Object[] { cause };                                                        
boolean modifiedTarget = false;                                                                        boolean modifiedTarget = false;                                                                     
if (THROWABLE_INITCAUSE_METHOD != null) {                                                              if (THROWABLE_INITCAUSE_METHOD != null) {                                                           
try {                                                                                                  try {                                                                                               
THROWABLE_INITCAUSE_METHOD.invoke(target, causeArgs);                                                  THROWABLE_INITCAUSE_METHOD.invoke(target, causeArgs);                                               
modifiedTarget = true;                                                                                 modifiedTarget = true;                                                                              
} catch (IllegalAccessException ignored) {                                                             } catch (IllegalAccessException ignored) {                                                          
// Exception ignored.                                                                                  // Exception ignored.                                                                               
} catch (InvocationTargetException ignored) {                                                          } catch (InvocationTargetException ignored) {                                                       
// Exception ignored.                                                                                  // Exception ignored.                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
Method setCauseMethod = target.getClass().getMethod("setCause", new Class[] { Throwable.class });      Method setCauseMethod = target.getClass().getMethod("setCause", new Class[] { Throwable.class });   
setCauseMethod.invoke(target, causeArgs);                                                              setCauseMethod.invoke(target, causeArgs);                                                           
modifiedTarget = true;                                                                                 modifiedTarget = true;                                                                              
} catch (NoSuchMethodException ignored) {                                                              } catch (NoSuchMethodException ignored) {                                                           
// Exception ignored.                                                                                  // Exception ignored.                                                                               
} catch (IllegalAccessException ignored) {                                                             } catch (IllegalAccessException ignored) {                                                          
// Exception ignored.                                                                                  // Exception ignored.                                                                               
} catch (InvocationTargetException ignored) {                                                          } catch (InvocationTargetException ignored) {                                                       
// Exception ignored.                                                                                  // Exception ignored.                                                                               
}                                                                                                      }                                                                                                   
return modifiedTarget;                                                                                 return modifiedTarget;                                                                              
}                                                                                                      }                                                                                                   
