// Wrapping
// --------------------------------------------------------------------------
// /**
// * <p>Wraps a block of text to a specified line length using '\n' as
// * a newline.</p>
// *
// * <p>This method takes a block of text, which might have long lines in it
// * and wraps the long lines based on the supplied lineLength parameter.</p>
// *
// * <p>If a single word is longer than the line length (eg. a URL), it will
// * not be broken, and will display beyond the expected width.</p>
// *
// * <p>If there are tabs in inString, you are going to get results that are
// * a bit strange. Tabs are a single character but are displayed as 4 or 8
// * spaces. Remove the tabs.</p>
// *
// * @param str  text which is in need of word-wrapping, may be null
// * @param lineLength  the column to wrap the words at
// * @return the text with all the long lines word-wrapped
// *  <code>null</code> if null string input
// */
// public static String wrapText(String str, int lineLength) {
// return wrap(str, null, lineLength);
// }
// /**
// * <p>Wraps a block of text to a specified line length.</p>
// *
// * <p>This method takes a block of text, which might have long lines in it
// * and wraps the long lines based on the supplied lineLength parameter.</p>
// *
// * <p>If a single word is longer than the wrapColumn (eg. a URL), it will
// * not be broken, and will display beyond the expected width.</p>
// *
// * <p>If there are tabs in inString, you are going to get results that are
// * a bit strange. Tabs are a single character but are displayed as 4 or 8
// * spaces. Remove the tabs.</p>
// *
// * @param str  text which is in need of word-wrapping, may be null
// * @param newLineChars  the characters that define a newline, null treated as \n
// * @param lineLength  the column to wrap the words at
// * @return the text with all the long lines word-wrapped
// *  <code>null</code> if null string input
// */
// public static String wrapText(String str, String newLineChars, int lineLength) {
// if (str == null) {
// return null;
// }
// if (newLineChars == null) {
// newLineChars = "\n";
// }
// StringTokenizer lineTokenizer = new StringTokenizer(str, newLineChars, true);
// StringBuffer stringBuffer = new StringBuffer();
// 
// while (lineTokenizer.hasMoreTokens()) {
// try {
// String nextLine = lineTokenizer.nextToken();
// 
// if (nextLine.length() > lineLength) {
// // This line is long enough to be wrapped.
// nextLine = wrapLine(nextLine, null, lineLength, false);
// }
// 
// stringBuffer.append(nextLine);
// 
// } catch (NoSuchElementException nsee) {
// // thrown by nextToken(), but I don't know why it would
// break;
// }
// }
// 
// return stringBuffer.toString();
// }
// Wrapping
// -----------------------------------------------------------------------
/**
 * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>
 *
 * <p>New lines will be separated by the system property line separator.
 * Very long words, such as URLs will <i>not</i> be wrapped.</p>
 *
 * <p>Leading spaces on a new line are stripped.
 * Trailing spaces are not stripped.</p>
 *
 * <pre>
 * WordUtils.wrap(null, *) = null
 * WordUtils.wrap("", *) = ""
 * </pre>
 *
 * @param str  the String to be word wrapped, may be null
 * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1
 * @return a line with newlines inserted, <code>null</code> if null input
 */
public static String wrap(String str, int wrapLength) {
    return wrap(str, wrapLength, null, false);
}