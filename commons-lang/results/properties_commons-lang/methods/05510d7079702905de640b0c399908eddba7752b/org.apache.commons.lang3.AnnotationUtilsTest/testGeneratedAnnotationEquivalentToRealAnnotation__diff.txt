@Test(timeout = 666000)
public void testGeneratedAnnotationEquivalentToRealAnnotation() throws Exception {
    final Test real = getClass().getDeclaredMethod("testGeneratedAnnotationEquivalentToRealAnnotation").getAnnotation(Test.class);
    InvocationHandler generatedTestInvocationHandler = new InvocationHandler() {

        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            if ("equals".equals(method.getName()) && method.getParameterTypes().length == 1) {
                return proxy == args[0];
            }
            if ("hashCode".equals(method.getName()) && method.getParameterTypes().length == 0) {
                return System.identityHashCode(proxy);
            }
            if ("toString".equals(method.getName()) && method.getParameterTypes().length == 0) {
                return "Test proxy";
            }
            return method.invoke(real, args);
        }
    };
    Test generated = (Test) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { Test.class }, generatedTestInvocationHandler);
    assertTrue(real.equals(generated));
    assertFalse(generated.equals(real));
    assertTrue(AnnotationUtils.equals(generated, real));
    assertTrue(AnnotationUtils.equals(real, generated));
    Test generated2 = (Test) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { Test.class }, generatedTestInvocationHandler);
    assertFalse(generated.equals(generated2));
    assertFalse(generated2.equals(generated));
    assertTrue(AnnotationUtils.equals(generated, generated2));
    assertTrue(AnnotationUtils.equals(generated2, generated));
}