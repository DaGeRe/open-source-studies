// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks if two annotations are equal using the criteria for equality                         * &lt;p&gt;Checks if two annotations are equal using the criteria for equality                      
* presented in the {@link Annotation#equals(Object)} API docs. Additionally                          | * presented in the {@link Annotation#equals(Object)} API docs.&lt;/p&gt;                            
* if the &lt;code&gt;javax.enterprise.util.Nonbinding&lt;/code&gt; annotation is found               |                                                                                                     
* on the classpath, its implications will be respected:                                              |                                                                                                     
* &lt;code&gt;Nonbinding&lt;/code&gt; members will contribute nothing to the equality                |                                                                                                     
* calculation.&lt;/p&gt;                                                                             |                                                                                                     
*                                                                                                      *                                                                                                   
* @param a1 the first Annotation to compare, {@code null} returns                                      * @param a1 the first Annotation to compare, {@code null} returns                                   
* {@code false} unless both are {@code null}                                                           * {@code false} unless both are {@code null}                                                        
* @param a2 the second Annotation to compare, {@code null} returns                                     * @param a2 the second Annotation to compare, {@code null} returns                                  
* {@code false} unless both are {@code null}                                                           * {@code false} unless both are {@code null}                                                        
* @return {@code true} if the two annotations are {@code equal} or both                                * @return {@code true} if the two annotations are {@code equal} or both                             
* {@code null}                                                                                         * {@code null}                                                                                      
*/                                                                                                     */                                                                                                  
public static boolean equals(Annotation a1, Annotation a2) {                                           public static boolean equals(Annotation a1, Annotation a2) {                                        
if (a1 == a2) {                                                                                        if (a1 == a2) {                                                                                     
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
if (a1 == null || a2 == null) {                                                                        if (a1 == null || a2 == null) {                                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
Class&lt;? extends Annotation&gt; type = a1.annotationType();                                          Class&lt;? extends Annotation&gt; type = a1.annotationType();                                       
Class&lt;? extends Annotation&gt; type2 = a2.annotationType();                                         Class&lt;? extends Annotation&gt; type2 = a2.annotationType();                                      
Validate.notNull(type, "Annotation %s with null annotationType()", a1);                                Validate.notNull(type, "Annotation %s with null annotationType()", a1);                             
Validate.notNull(type2, "Annotation %s with null annotationType()", a2);                               Validate.notNull(type2, "Annotation %s with null annotationType()", a2);                            
if (!type.equals(type2)) {                                                                             if (!type.equals(type2)) {                                                                          
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
for (Method m : type.getDeclaredMethods()) {                                                           for (Method m : type.getDeclaredMethods()) {                                                        
if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType()) && !isNonbin | if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {          
Object v1 = m.invoke(a1);                                                                              Object v1 = m.invoke(a1);                                                                           
Object v2 = m.invoke(a2);                                                                              Object v2 = m.invoke(a2);                                                                           
if (!memberEquals(m.getReturnType(), v1, v2)) {                                                        if (!memberEquals(m.getReturnType(), v1, v2)) {                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (IllegalAccessException ex) {                                                                  } catch (IllegalAccessException ex) {                                                               
return false;                                                                                          return false;                                                                                       
} catch (InvocationTargetException ex) {                                                               } catch (InvocationTargetException ex) {                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
