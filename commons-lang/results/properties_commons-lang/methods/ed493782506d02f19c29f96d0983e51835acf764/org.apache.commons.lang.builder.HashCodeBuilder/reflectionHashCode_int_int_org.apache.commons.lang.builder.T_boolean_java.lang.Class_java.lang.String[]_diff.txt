                                                                                                     | /**                                                                                                 
                                                                                                     | * &lt;p&gt;                                                                                         
                                                                                                     | * This method uses reflection to build a valid hash code.                                           
                                                                                                     | * &lt;/p&gt;                                                                                        
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;                                                                                         
                                                                                                     | * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. 
                                                                                                     | * throw a security exception if run under a security manager, if the permissions are not set up corr
                                                                                                     | * also not as efficient as testing explicitly.                                                      
                                                                                                     | * &lt;/p&gt;                                                                                        
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;                                                                                         
                                                                                                     | * If the TestTransients parameter is set to &lt;code&gt;true&lt;/code&gt;, transient members will be
                                                                                                     | * are ignored, as they are likely derived fields, and not part of the value of the &lt;code&gt;Objec
                                                                                                     | * &lt;/p&gt;                                                                                        
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;                                                                                         
                                                                                                     | * Static fields will not be included. Superclass fields will be included up to and including the spe
                                                                                                     | * superclass. A null superclass is treated as java.lang.Object.                                     
                                                                                                     | * &lt;/p&gt;                                                                                        
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;                                                                                         
                                                                                                     | * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different fo
                                                                                                     | * however this is not vital. Prime numbers are preferred, especially for the multiplier.            
                                                                                                     | * &lt;/p&gt;                                                                                        
                                                                                                     | *                                                                                                   
                                                                                                     | * @param initialNonZeroOddNumber                                                                    
                                                                                                     | *            a non-zero, odd number used as the initial value                                       
                                                                                                     | * @param multiplierNonZeroOddNumber                                                                 
                                                                                                     | *            a non-zero, odd number used as the multiplier                                          
                                                                                                     | * @param object                                                                                     
                                                                                                     | *            the Object to create a &lt;code&gt;hashCode&lt;/code&gt; for                           
                                                                                                     | * @param testTransients                                                                             
                                                                                                     | *            whether to include transient fields                                                    
                                                                                                     | * @param reflectUpToClass                                                                           
                                                                                                     | *            the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;      
                                                                                                     | * @param excludeFields                                                                              
                                                                                                     | *            array of field names to exclude from use in calculation of hash code                   
                                                                                                     | * @return int hash code                                                                             
                                                                                                     | * @throws IllegalArgumentException                                                                  
                                                                                                     | *             if the Object is &lt;code&gt;null&lt;/code&gt;                                        
                                                                                                     | * @throws IllegalArgumentException                                                                  
                                                                                                     | *             if the number is zero or even                                                         
                                                                                                     | * @since 2.0                                                                                        
                                                                                                     | */                                                                                                  
                                                                                                     | public static &lt;T&gt; int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOdd
                                                                                                     | if (object == null) {                                                                               
                                                                                                     | throw new IllegalArgumentException("The object to build a hash code for must not be null");         
                                                                                                     | }                                                                                                   
                                                                                                     | HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); 
                                                                                                     | Class&lt;?&gt; clazz = object.getClass();                                                           
                                                                                                     | reflectionAppend(object, clazz, builder, testTransients, excludeFields);                            
                                                                                                     | while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {                                
                                                                                                     | clazz = clazz.getSuperclass();                                                                      
                                                                                                     | reflectionAppend(object, clazz, builder, testTransients, excludeFields);                            
                                                                                                     | }                                                                                                   
                                                                                                     | return builder.toHashCode();                                                                        
                                                                                                     | }                                                                                                   
