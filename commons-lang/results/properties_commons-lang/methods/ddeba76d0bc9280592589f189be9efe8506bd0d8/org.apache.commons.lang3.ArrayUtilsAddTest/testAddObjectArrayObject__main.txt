public void testAddObjectArrayObject() {
    Object[] newArray;
    // show that not casting is okay
    newArray = ArrayUtils.add((Object[]) null, "a");
    assertTrue(Arrays.equals((new String[] { "a" }), newArray));
    assertTrue(Arrays.equals((new Object[] { "a" }), newArray));
    assertEquals(String.class, newArray.getClass().getComponentType());
    // show that not casting to Object[] is okay and will assume String based on "a"
    String[] newStringArray = ArrayUtils.add(null, "a");
    assertTrue(Arrays.equals((new String[] { "a" }), newStringArray));
    assertTrue(Arrays.equals((new Object[] { "a" }), newStringArray));
    assertEquals(String.class, newStringArray.getClass().getComponentType());
    String[] stringArray1 = new String[] { "a", "b", "c" };
    newArray = ArrayUtils.add(stringArray1, null);
    assertTrue(Arrays.equals((new String[] { "a", "b", "c", null }), newArray));
    assertEquals(String.class, newArray.getClass().getComponentType());
    newArray = ArrayUtils.add(stringArray1, "d");
    assertTrue(Arrays.equals((new String[] { "a", "b", "c", "d" }), newArray));
    assertEquals(String.class, newArray.getClass().getComponentType());
    Number[] numberArray1 = new Number[] { Integer.valueOf(1), new Double(2) };
    newArray = ArrayUtils.add(numberArray1, new Float(3));
    assertTrue(Arrays.equals((new Number[] { Integer.valueOf(1), new Double(2), new Float(3) }), newArray));
    assertEquals(Number.class, newArray.getClass().getComponentType());
    numberArray1 = null;
    newArray = ArrayUtils.add(numberArray1, new Float(3));
    assertTrue(Arrays.equals((new Float[] { new Float(3) }), newArray));
    assertEquals(Float.class, newArray.getClass().getComponentType());
}