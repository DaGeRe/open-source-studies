// isAssignableFrom
// ---------------------------------------------------------------------------------
/**
 * <p>Validate that the argument can be converted to the specified class; otherwise
 * throwing an exception with the specified message. This method is useful when
 * validating if there will be no casting errors.</p>
 *
 * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>
 *
 * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;
 * followed by the name of the class and &quot;class&quot;</p>
 *
 * @param superType  the class the class must be validated against, not null
 * @param type  the class to check, not null
 * @throws IllegalArgumentException if argument can not be converted to the specified class
 * @see #isAssignableFrom(Class, Class, String, Object...)
 *
 * @since 3.0
 */
public static void isAssignableFrom(Class<?> superType, Class<?> type) {
    if (superType.isAssignableFrom(type) == false) {
        throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, superType.getName()));
    }
}