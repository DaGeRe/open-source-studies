/**                                                                                                    /**                                                                                                 
* Handles the common {@link Formattable} operations of truncate-pad-append.                            * Handles the common {@link Formattable} operations of truncate-pad-append.                         
*                                                                                                      *                                                                                                   
* @param seq to handle                                                                                 * @param seq to handle                                                                              
* @param formatter destination                                                                         * @param formatter destination                                                                      
* @param flags for formatting                                                                          * @param flags for formatting                                                                       
* @param width of output                                                                               * @param width of output                                                                            
* @param precision of output                                                                           * @param precision of output                                                                        
* @param padChar to use                                                                                * @param padChar to use                                                                             
* @param ellipsis to use when precision dictates truncation; a {@code null}                            * @param ellipsis to use when precision dictates truncation; a {@code null}                         
* or empty value causes a hard truncation                                                              * or empty value causes a hard truncation                                                           
* @return {@code formatter}                                                                            * @return {@code formatter}                                                                         
*/                                                                                                     */                                                                                                  
public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width, int prec   public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width, int prec
Validate.isTrue(ellipsis == null || precision &lt; 0 || ellipsis.length() &lt;= precision, "Specifie   Validate.isTrue(ellipsis == null || precision &lt; 0 || ellipsis.length() &lt;= precision, "Specifie
StringBuilder buf = new StringBuilder(seq);                                                            StringBuilder buf = new StringBuilder(seq);                                                         
if (precision &gt;= 0 && precision &lt; seq.length()) {                                                if (precision &gt;= 0 && precision &lt; seq.length()) {                                             
CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, "");                                    | CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);                    
buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());                       buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());                    
}                                                                                                      }                                                                                                   
boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;                                          boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;                                       
for (int i = buf.length(); i &lt; width; i++) {                                                        for (int i = buf.length(); i &lt; width; i++) {                                                     
buf.insert(leftJustify ? i : 0, padChar);                                                              buf.insert(leftJustify ? i : 0, padChar);                                                           
}                                                                                                      }                                                                                                   
formatter.format(buf.toString());                                                                      formatter.format(buf.toString());                                                                   
return formatter;                                                                                      return formatter;                                                                                   
}                                                                                                      }                                                                                                   
