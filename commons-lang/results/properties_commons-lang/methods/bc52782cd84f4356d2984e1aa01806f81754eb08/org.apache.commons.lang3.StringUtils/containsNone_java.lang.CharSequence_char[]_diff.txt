// ContainsNone                                                                                        // ContainsNone                                                                                     
// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks that the CharSequence does not contain certain characters.&lt;/p&gt;                 * &lt;p&gt;Checks that the CharSequence does not contain certain characters.&lt;/p&gt;              
*                                                                                                      *                                                                                                   
* &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; CharSequence will return &lt;code&gt;true&lt;/code&gt;.     * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; CharSequence will return &lt;code&gt;true&lt;/code&gt;.  
* A &lt;code&gt;null&lt;/code&gt; invalid character array will return &lt;code&gt;true&lt;/code&gt;.   * A &lt;code&gt;null&lt;/code&gt; invalid character array will return &lt;code&gt;true&lt;/code&gt;.
* An empty CharSequence (length()=0) always returns true.&lt;/p&gt;                                    * An empty CharSequence (length()=0) always returns true.&lt;/p&gt;                                 
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.containsNone(null, *)       = true                                                       * StringUtils.containsNone(null, *)       = true                                                    
* StringUtils.containsNone(*, null)       = true                                                       * StringUtils.containsNone(*, null)       = true                                                    
* StringUtils.containsNone("", *)         = true                                                       * StringUtils.containsNone("", *)         = true                                                    
* StringUtils.containsNone("ab", '')      = true                                                       * StringUtils.containsNone("ab", '')      = true                                                    
* StringUtils.containsNone("abab", 'xyz') = true                                                       * StringUtils.containsNone("abab", 'xyz') = true                                                    
* StringUtils.containsNone("ab1", 'xyz')  = true                                                       * StringUtils.containsNone("ab1", 'xyz')  = true                                                    
* StringUtils.containsNone("abz", 'xyz')  = false                                                      * StringUtils.containsNone("abz", 'xyz')  = false                                                   
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param cs  the CharSequence to check, may be null                                                    * @param cs  the CharSequence to check, may be null                                                 
* @param invalidChars  an array of invalid chars, may be null                                        | * @param searchChars  an array of invalid chars, may be null                                        
* @return true if it contains none of the invalid chars, or is null                                    * @return true if it contains none of the invalid chars, or is null                                 
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static boolean containsNone(CharSequence cs, char[] invalidChars) {                           | public static boolean containsNone(CharSequence cs, char[] searchChars) {                           
if (cs == null || invalidChars == null) {                                                            | if (cs == null || searchChars == null) {                                                            
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
int strSize = cs.length();                                                                           | int csLen = cs.length();                                                                            
int validSize = invalidChars.length;                                                                 | int csLast = csLen - 1;                                                                             
for (int i = 0; i &lt; strSize; i++) {                                                               | int searchLen = searchChars.length;                                                                 
                                                                                                     | int searchLast = searchLen - 1;                                                                     
                                                                                                     | for (int i = 0; i &lt; csLen; i++) {                                                                
char ch = cs.charAt(i);                                                                                char ch = cs.charAt(i);                                                                             
for (int j = 0; j &lt; validSize; j++) {                                                             | for (int j = 0; j &lt; searchLen; j++) {                                                            
if (invalidChars[j] == ch) {                                                                         | if (searchChars[j] == ch) {                                                                         
                                                                                                     | if (Character.isHighSurrogate(ch)) {                                                                
                                                                                                     | if (j == searchLast) {                                                                              
                                                                                                     | // missing low surrogate, fine, like String.indexOf(String)                                         
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
                                                                                                     | if (i &lt; csLast && searchChars[j + 1] == cs.charAt(i + 1)) {                                      
                                                                                                     | return false;                                                                                       
}                                                                                                      }                                                                                                   
                                                                                                     | } else {                                                                                            
                                                                                                     | // ch is in the Basic Multilingual Plane                                                            
                                                                                                     | return false;                                                                                       
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
