                                                                                                     | @Test                                                                                               
public void testReadNamedStaticFieldForceAccess() throws Exception {                                   public void testReadNamedStaticFieldForceAccess() throws Exception {                                
assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true));                         assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true));                      
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true));       assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true));    
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true));      assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true));   
assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true));                   assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true));                
try {                                                                                                  try {                                                                                               
FieldUtils.readStaticField(null, "none", true);                                                        FieldUtils.readStaticField(null, "none", true);                                                     
fail("null class should cause an IllegalArgumentException");                                           fail("null class should cause an IllegalArgumentException");                                        
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.readStaticField(Foo.class, null, true);                                                     FieldUtils.readStaticField(Foo.class, null, true);                                                  
fail("null field name should cause an IllegalArgumentException");                                      fail("null field name should cause an IllegalArgumentException");                                   
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.readStaticField(Foo.class, "does_not_exist", true);                                         FieldUtils.readStaticField(Foo.class, "does_not_exist", true);                                      
fail("a field that doesn't exist should cause an IllegalArgumentException");                           fail("a field that doesn't exist should cause an IllegalArgumentException");                        
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.readStaticField(PublicChild.class, "s", false);                                             FieldUtils.readStaticField(PublicChild.class, "s", false);                                          
fail("non-static field should cause an IllegalArgumentException");                                     fail("non-static field should cause an IllegalArgumentException");                                  
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
