                                                                                                     | @Test                                                                                               
public void testReadFieldForceAccess() throws Exception {                                              public void testReadFieldForceAccess() throws Exception {                                           
Field parentS = FieldUtils.getDeclaredField(parentClass, "s");                                         Field parentS = FieldUtils.getDeclaredField(parentClass, "s");                                      
parentS.setAccessible(false);                                                                          parentS.setAccessible(false);                                                                       
assertEquals("s", FieldUtils.readField(parentS, publicChild, true));                                   assertEquals("s", FieldUtils.readField(parentS, publicChild, true));                                
assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true));                         assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true));                      
assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true));                        assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true));                     
Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true);                                   Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true);                                
parentB.setAccessible(false);                                                                          parentB.setAccessible(false);                                                                       
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));                         assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));                      
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));               assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));            
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));              assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));           
Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true);                                   Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true);                                
parentI.setAccessible(false);                                                                          parentI.setAccessible(false);                                                                       
assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));                                    assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));                                 
assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));                          assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));                       
assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));                         assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));                      
Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true);                                   Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true);                                
parentD.setAccessible(false);                                                                          parentD.setAccessible(false);                                                                       
assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));                                    assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));                                 
assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));                          assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));                       
assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));                         assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));                      
try {                                                                                                  try {                                                                                               
FieldUtils.readField((Field) null, publicChild, true);                                                 FieldUtils.readField((Field) null, publicChild, true);                                              
fail("a null field should cause an IllegalArgumentException");                                         fail("a null field should cause an IllegalArgumentException");                                      
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
