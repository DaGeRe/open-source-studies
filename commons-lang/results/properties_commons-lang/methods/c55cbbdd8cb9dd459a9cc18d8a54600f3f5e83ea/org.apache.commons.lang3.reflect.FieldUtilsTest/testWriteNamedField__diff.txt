                                                                                                     | @Test                                                                                               
public void testWriteNamedField() throws Exception {                                                   public void testWriteNamedField() throws Exception {                                                
FieldUtils.writeField(publicChild, "s", "S");                                                          FieldUtils.writeField(publicChild, "s", "S");                                                       
assertEquals("S", FieldUtils.readField(publicChild, "s"));                                             assertEquals("S", FieldUtils.readField(publicChild, "s"));                                          
try {                                                                                                  try {                                                                                               
FieldUtils.writeField(publicChild, "b", Boolean.TRUE);                                                 FieldUtils.writeField(publicChild, "b", Boolean.TRUE);                                              
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.writeField(publicChild, "i", new Integer(1));                                               FieldUtils.writeField(publicChild, "i", new Integer(1));                                            
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.writeField(publicChild, "d", new Double(1.0));                                              FieldUtils.writeField(publicChild, "d", new Double(1.0));                                           
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
FieldUtils.writeField(publiclyShadowedChild, "s", "S");                                                FieldUtils.writeField(publiclyShadowedChild, "s", "S");                                             
assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s"));                                   assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s"));                                
FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE);                                      FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE);                                   
assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b"));                         assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b"));                      
FieldUtils.writeField(publiclyShadowedChild, "i", new Integer(0));                                     FieldUtils.writeField(publiclyShadowedChild, "i", new Integer(0));                                  
assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, "i"));                        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, "i"));                     
FieldUtils.writeField(publiclyShadowedChild, "d", new Double(0.0));                                    FieldUtils.writeField(publiclyShadowedChild, "d", new Double(0.0));                                 
assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, "d"));                       assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, "d"));                    
FieldUtils.writeField(privatelyShadowedChild, "s", "S");                                               FieldUtils.writeField(privatelyShadowedChild, "s", "S");                                            
assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s"));                                  assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s"));                               
try {                                                                                                  try {                                                                                               
FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE);                                      FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE);                                   
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.writeField(privatelyShadowedChild, "i", new Integer(1));                                    FieldUtils.writeField(privatelyShadowedChild, "i", new Integer(1));                                 
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.writeField(privatelyShadowedChild, "d", new Double(1.0));                                   FieldUtils.writeField(privatelyShadowedChild, "d", new Double(1.0));                                
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
