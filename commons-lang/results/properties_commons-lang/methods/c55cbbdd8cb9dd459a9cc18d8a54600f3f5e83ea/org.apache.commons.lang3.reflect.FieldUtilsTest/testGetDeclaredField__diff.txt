                                                                                                     | @Test                                                                                               
public void testGetDeclaredField() {                                                                   public void testGetDeclaredField() {                                                                
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE"));                                   assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE"));                                
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s"));                                       assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s"));                                    
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b"));                                       assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b"));                                    
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i"));                                       assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i"));                                    
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d"));                                       assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d"));                                    
assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE"));                         assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE"));                      
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "   assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "   assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "   assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "   assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE"));                        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE"));                     
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s"));                            assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s"));                         
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b"));                            assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b"));                         
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i"));                            assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i"));                         
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d"));                            assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d"));                         
try {                                                                                                  try {                                                                                               
FieldUtils.getDeclaredField(null, "none");                                                             FieldUtils.getDeclaredField(null, "none");                                                          
fail("null class should cause an IllegalArgumentException");                                           fail("null class should cause an IllegalArgumentException");                                        
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FieldUtils.getDeclaredField(PublicChild.class, null);                                                  FieldUtils.getDeclaredField(PublicChild.class, null);                                               
fail("null field name should cause an IllegalArgumentException");                                      fail("null field name should cause an IllegalArgumentException");                                   
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// expected                                                                                            // expected                                                                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
