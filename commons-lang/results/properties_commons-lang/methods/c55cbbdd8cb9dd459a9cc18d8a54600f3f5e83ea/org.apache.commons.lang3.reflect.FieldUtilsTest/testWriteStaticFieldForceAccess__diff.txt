                                                                                                     | @Test                                                                                               
public void testWriteStaticFieldForceAccess() throws Exception {                                       public void testWriteStaticFieldForceAccess() throws Exception {                                    
Field field = StaticContainer.class.getDeclaredField("mutablePublic");                                 Field field = StaticContainer.class.getDeclaredField("mutablePublic");                              
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
assertEquals("new", StaticContainer.mutablePublic);                                                    assertEquals("new", StaticContainer.mutablePublic);                                                 
field = StaticContainer.class.getDeclaredField("mutableProtected");                                    field = StaticContainer.class.getDeclaredField("mutableProtected");                                 
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
assertEquals("new", StaticContainer.getMutableProtected());                                            assertEquals("new", StaticContainer.getMutableProtected());                                         
field = StaticContainer.class.getDeclaredField("mutablePackage");                                      field = StaticContainer.class.getDeclaredField("mutablePackage");                                   
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
assertEquals("new", StaticContainer.getMutablePackage());                                              assertEquals("new", StaticContainer.getMutablePackage());                                           
field = StaticContainer.class.getDeclaredField("mutablePrivate");                                      field = StaticContainer.class.getDeclaredField("mutablePrivate");                                   
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
assertEquals("new", StaticContainer.getMutablePrivate());                                              assertEquals("new", StaticContainer.getMutablePrivate());                                           
field = StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC");                                    field = StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC");                                 
try {                                                                                                  try {                                                                                               
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
fail("Expected IllegalAccessException");                                                               fail("Expected IllegalAccessException");                                                            
} catch (IllegalAccessException e) {                                                                   } catch (IllegalAccessException e) {                                                                
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
field = StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED");                                 field = StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED");                              
try {                                                                                                  try {                                                                                               
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
fail("Expected IllegalAccessException");                                                               fail("Expected IllegalAccessException");                                                            
} catch (IllegalAccessException e) {                                                                   } catch (IllegalAccessException e) {                                                                
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
field = StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE");                                   field = StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE");                                
try {                                                                                                  try {                                                                                               
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
fail("Expected IllegalAccessException");                                                               fail("Expected IllegalAccessException");                                                            
} catch (IllegalAccessException e) {                                                                   } catch (IllegalAccessException e) {                                                                
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
field = StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE");                                   field = StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE");                                
try {                                                                                                  try {                                                                                               
FieldUtils.writeStaticField(field, "new", true);                                                       FieldUtils.writeStaticField(field, "new", true);                                                    
fail("Expected IllegalAccessException");                                                               fail("Expected IllegalAccessException");                                                            
} catch (IllegalAccessException e) {                                                                   } catch (IllegalAccessException e) {                                                                
// pass                                                                                                // pass                                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
