                                                                                                     | @Test                                                                                               
public void testDouble() {                                                                             public void testDouble() {                                                                          
double o1 = 1;                                                                                         double o1 = 1;                                                                                      
double o2 = 2;                                                                                         double o2 = 2;                                                                                      
assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);                                 assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);                              
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() &lt; 0);                               assertTrue(new CompareToBuilder().append(o1, o2).toComparison() &lt; 0);                            
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() &gt; 0);                               assertTrue(new CompareToBuilder().append(o2, o1).toComparison() &gt; 0);                            
assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() &lt; 0);                 assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() &lt; 0);              
assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() &gt; 0);                 assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() &gt; 0);              
assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() &gt; 0);                 assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() &gt; 0);              
assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() &lt; 0);                 assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() &lt; 0);              
assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);                 assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);              
assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() &gt; 0);         assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() &gt; 0);      
assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison()    assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() 
assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison()    assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() 
assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() &lt; 0);                       assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() &lt; 0);                    
assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() &gt; 0);                       assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() &gt; 0);                    
assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() &lt; 0);                            assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() &lt; 0);                         
assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() &gt; 0);                            assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() &gt; 0);                         
}                                                                                                      }                                                                                                   
