                                                                                                     | @Test                                                                                               
public void testMixedArray() {                                                                         public void testMixedArray() {                                                                      
Object[] array1 = new Object[2];                                                                       Object[] array1 = new Object[2];                                                                    
Object[] array2 = new Object[2];                                                                       Object[] array2 = new Object[2];                                                                    
Object[] array3 = new Object[2];                                                                       Object[] array3 = new Object[2];                                                                    
for (int i = 0; i &lt; array1.length; ++i) {                                                           for (int i = 0; i &lt; array1.length; ++i) {                                                        
array1[i] = new long[2];                                                                               array1[i] = new long[2];                                                                            
array2[i] = new long[2];                                                                               array2[i] = new long[2];                                                                            
array3[i] = new long[3];                                                                               array3[i] = new long[3];                                                                            
for (int j = 0; j &lt; 2; ++j) {                                                                       for (int j = 0; j &lt; 2; ++j) {                                                                    
((long[]) array1[i])[j] = (i + 1) * (j + 1);                                                           ((long[]) array1[i])[j] = (i + 1) * (j + 1);                                                        
((long[]) array2[i])[j] = (i + 1) * (j + 1);                                                           ((long[]) array2[i])[j] = (i + 1) * (j + 1);                                                        
((long[]) array3[i])[j] = (i + 1) * (j + 1);                                                           ((long[]) array3[i])[j] = (i + 1) * (j + 1);                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
((long[]) array3[0])[2] = 1;                                                                           ((long[]) array3[0])[2] = 1;                                                                        
((long[]) array3[1])[2] = 1;                                                                           ((long[]) array3[1])[2] = 1;                                                                        
assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);                         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);                      
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);                         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);                      
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() &lt; 0);                       assertTrue(new CompareToBuilder().append(array1, array3).toComparison() &lt; 0);                    
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() &gt; 0);                       assertTrue(new CompareToBuilder().append(array3, array1).toComparison() &gt; 0);                    
((long[]) array1[1])[1] = 200;                                                                         ((long[]) array1[1])[1] = 200;                                                                      
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() &gt; 0);                       assertTrue(new CompareToBuilder().append(array1, array2).toComparison() &gt; 0);                    
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() &lt; 0);                       assertTrue(new CompareToBuilder().append(array2, array1).toComparison() &lt; 0);                    
}                                                                                                      }                                                                                                   
