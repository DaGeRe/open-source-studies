public void testReducedFactory_int_int() {                                                             public void testReducedFactory_int_int() {                                                          
Fraction f = null;                                                                                     Fraction f = null;                                                                                  
// zero                                                                                                // zero                                                                                             
f = Fraction.getReducedFraction(0, 1);                                                                 f = Fraction.getReducedFraction(0, 1);                                                              
assertEquals(0, f.getNumerator());                                                                     assertEquals(0, f.getNumerator());                                                                  
assertEquals(1, f.getDenominator());                                                                   assertEquals(1, f.getDenominator());                                                                
// normal                                                                                              // normal                                                                                           
f = Fraction.getReducedFraction(1, 1);                                                                 f = Fraction.getReducedFraction(1, 1);                                                              
assertEquals(1, f.getNumerator());                                                                     assertEquals(1, f.getNumerator());                                                                  
assertEquals(1, f.getDenominator());                                                                   assertEquals(1, f.getDenominator());                                                                
f = Fraction.getReducedFraction(2, 1);                                                                 f = Fraction.getReducedFraction(2, 1);                                                              
assertEquals(2, f.getNumerator());                                                                     assertEquals(2, f.getNumerator());                                                                  
assertEquals(1, f.getDenominator());                                                                   assertEquals(1, f.getDenominator());                                                                
// improper                                                                                            // improper                                                                                         
f = Fraction.getReducedFraction(22, 7);                                                                f = Fraction.getReducedFraction(22, 7);                                                             
assertEquals(22, f.getNumerator());                                                                    assertEquals(22, f.getNumerator());                                                                 
assertEquals(7, f.getDenominator());                                                                   assertEquals(7, f.getDenominator());                                                                
// negatives                                                                                           // negatives                                                                                        
f = Fraction.getReducedFraction(-6, 10);                                                               f = Fraction.getReducedFraction(-6, 10);                                                            
assertEquals(-3, f.getNumerator());                                                                    assertEquals(-3, f.getNumerator());                                                                 
assertEquals(5, f.getDenominator());                                                                   assertEquals(5, f.getDenominator());                                                                
f = Fraction.getReducedFraction(6, -10);                                                               f = Fraction.getReducedFraction(6, -10);                                                            
assertEquals(-3, f.getNumerator());                                                                    assertEquals(-3, f.getNumerator());                                                                 
assertEquals(5, f.getDenominator());                                                                   assertEquals(5, f.getDenominator());                                                                
f = Fraction.getReducedFraction(-6, -10);                                                              f = Fraction.getReducedFraction(-6, -10);                                                           
assertEquals(3, f.getNumerator());                                                                     assertEquals(3, f.getNumerator());                                                                  
assertEquals(5, f.getDenominator());                                                                   assertEquals(5, f.getDenominator());                                                                
// zero denominator                                                                                    // zero denominator                                                                                 
try {                                                                                                  try {                                                                                               
f = Fraction.getReducedFraction(1, 0);                                                                 f = Fraction.getReducedFraction(1, 0);                                                              
fail("expecting ArithmeticException");                                                                 fail("expecting ArithmeticException");                                                              
} catch (ArithmeticException ex) {                                                                     } catch (ArithmeticException ex) {                                                                  
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
f = Fraction.getReducedFraction(2, 0);                                                                 f = Fraction.getReducedFraction(2, 0);                                                              
fail("expecting ArithmeticException");                                                                 fail("expecting ArithmeticException");                                                              
} catch (ArithmeticException ex) {                                                                     } catch (ArithmeticException ex) {                                                                  
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
f = Fraction.getReducedFraction(-3, 0);                                                                f = Fraction.getReducedFraction(-3, 0);                                                             
fail("expecting ArithmeticException");                                                                 fail("expecting ArithmeticException");                                                              
} catch (ArithmeticException ex) {                                                                     } catch (ArithmeticException ex) {                                                                  
}                                                                                                      }                                                                                                   
// reduced                                                                                             // reduced                                                                                          
f = Fraction.getReducedFraction(0, 2);                                                                 f = Fraction.getReducedFraction(0, 2);                                                              
assertEquals(0, f.getNumerator());                                                                     assertEquals(0, f.getNumerator());                                                                  
assertEquals(1, f.getDenominator());                                                                   assertEquals(1, f.getDenominator());                                                                
f = Fraction.getReducedFraction(2, 2);                                                                 f = Fraction.getReducedFraction(2, 2);                                                              
assertEquals(1, f.getNumerator());                                                                     assertEquals(1, f.getNumerator());                                                                  
assertEquals(1, f.getDenominator());                                                                   assertEquals(1, f.getDenominator());                                                                
f = Fraction.getReducedFraction(2, 4);                                                                 f = Fraction.getReducedFraction(2, 4);                                                              
assertEquals(1, f.getNumerator());                                                                     assertEquals(1, f.getNumerator());                                                                  
assertEquals(2, f.getDenominator());                                                                   assertEquals(2, f.getDenominator());                                                                
f = Fraction.getReducedFraction(15, 10);                                                               f = Fraction.getReducedFraction(15, 10);                                                            
assertEquals(3, f.getNumerator());                                                                     assertEquals(3, f.getNumerator());                                                                  
assertEquals(2, f.getDenominator());                                                                   assertEquals(2, f.getDenominator());                                                                
f = Fraction.getReducedFraction(121, 22);                                                              f = Fraction.getReducedFraction(121, 22);                                                           
assertEquals(11, f.getNumerator());                                                                    assertEquals(11, f.getNumerator());                                                                 
assertEquals(2, f.getDenominator());                                                                   assertEquals(2, f.getDenominator());                                                                
// Extreme values                                                                                      // Extreme values                                                                                   
// OK, can reduce before negating                                                                      // OK, can reduce before negating                                                                   
f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);                                                f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);                                             
assertEquals(1, f.getNumerator());                                                                     assertEquals(1, f.getNumerator());                                                                  
assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                            assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                         
// Can't reduce, negation will throw                                                                   // Can't reduce, negation will throw                                                                
try {                                                                                                  try {                                                                                               
f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);                                                f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);                                             
fail("Expecting ArithmeticException");                                                                 fail("Expecting ArithmeticException");                                                              
} catch (ArithmeticException ex) {                                                                     } catch (ArithmeticException ex) {                                                                  
}                                                                                                      }                                                                                                   
                                                                                                     | // LANG-662                                                                                         
                                                                                                     | f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);                                              
                                                                                                     | assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                              
                                                                                                     | assertEquals(1, f.getDenominator());                                                                
}                                                                                                      }                                                                                                   
