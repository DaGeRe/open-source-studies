/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Removes the accents from a string. &lt;/p&gt;                                               * &lt;p&gt;Removes the accents from a string. &lt;/p&gt;                                            
* &lt;p&gt;NOTE: This is a JDK 1.6 method, it will fail on JDK 1.5. &lt;/p&gt;                         * &lt;p&gt;NOTE: This is a JDK 1.6 method, it will fail on JDK 1.5. &lt;/p&gt;                      
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.stripAccents(null)                = null                                                 * StringUtils.stripAccents(null)                = null                                              
* StringUtils.stripAccents("")                  = ""                                                   * StringUtils.stripAccents("")                  = ""                                                
* StringUtils.stripAccents("control")           = "control"                                            * StringUtils.stripAccents("control")           = "control"                                         
* StringUtils.stripAccents("&ecute;clair")      = "eclair"                                             * StringUtils.stripAccents("&ecute;clair")      = "eclair"                                          
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param input String to be stripped                                                                   * @param input String to be stripped                                                                
* @return String without accents on the text                                                           * @return String without accents on the text                                                        
*                                                                                                      *                                                                                                   
* @since 3.0                                                                                           * @since 3.0                                                                                        
*/                                                                                                     */                                                                                                  
public static String stripAccents(String input) {                                                      public static String stripAccents(String input) {                                                   
if (input == null) {                                                                                   if (input == null) {                                                                                
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
if (SystemUtils.isJavaVersionAtLeast(1.6f)) {                                                          if (SystemUtils.isJavaVersionAtLeast(1.6f)) {                                                       
// String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);                               // String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);                            
// START of 1.5 reflection - in 1.6 use the line commented out above                                   // START of 1.5 reflection - in 1.6 use the line commented out above                                
try {                                                                                                  try {                                                                                               
// get java.text.Normalizer.Form class                                                                 // get java.text.Normalizer.Form class                                                              
Class normalizerFormClass = ClassUtils.getClass("java.text.Normalizer$Form", false);                 | Class&lt;?&gt; normalizerFormClass = ClassUtils.getClass("java.text.Normalizer$Form", false);       
// get Normlizer class                                                                                 // get Normlizer class                                                                              
Class normalizerClass = ClassUtils.getClass("java.text.Normalizer", false);                          | Class&lt;?&gt; normalizerClass = ClassUtils.getClass("java.text.Normalizer", false);                
// get static method on Normalizer                                                                     // get static method on Normalizer                                                                  
java.lang.reflect.Method method = normalizerClass.getMethod("normalize", CharSequence.class, normali   java.lang.reflect.Method method = normalizerClass.getMethod("normalize", CharSequence.class, normali
// get Normalizer.NFD field                                                                            // get Normalizer.NFD field                                                                         
java.lang.reflect.Field nfd = normalizerFormClass.getField("NFD");                                     java.lang.reflect.Field nfd = normalizerFormClass.getField("NFD");                                  
// invoke method                                                                                       // invoke method                                                                                    
String decomposed = (String) method.invoke(null, input, nfd.get(null));                                String decomposed = (String) method.invoke(null, input, nfd.get(null));                             
// END of 1.5 reflection                                                                               // END of 1.5 reflection                                                                            
java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile("\\p{InCombiningDiacriticalM   java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile("\\p{InCombiningDiacriticalM
return accentPattern.matcher(decomposed).replaceAll("");                                               return accentPattern.matcher(decomposed).replaceAll("");                                            
} catch (ClassNotFoundException cnfe) {                                                                } catch (ClassNotFoundException cnfe) {                                                             
throw new RuntimeException("ClassNotFoundException occurred during 1.6 backcompat code", cnfe);        throw new RuntimeException("ClassNotFoundException occurred during 1.6 backcompat code", cnfe);     
} catch (NoSuchMethodException nsme) {                                                                 } catch (NoSuchMethodException nsme) {                                                              
throw new RuntimeException("NoSuchMethodException occurred during 1.6 backcompat code", nsme);         throw new RuntimeException("NoSuchMethodException occurred during 1.6 backcompat code", nsme);      
} catch (NoSuchFieldException nsfe) {                                                                  } catch (NoSuchFieldException nsfe) {                                                               
throw new RuntimeException("NoSuchFieldException occurred during 1.6 backcompat code", nsfe);          throw new RuntimeException("NoSuchFieldException occurred during 1.6 backcompat code", nsfe);       
} catch (IllegalAccessException iae) {                                                                 } catch (IllegalAccessException iae) {                                                              
throw new RuntimeException("IllegalAccessException occurred during 1.6 backcompat code", iae);         throw new RuntimeException("IllegalAccessException occurred during 1.6 backcompat code", iae);      
} catch (IllegalArgumentException iae) {                                                               } catch (IllegalArgumentException iae) {                                                            
throw new RuntimeException("IllegalArgumentException occurred during 1.6 backcompat code", iae);       throw new RuntimeException("IllegalArgumentException occurred during 1.6 backcompat code", iae);    
} catch (java.lang.reflect.InvocationTargetException ite) {                                            } catch (java.lang.reflect.InvocationTargetException ite) {                                         
throw new RuntimeException("InvocationTargetException occurred during 1.6 backcompat code", ite);      throw new RuntimeException("InvocationTargetException occurred during 1.6 backcompat code", ite);   
} catch (SecurityException se) {                                                                       } catch (SecurityException se) {                                                                    
throw new RuntimeException("SecurityException occurred during 1.6 backcompat code", se);               throw new RuntimeException("SecurityException occurred during 1.6 backcompat code", se);            
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
throw new UnsupportedOperationException("The stripAccents(String) method is not supported until Java   throw new UnsupportedOperationException("The stripAccents(String) method is not supported until Java
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
