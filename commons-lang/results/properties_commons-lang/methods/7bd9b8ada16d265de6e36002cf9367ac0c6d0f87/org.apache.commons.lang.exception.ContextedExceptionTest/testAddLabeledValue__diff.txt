public void testAddLabeledValue() {                                                                    public void testAddLabeledValue() {                                                                 
contextedException = new ContextedException(new Exception(TEST_MESSAGE)).addLabeledValue("test1", nu   contextedException = new ContextedException(new Exception(TEST_MESSAGE)).addLabeledValue("test1", nu
String message = contextedException.getMessage();                                                      String message = contextedException.getMessage();                                                   
assertTrue(message.indexOf(TEST_MESSAGE) &gt;= 0);                                                     assertTrue(message.indexOf(TEST_MESSAGE) &gt;= 0);                                                  
assertTrue(message.indexOf("test1") &gt;= 0);                                                          assertTrue(message.indexOf("test1") &gt;= 0);                                                       
assertTrue(message.indexOf("test2") &gt;= 0);                                                          assertTrue(message.indexOf("test2") &gt;= 0);                                                       
assertTrue(message.indexOf("test Date") &gt;= 0);                                                      assertTrue(message.indexOf("test Date") &gt;= 0);                                                   
assertTrue(message.indexOf("test Nbr") &gt;= 0);                                                       assertTrue(message.indexOf("test Nbr") &gt;= 0);                                                    
assertTrue(message.indexOf("test Poorly written obj") &gt;= 0);                                        assertTrue(message.indexOf("test Poorly written obj") &gt;= 0);                                     
assertTrue(message.indexOf("some value") &gt;= 0);                                                     assertTrue(message.indexOf("some value") &gt;= 0);                                                  
assertTrue(message.indexOf("5") &gt;= 0);                                                              assertTrue(message.indexOf("5") &gt;= 0);                                                           
assertTrue(message.indexOf("Crap") &gt;= 0);                                                           assertTrue(message.indexOf("Crap") &gt;= 0);                                                        
String contextMessage = contextedException.getFormattedExceptionMessage("");                         |                                                                                                     
assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);                                              |                                                                                                     
assertTrue(message.contains(contextMessage));                                                        |                                                                                                     
assertTrue(contextedException.getLabeledValue("test1") == null);                                       assertTrue(contextedException.getLabeledValue("test1") == null);                                    
assertTrue(contextedException.getLabeledValue("test2").equals("some value"));                          assertTrue(contextedException.getLabeledValue("test2").equals("some value"));                       
assertTrue(contextedException.getLabeledValue("crap") == null);                                        assertTrue(contextedException.getLabeledValue("crap") == null);                                     
assertTrue(contextedException.getLabeledValue("test Poorly written obj") instanceof ObjectWithFaulty   assertTrue(contextedException.getLabeledValue("test Poorly written obj") instanceof ObjectWithFaulty
assertTrue(contextedException.getLabelSet().size() == 5);                                              assertTrue(contextedException.getLabelSet().size() == 5);                                           
assertTrue(contextedException.getLabelSet().contains("test1"));                                        assertTrue(contextedException.getLabelSet().contains("test1"));                                     
assertTrue(contextedException.getLabelSet().contains("test2"));                                        assertTrue(contextedException.getLabelSet().contains("test2"));                                     
assertTrue(contextedException.getLabelSet().contains("test Date"));                                    assertTrue(contextedException.getLabelSet().contains("test Date"));                                 
assertTrue(contextedException.getLabelSet().contains("test Nbr"));                                     assertTrue(contextedException.getLabelSet().contains("test Nbr"));                                  
assertTrue(contextedException.getLabelSet().contains("test Poorly written obj"));                      assertTrue(contextedException.getLabelSet().contains("test Poorly written obj"));                   
assertTrue(!contextedException.getLabelSet().contains("crap"));                                        assertTrue(!contextedException.getLabelSet().contains("crap"));                                     
                                                                                                     | contextedException.addLabeledValue("test Poorly written obj", "replacement");                       
                                                                                                     | String contextMessage = contextedException.getFormattedExceptionMessage(null);                      
                                                                                                     | assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);                                             
                                                                                                     | assertTrue(contextedException.getMessage().endsWith(contextMessage));                               
}                                                                                                      }                                                                                                   
