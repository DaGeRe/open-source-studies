// /**                                                                                                 // /**                                                                                              
// * Show that java.util.Date and java.sql.Timestamp are apples and oranges.                           // * Show that java.util.Date and java.sql.Timestamp are apples and oranges.                        
// * Prompted by an email discussion.                                                                  // * Prompted by an email discussion.                                                               
// *                                                                                                   // *                                                                                                
// * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.                                     // * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.                                  
// */                                                                                                  // */                                                                                               
// public void testDateEqualsJava() {                                                                  // public void testDateEqualsJava() {                                                               
// long now = 1076957313284L; // Feb 16, 2004 10:49... PST                                             // long now = 1076957313284L; // Feb 16, 2004 10:49... PST                                          
// java.util.Date date = new java.util.Date(now);                                                      // java.util.Date date = new java.util.Date(now);                                                   
// java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);                                     // java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);                                  
// java.util.Date timestamp = realTimestamp;                                                           // java.util.Date timestamp = realTimestamp;                                                        
// // sanity check 1:                                                                                  // // sanity check 1:                                                                               
// assertEquals(284000000, realTimestamp.getNanos());                                                  // assertEquals(284000000, realTimestamp.getNanos());                                               
// assertEquals(1076957313284L, date.getTime());                                                       // assertEquals(1076957313284L, date.getTime());                                                    
// //                                                                                                  // //                                                                                               
// // On Sun 1.3.1_10:                                                                                 // // On Sun 1.3.1_10:                                                                              
// //junit.framework.AssertionFailedError: expected:&lt;1076957313284&gt; but was:&lt;1076957313000&   // //junit.framework.AssertionFailedError: expected:&lt;1076957313284&gt; but was:&lt;1076957313000&
// //                                                                                                  // //                                                                                               
// //assertEquals(1076957313284L, timestamp.getTime());                                                // //assertEquals(1076957313284L, timestamp.getTime());                                             
// //                                                                                                  // //                                                                                               
// //junit.framework.AssertionFailedError: expected:&lt;1076957313284&gt; but was:&lt;1076957313000&   // //junit.framework.AssertionFailedError: expected:&lt;1076957313284&gt; but was:&lt;1076957313000&
// //                                                                                                  // //                                                                                               
// //assertEquals(1076957313284L, realTimestamp.getTime());                                            // //assertEquals(1076957313284L, realTimestamp.getTime());                                         
// // sanity check 2:                                                                                  // // sanity check 2:                                                                               
// assertEquals(date.getDay(), realTimestamp.getDay());                                                // assertEquals(date.getDay(), realTimestamp.getDay());                                             
// assertEquals(date.getHours(), realTimestamp.getHours());                                            // assertEquals(date.getHours(), realTimestamp.getHours());                                         
// assertEquals(date.getMinutes(), realTimestamp.getMinutes());                                        // assertEquals(date.getMinutes(), realTimestamp.getMinutes());                                     
// assertEquals(date.getMonth(), realTimestamp.getMonth());                                            // assertEquals(date.getMonth(), realTimestamp.getMonth());                                         
// assertEquals(date.getSeconds(), realTimestamp.getSeconds());                                        // assertEquals(date.getSeconds(), realTimestamp.getSeconds());                                     
// assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());                          // assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());                       
// assertEquals(date.getYear(), realTimestamp.getYear());                                              // assertEquals(date.getYear(), realTimestamp.getYear());                                           
// //                                                                                                  // //                                                                                               
// // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10:                         // // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10:                      
// //                                                                                                  // //                                                                                               
// //assertFalse("Sanity check failed: date.getTime() == timestamp.getTime()", date.getTime() == tim   // //assertFalse("Sanity check failed: date.getTime() == timestamp.getTime()", date.getTime() == tim
// //assertFalse("Sanity check failed: timestamp.equals(date)", timestamp.equals(date));               // //assertFalse("Sanity check failed: timestamp.equals(date)", timestamp.equals(date));            
// //assertFalse("Sanity check failed: date.equals(timestamp)", date.equals(timestamp));               // //assertFalse("Sanity check failed: date.equals(timestamp)", date.equals(timestamp));            
// // real test:                                                                                       // // real test:                                                                                    
// //assertFalse("java.util.Date and java.sql.Timestamp should be equal", ObjectUtils.equals(date, t   // //assertFalse("java.util.Date and java.sql.Timestamp should be equal", ObjectUtils.equals(date, t
// }                                                                                                   // }                                                                                                
                                                                                                     | @Test                                                                                               
public void testIdentityToString() {                                                                   public void testIdentityToString() {                                                                
assertEquals(null, ObjectUtils.identityToString(null));                                                assertEquals(null, ObjectUtils.identityToString(null));                                             
assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.id   assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.id
Integer i = new Integer(90);                                                                           Integer i = new Integer(90);                                                                        
String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));              String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));           
assertEquals(expected, ObjectUtils.identityToString(i));                                               assertEquals(expected, ObjectUtils.identityToString(i));                                            
StringBuffer buffer = new StringBuffer();                                                              StringBuffer buffer = new StringBuffer();                                                           
ObjectUtils.identityToString(buffer, i);                                                               ObjectUtils.identityToString(buffer, i);                                                            
assertEquals(expected, buffer.toString());                                                             assertEquals(expected, buffer.toString());                                                          
try {                                                                                                  try {                                                                                               
ObjectUtils.identityToString(null, "tmp");                                                             ObjectUtils.identityToString(null, "tmp");                                                          
fail("NullPointerException expected");                                                                 fail("NullPointerException expected");                                                              
} catch (NullPointerException npe) {                                                                   } catch (NullPointerException npe) {                                                                
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
ObjectUtils.identityToString(new StringBuffer(), null);                                                ObjectUtils.identityToString(new StringBuffer(), null);                                             
fail("NullPointerException expected");                                                                 fail("NullPointerException expected");                                                              
} catch (NullPointerException npe) {                                                                   } catch (NullPointerException npe) {                                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
