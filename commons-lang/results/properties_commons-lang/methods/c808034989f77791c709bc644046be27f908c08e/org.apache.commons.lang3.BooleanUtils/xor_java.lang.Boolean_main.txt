/**
 * <p>Performs an xor on an array of Booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE
 * </pre>
 *
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the xor is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 */
public static Boolean xor(Boolean... array) {
    if (array == null) {
        throw new IllegalArgumentException("The Array must not be null");
    }
    if (array.length == 0) {
        throw new IllegalArgumentException("Array is empty");
    }
    try {
        boolean[] primitive = ArrayUtils.toPrimitive(array);
        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
    } catch (NullPointerException ex) {
        throw new IllegalArgumentException("The array must not contain any null elements");
    }
}