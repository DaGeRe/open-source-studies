/**
 * Generate 1000 values for nextInt(bound) and compare
 * the observed frequency counts to expected counts using
 * a chi-square test.
 * @param rnd Random to use if not null
 */
private void tstNextInt(Random rnd) {
    int bound = 0;
    int result = 0;
    // test boundary condition: n = Integer.MAX_VALUE;
    bound = Integer.MAX_VALUE;
    if (rnd == null) {
        result = RandomUtils.nextInt(bound);
    } else {
        result = RandomUtils.nextInt(rnd, bound);
    }
    assertTrue("result less than bound", result < bound);
    assertTrue("result non-negative", result >= 0);
    // test uniformity -- use Chi-Square test at .01 level
    bound = 4;
    int[] expected = new int[] { 250, 250, 250, 250 };
    int[] observed = new int[] { 0, 0, 0, 0 };
    for (int i = 0; i < 1000; i++) {
        if (rnd == null) {
            result = RandomUtils.nextInt(bound);
        } else {
            result = RandomUtils.nextInt(rnd, bound);
        }
        assertTrue(result < bound);
        assertTrue(result >= 0);
        observed[result]++;
    }
    /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001
         * Change to 11.34 for alpha = .01   
         */
    assertTrue("chi-square test -- will fail about 1 in 1000 times", chiSquare(expected, observed) < 16.27);
}