/**
 * <p>Creates a random string based on a variety of options, using
 * default source of randomness.</p>
 *
 * <p>This method has exactly the same semantics as
 * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but
 * instead of using an externally supplied source of randomness, it uses
 * the internal static {@link Random} instance.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.
 *  If <code>null</code>, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  <code>(end - start) + 1</code> characters in the set array.
 */
public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars) {
    return random(count, start, end, letters, numbers, chars, RANDOM);
}