/**
 * <p>Removes all occurrences of a substring from within the source string.</p>
 *
 * <p>A <code>null</code> source string will return <code>null</code>.
 * An empty ("") source string will return the empty string.
 * A <code>null</code> remove string will return the source string.
 * An empty ("") remove string will return the source string.</p>
 *
 * <pre>
 * StringUtils.remove(null, *)        = null
 * StringUtils.remove("", *)          = ""
 * StringUtils.remove(*, null)        = *
 * StringUtils.remove(*, "")          = *
 * StringUtils.remove("queued", "ue") = "qd"
 * StringUtils.remove("queued", "zz") = "queued"
 * </pre>
 *
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,
 *  <code>null</code> if null String input
 * @since 2.1
 */
public static String remove(String str, String remove) {
    if (isEmpty(str) || isEmpty(remove)) {
        return str;
    }
    return replace(str, remove, EMPTY, -1);
}