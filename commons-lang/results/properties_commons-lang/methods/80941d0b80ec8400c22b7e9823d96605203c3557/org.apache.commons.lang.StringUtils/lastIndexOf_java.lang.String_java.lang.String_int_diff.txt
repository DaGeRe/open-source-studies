/**
 * <p>Finds the first index within a String, handling <code>null</code>.
 * This method uses {@link String#lastIndexOf(String, int)}.</p>
 *
 * <p>A <code>null</code> String will return <code>-1</code>.
 * A negative start position returns <code>-1</code>.
 * An empty ("") search String always matches unless the start position is negative.
 * A start position greater than the string length searches the whole string.</p>
 *
 * <pre>
 * StringUtils.lastIndexOf(null, *, *)          = -1
 * StringUtils.lastIndexOf(*, null, *)          = -1
 * StringUtils.lastIndexOf("aabaabaa", "a", 8)  = 7
 * StringUtils.lastIndexOf("aabaabaa", "b", 8)  = 5
 * StringUtils.lastIndexOf("aabaabaa", "ab", 8) = 4
 * StringUtils.lastIndexOf("aabaabaa", "b", 9)  = 5
 * StringUtils.lastIndexOf("aabaabaa", "b", -1) = -1
 * StringUtils.lastIndexOf("aabaabaa", "a", 0)  = 0
 * StringUtils.lastIndexOf("aabaabaa", "b", 0)  = -1
 * </pre>
 *
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search String,
 *  -1 if no match or <code>null</code> string input
 * @since 2.0
 */
public static int lastIndexOf(String str, String searchStr, int startPos) {
    if (str == null || searchStr == null) {
        return -1;
    }
    return str.lastIndexOf(searchStr, startPos);
}