/**
 * <p>Reverses a String that is delimited by a specific character.</p>
 *
 * <p>The Strings between the delimiters are not reversed.
 * Thus java.lang.String becomes String.lang.java (if the delimiter
 * is <code>"."</code>).</p>
 *
 * <pre>
 * StringUtils.reverseDelimitedString(null, *)       = null
 * StringUtils.reverseDelimitedString("",*)          = ""
 * StringUtils.reverseDelimitedString("a.b.c", null) = "a.b.c"
 * StringUtils.reverseDelimitedString("a.b.c", ".")  = "c.b.a"
 * </pre>
 *
 * @param str  the String to reverse, may be null
 * @param separatorChars  the separator characters to use, null treated as whitespace
 * @return the reversed String, <code>null</code> if null String input
 * @deprecated Use {@link #reverseDelimited(String, char)} instead.
 *      This method is broken as the join doesn't know which char to use.
 *      Method will be removed in Commons Lang 3.0.
 */
public static String reverseDelimitedString(String str, String separatorChars) {
    if (str == null) {
        return null;
    }
    // could implement manually, but simple way is to reuse other,
    // probably slower, methods.
    String[] strs = split(str, separatorChars);
    ArrayUtils.reverse(strs);
    if (separatorChars == null) {
        return join(strs, ' ');
    }
    return join(strs, separatorChars);
}