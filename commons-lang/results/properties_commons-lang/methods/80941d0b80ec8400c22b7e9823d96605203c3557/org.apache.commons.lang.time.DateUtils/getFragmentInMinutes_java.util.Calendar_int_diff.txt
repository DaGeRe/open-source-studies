/**
 * <p>Returns the number of minutes within the
 * fragment. All datefields greater than the fragment will be ignored.</p>
 *
 * <p>Asking the minutes of any date will only return the number of minutes
 * of the current hour (resulting in a number between 0 and 59). This
 * method will retrieve the number of minutes for any fragment.
 * For example, if you want to calculate the number of minutes past this month,
 * your fragment is Calendar.MONTH. The result will be all minutes of the
 * past day(s) and hour(s).</p>
 *
 * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
 * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
 * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
 * A fragment less than or equal to a MINUTE field will return 0.</p>
 *
 * <p>
 * <ul>
 *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15
 *   (equivalent to calendar.get(Calendar.MINUTES))</li>
 *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15
 *   (equivalent to calendar.get(Calendar.MINUTES))</li>
 *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>
 *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>
 *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
 *   (a millisecond cannot be split in minutes)</li>
 * </ul>
 * </p>
 *
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate
 * @return number of minutes within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or
 * fragment is not supported
 * @since 2.4
 */
public static long getFragmentInMinutes(Calendar calendar, int fragment) {
    return getFragment(calendar, fragment, Calendar.MINUTE);
}