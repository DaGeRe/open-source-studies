// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Obtains the list of countries supported for a given language.&lt;/p&gt;                     * &lt;p&gt;Obtains the list of countries supported for a given language.&lt;/p&gt;                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method takes a language code and searches to find the                                  * &lt;p&gt;This method takes a language code and searches to find the                               
* countries available for that language. Variant locales are removed.&lt;/p&gt;                        * countries available for that language. Variant locales are removed.&lt;/p&gt;                     
*                                                                                                      *                                                                                                   
* @param languageCode  the 2 letter language code, null returns empty                                  * @param languageCode  the 2 letter language code, null returns empty                               
* @return an unmodifiable List of Locale objects, never null                                           * @return an unmodifiable List of Locale objects, never null                                        
*/                                                                                                     */                                                                                                  
public static List countriesByLanguage(String languageCode) {                                        | public static List&lt;Locale&gt; countriesByLanguage(String languageCode) {                         
// syncd                                                                                               // syncd                                                                                            
List countries = (List) cCountriesByLanguage.get(languageCode);                                      | List&lt;Locale&gt; countries = cCountriesByLanguage.get(languageCode);                              
if (countries == null) {                                                                               if (countries == null) {                                                                            
if (languageCode != null) {                                                                            if (languageCode != null) {                                                                         
countries = new ArrayList();                                                                         | countries = new ArrayList&lt;Locale&gt;();                                                          
List locales = availableLocaleList();                                                                | List&lt;Locale&gt; locales = availableLocaleList();                                                 
for (int i = 0; i &lt; locales.size(); i++) {                                                          for (int i = 0; i &lt; locales.size(); i++) {                                                       
Locale locale = (Locale) locales.get(i);                                                             | Locale locale = locales.get(i);                                                                     
if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVari   if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVari
countries.add(locale);                                                                                 countries.add(locale);                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
countries = Collections.unmodifiableList(countries);                                                   countries = Collections.unmodifiableList(countries);                                                
} else {                                                                                               } else {                                                                                            
countries = Collections.EMPTY_LIST;                                                                  | countries = Collections.emptyList();                                                                
}                                                                                                      }                                                                                                   
// syncd                                                                                               // syncd                                                                                            
cCountriesByLanguage.put(languageCode, countries);                                                     cCountriesByLanguage.put(languageCode, countries);                                                  
}                                                                                                      }                                                                                                   
return countries;                                                                                      return countries;                                                                                   
}                                                                                                      }                                                                                                   
