/**
 * <p>Convert a long value created by {@link EnumUtils#generateBitVector} into the set of
 * enum values that it represents.</p>
 *
 * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
 * @param enumClass the class of the enum we are working with, not null
 * @param value     the long value representation of a set of enum values
 * @param <E>       the type of the enumeration
 * @return a set of enum values
 */
public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {
    if (enumClass == null) {
        throw new IllegalArgumentException("EnumClass must be defined.");
    }
    final E[] constants = enumClass.getEnumConstants();
    if (constants != null && constants.length > 64) {
        throw new IllegalArgumentException("EnumClass is too big to be stored in a 64-bit value.");
    }
    final EnumSet results = EnumSet.noneOf(enumClass);
    if (constants != null && constants.length > 0) {
        for (E constant : constants) {
            if ((value & (1 << constant.ordinal())) != 0) {
                results.add(constant);
            }
        }
    }
    return results;
}