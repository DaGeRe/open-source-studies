/**                                                                                                    /**                                                                                                 
* Gets an accessible &lt;code&gt;Field&lt;/code&gt; by name breaking scope                             * Gets an accessible &lt;code&gt;Field&lt;/code&gt; by name breaking scope                          
* if requested. Superclasses/interfaces will be considered.                                            * if requested. Superclasses/interfaces will be considered.                                         
*                                                                                                      *                                                                                                   
* @param cls  the class to reflect, must not be null                                                   * @param cls  the class to reflect, must not be null                                                
* @param fieldName  the field name to obtain                                                           * @param fieldName  the field name to obtain                                                        
* @param forceAccess  whether to break scope restrictions using the                                    * @param forceAccess  whether to break scope restrictions using the                                 
*  &lt;code&gt;setAccessible&lt;/code&gt; method. &lt;code&gt;False&lt;/code&gt; will only             *  &lt;code&gt;setAccessible&lt;/code&gt; method. &lt;code&gt;False&lt;/code&gt; will only          
*  match public fields.                                                                                *  match public fields.                                                                             
* @return the Field object                                                                             * @return the Field object                                                                          
* @throws IllegalArgumentException if the class or field name is null                                  * @throws IllegalArgumentException if the class or field name is null                               
*/                                                                                                     */                                                                                                  
public static Field getField(final Class&lt;?&gt; cls, String fieldName, boolean forceAccess) {        public static Field getField(final Class&lt;?&gt; cls, String fieldName, boolean forceAccess) {     
if (cls == null) {                                                                                     if (cls == null) {                                                                                  
throw new IllegalArgumentException("The class must not be null");                                      throw new IllegalArgumentException("The class must not be null");                                   
}                                                                                                      }                                                                                                   
if (fieldName == null) {                                                                               if (fieldName == null) {                                                                            
throw new IllegalArgumentException("The field name must not be null");                                 throw new IllegalArgumentException("The field name must not be null");                              
}                                                                                                      }                                                                                                   
// Sun Java 1.3 has a bugged implementation of getField hence we write the                             // Sun Java 1.3 has a bugged implementation of getField hence we write the                          
// code ourselves                                                                                      // code ourselves                                                                                   
// getField() will return the Field object with the declaring class                                    // getField() will return the Field object with the declaring class                                 
// set correctly to the class that declares the field. Thus requesting the                             // set correctly to the class that declares the field. Thus requesting the                          
// field on a subclass will return the field from the superclass.                                      // field on a subclass will return the field from the superclass.                                   
//                                                                                                     //                                                                                                  
// priority order for lookup:                                                                          // priority order for lookup:                                                                       
// searchclass private/protected/package/public                                                        // searchclass private/protected/package/public                                                     
// superclass protected/package/public                                                                 // superclass protected/package/public                                                              
// private/different package blocks access to further superclasses                                     // private/different package blocks access to further superclasses                                  
// implementedinterface public                                                                         // implementedinterface public                                                                      
// check up the superclass hierarchy                                                                   // check up the superclass hierarchy                                                                
for (Class&lt;?&gt; acls = cls; acls != null; acls = acls.getSuperclass()) {                           for (Class&lt;?&gt; acls = cls; acls != null; acls = acls.getSuperclass()) {                        
try {                                                                                                  try {                                                                                               
Field field = acls.getDeclaredField(fieldName);                                                        Field field = acls.getDeclaredField(fieldName);                                                     
// getDeclaredField checks for non-public scopes as well                                               // getDeclaredField checks for non-public scopes as well                                            
// and it returns accurate results                                                                     // and it returns accurate results                                                                  
if (!Modifier.isPublic(field.getModifiers())) {                                                        if (!Modifier.isPublic(field.getModifiers())) {                                                     
if (forceAccess) {                                                                                     if (forceAccess) {                                                                                  
field.setAccessible(true);                                                                             field.setAccessible(true);                                                                          
} else {                                                                                               } else {                                                                                            
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return field;                                                                                          return field;                                                                                       
} catch (NoSuchFieldException ex) {                                                                    } catch (NoSuchFieldException ex) {                                                                 
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore                                                                                              // ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// check the public interface case. This must be manually searched for                                 // check the public interface case. This must be manually searched for                              
// incase there is a public supersuperclass field hidden by a private/package                          // incase there is a public supersuperclass field hidden by a private/package                       
// superclass field.                                                                                   // superclass field.                                                                                
Field match = null;                                                                                    Field match = null;                                                                                 
for (Iterator&lt;Class&lt;?&gt;&gt; intf = ClassUtils.getAllInterfaces(cls).iterator(); intf.hasNext | for (Class&lt;?&gt; class1 : ClassUtils.getAllInterfaces(cls)) {                                    
try {                                                                                                  try {                                                                                               
Field test = ((Class&lt;?&gt;) intf.next()).getField(fieldName);                                     | Field test = ((Class&lt;?&gt;) class1).getField(fieldName);                                         
if (match != null) {                                                                                   if (match != null) {                                                                                
throw new IllegalArgumentException("Reference to field " + fieldName + " is ambiguous relative to "    throw new IllegalArgumentException("Reference to field " + fieldName + " is ambiguous relative to " 
}                                                                                                      }                                                                                                   
match = test;                                                                                          match = test;                                                                                       
} catch (NoSuchFieldException ex) {                                                                    } catch (NoSuchFieldException ex) {                                                                 
// NOPMD                                                                                               // NOPMD                                                                                            
// ignore                                                                                              // ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return match;                                                                                          return match;                                                                                       
}                                                                                                      }                                                                                                   
