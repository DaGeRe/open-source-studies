/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Finds an accessible method that matches the given name and has compatible parameters.       * &lt;p&gt;Finds an accessible method that matches the given name and has compatible parameters.    
* Compatible parameters mean that every method parameter is assignable from                            * Compatible parameters mean that every method parameter is assignable from                         
* the given parameters.                                                                                * the given parameters.                                                                             
* In other words, it finds a method with the given name                                                * In other words, it finds a method with the given name                                             
* that will take the parameters given.&lt;p&gt;                                                        * that will take the parameters given.&lt;p&gt;                                                     
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method is used by                                                                      * &lt;p&gt;This method is used by                                                                   
* {@link                                                                                               * {@link                                                                                            
* #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.             * #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.          
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method can match primitive parameter by passing in wrapper classes.                    * &lt;p&gt;This method can match primitive parameter by passing in wrapper classes.                 
* For example, a &lt;code&gt;Boolean&lt;/code&gt; will match a primitive &lt;code&gt;boolean&lt;/cod   * For example, a &lt;code&gt;Boolean&lt;/code&gt; will match a primitive &lt;code&gt;boolean&lt;/cod
* parameter.                                                                                           * parameter.                                                                                        
*                                                                                                      *                                                                                                   
* @param cls find method in this class                                                                 * @param cls find method in this class                                                              
* @param methodName find method with this name                                                         * @param methodName find method with this name                                                      
* @param parameterTypes find method with most compatible parameters                                    * @param parameterTypes find method with most compatible parameters                                 
* @return The accessible method                                                                        * @return The accessible method                                                                     
*/                                                                                                     */                                                                                                  
public static Method getMatchingAccessibleMethod(Class&lt;?&gt; cls, String methodName, Class&lt;?&g   public static Method getMatchingAccessibleMethod(Class&lt;?&gt; cls, String methodName, Class&lt;?&g
try {                                                                                                  try {                                                                                               
Method method = cls.getMethod(methodName, parameterTypes);                                             Method method = cls.getMethod(methodName, parameterTypes);                                          
MemberUtils.setAccessibleWorkaround(method);                                                           MemberUtils.setAccessibleWorkaround(method);                                                        
return method;                                                                                         return method;                                                                                      
} catch (NoSuchMethodException e) {                                                                    } catch (NoSuchMethodException e) {                                                                 
// NOPMD - Swallow the exception                                                                       // NOPMD - Swallow the exception                                                                    
}                                                                                                      }                                                                                                   
// search through all methods                                                                          // search through all methods                                                                       
Method bestMatch = null;                                                                               Method bestMatch = null;                                                                            
Method[] methods = cls.getMethods();                                                                   Method[] methods = cls.getMethods();                                                                
for (int i = 0, size = methods.length; i &lt; size; i++) {                                           | for (Method method : methods) {                                                                     
if (methods[i].getName().equals(methodName)) {                                                       | if (method.getName().equals(methodName)) {                                                          
// compare parameters                                                                                  // compare parameters                                                                               
if (ClassUtils.isAssignable(parameterTypes, methods[i].getParameterTypes(), true)) {                 | if (ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)) {                    
// get accessible version of method                                                                    // get accessible version of method                                                                 
Method accessibleMethod = getAccessibleMethod(methods[i]);                                           | Method accessibleMethod = getAccessibleMethod(method);                                              
if (accessibleMethod != null) {                                                                        if (accessibleMethod != null) {                                                                     
if (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bes   if (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bes
bestMatch = accessibleMethod;                                                                          bestMatch = accessibleMethod;                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (bestMatch != null) {                                                                               if (bestMatch != null) {                                                                            
MemberUtils.setAccessibleWorkaround(bestMatch);                                                        MemberUtils.setAccessibleWorkaround(bestMatch);                                                     
}                                                                                                      }                                                                                                   
return bestMatch;                                                                                      return bestMatch;                                                                                   
}                                                                                                      }                                                                                                   
