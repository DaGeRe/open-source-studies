/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Parses a string representing a date by trying a variety of different parsers.&lt;/p&gt;     * &lt;p&gt;Parses a string representing a date by trying a variety of different parsers.&lt;/p&gt;  
*                                                                                                      *                                                                                                   
* &lt;p&gt;The parse will try each parse pattern in turn.                                              * &lt;p&gt;The parse will try each parse pattern in turn.                                           
* A parse is only deemed successful if it parses the whole of the input string.                        * A parse is only deemed successful if it parses the whole of the input string.                     
* If no parse patterns match, a ParseException is thrown.&lt;/p&gt;                                    * If no parse patterns match, a ParseException is thrown.&lt;/p&gt;                                 
*                                                                                                      *                                                                                                   
* @param str  the date to parse, not null                                                              * @param str  the date to parse, not null                                                           
* @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null                * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null             
* @param lenient Specify whether or not date/time parsing is to be lenient.                            * @param lenient Specify whether or not date/time parsing is to be lenient.                         
* @return the parsed date                                                                              * @return the parsed date                                                                           
* @throws IllegalArgumentException if the date string or pattern array is null                         * @throws IllegalArgumentException if the date string or pattern array is null                      
* @throws ParseException if none of the date patterns were suitable                                    * @throws ParseException if none of the date patterns were suitable                                 
* @see java.util.Calender#isLenient()                                                                  * @see java.util.Calender#isLenient()                                                               
*/                                                                                                     */                                                                                                  
private static Date parseDateWithLeniency(String str, String[] parsePatterns, boolean lenient) throw   private static Date parseDateWithLeniency(String str, String[] parsePatterns, boolean lenient) throw
if (str == null || parsePatterns == null) {                                                            if (str == null || parsePatterns == null) {                                                         
throw new IllegalArgumentException("Date and Patterns must not be null");                              throw new IllegalArgumentException("Date and Patterns must not be null");                           
}                                                                                                      }                                                                                                   
SimpleDateFormat parser = new SimpleDateFormat();                                                      SimpleDateFormat parser = new SimpleDateFormat();                                                   
parser.setLenient(lenient);                                                                            parser.setLenient(lenient);                                                                         
ParsePosition pos = new ParsePosition(0);                                                              ParsePosition pos = new ParsePosition(0);                                                           
for (int i = 0; i &lt; parsePatterns.length; i++) {                                                  | for (String parsePattern : parsePatterns) {                                                         
String pattern = parsePatterns[i];                                                                   | String pattern = parsePattern;                                                                      
// LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat                     // LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat                  
if (parsePatterns[i].endsWith("ZZ")) {                                                               | if (parsePattern.endsWith("ZZ")) {                                                                  
pattern = pattern.substring(0, pattern.length() - 1);                                                  pattern = pattern.substring(0, pattern.length() - 1);                                               
}                                                                                                      }                                                                                                   
parser.applyPattern(pattern);                                                                          parser.applyPattern(pattern);                                                                       
pos.setIndex(0);                                                                                       pos.setIndex(0);                                                                                    
String str2 = str;                                                                                     String str2 = str;                                                                                  
// LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException     // LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException  
if (parsePatterns[i].endsWith("ZZ")) {                                                               | if (parsePattern.endsWith("ZZ")) {                                                                  
str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2");                                       str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2");                                    
}                                                                                                      }                                                                                                   
Date date = parser.parse(str2, pos);                                                                   Date date = parser.parse(str2, pos);                                                                
if (date != null && pos.getIndex() == str2.length()) {                                                 if (date != null && pos.getIndex() == str2.length()) {                                              
return date;                                                                                           return date;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
throw new ParseException("Unable to parse the date: " + str, -1);                                      throw new ParseException("Unable to parse the date: " + str, -1);                                   
}                                                                                                      }                                                                                                   
