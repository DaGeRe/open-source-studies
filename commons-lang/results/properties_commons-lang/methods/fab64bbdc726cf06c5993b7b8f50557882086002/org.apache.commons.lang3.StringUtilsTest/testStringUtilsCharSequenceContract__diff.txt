// Methods on StringUtils that are immutable in spirit (i.e. calculate the length)                     // Methods on StringUtils that are immutable in spirit (i.e. calculate the length)                  
// should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)          // should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)       
// should take a String or String[] parameter and return String or String[].                           // should take a String or String[] parameter and return String or String[].                        
// This test enforces that this is done.                                                               // This test enforces that this is done.                                                            
public void testStringUtilsCharSequenceContract() {                                                    public void testStringUtilsCharSequenceContract() {                                                 
Class&lt;StringUtils&gt; c = StringUtils.class;                                                        Class&lt;StringUtils&gt; c = StringUtils.class;                                                     
Method[] methods = c.getMethods();                                                                     Method[] methods = c.getMethods();                                                                  
for (int i = 0; i &lt; methods.length; i++) {                                                        | for (Method m : methods) {                                                                          
Method m = methods[i];                                                                               |                                                                                                     
if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {                        if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {                     
// Assume this is mutable and ensure the first parameter is not CharSequence.                          // Assume this is mutable and ensure the first parameter is not CharSequence.                       
// It may be String or it may be something else (String[], Object, Object[]) so                        // It may be String or it may be something else (String[], Object, Object[]) so                     
// don't actively test for that.                                                                       // don't actively test for that.                                                                    
Class&lt;?&gt;[] params = m.getParameterTypes();                                                       Class&lt;?&gt;[] params = m.getParameterTypes();                                                    
if (params.length &gt; 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class))    if (params.length &gt; 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) 
fail("The method " + m + " appears to be mutable in spirit and therefore must not accept a CharSeque   fail("The method " + m + " appears to be mutable in spirit and therefore must not accept a CharSeque
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// Assume this is immutable in spirit and ensure the first parameter is not String.                    // Assume this is immutable in spirit and ensure the first parameter is not String.                 
// As above, it may be something other than CharSequence.                                              // As above, it may be something other than CharSequence.                                           
Class&lt;?&gt;[] params = m.getParameterTypes();                                                       Class&lt;?&gt;[] params = m.getParameterTypes();                                                    
if (params.length &gt; 0 && (params[0] == String.class || params[0] == String[].class)) {              if (params.length &gt; 0 && (params[0] == String.class || params[0] == String[].class)) {           
fail("The method " + m + " appears to be immutable in spirit and therefore must not accept a String"   fail("The method " + m + " appears to be immutable in spirit and therefore must not accept a String"
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
