public void testChomp() {                                                                              public void testChomp() {                                                                           
String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_   String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_
for (int i = 0; i &lt; chompCases.length; i++) {                                                     | for (String[] chompCase : chompCases) {                                                             
String original = chompCases[i][0];                                                                  | String original = chompCase[0];                                                                     
String expectedResult = chompCases[i][1];                                                            | String expectedResult = chompCase[1];                                                               
assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original));                     assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original));                  
}                                                                                                      }                                                                                                   
assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar"));               assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar"));            
assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz"));            assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz"));         
assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo"));                assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo"));             
assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", ""));               assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", ""));            
assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null));             assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null));          
assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo"));                        assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo"));                     
assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null));                         assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null));                      
assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", ""));                           assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", ""));                        
assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo"));                    assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo"));                 
assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null));                     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null));                  
assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, ""));                       assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, ""));                    
assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo"));                     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo"));                  
assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo"));                   assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo"));                
assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo"));                assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo"));             
}                                                                                                      }                                                                                                   
