                                                                                                     | /**                                                                                                 
                                                                                                     | * &lt;p&gt;Compares two &lt;code&gt;Object&lt;/code&gt;s via reflection.&lt;/p&gt;                  
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;Fields can be private, thus &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt;      
                                                                                                     | * is used to bypass normal access control checks. This will fail under a                            
                                                                                                     | * security manager unless the appropriate permissions are set.&lt;/p&gt;                            
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;ul&gt;                                                                                        
                                                                                                     | * &lt;li&gt;Static fields will not be compared&lt;/li&gt;                                           
                                                                                                     | * &lt;li&gt;If the &lt;code&gt;compareTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,     
                                                                                                     | *     compares transient members.  Otherwise ignores them, as they                                  
                                                                                                     | *     are likely derived fields.&lt;/li&gt;                                                         
                                                                                                     | * &lt;li&gt;Compares superclass fields up to and including &lt;code&gt;reflectUpToClass&lt;/code&gt;
                                                                                                     | *     If &lt;code&gt;reflectUpToClass&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, compares all su
                                                                                                     | * &lt;/ul&gt;                                                                                       
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;If both &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are &lt;code&gt;nul
                                                                                                     | * they are considered equal.&lt;/p&gt;                                                              
                                                                                                     | *                                                                                                   
                                                                                                     | * @param lhs  left-hand object                                                                      
                                                                                                     | * @param rhs  right-hand object                                                                     
                                                                                                     | * @param compareTransients  whether to compare transient fields                                     
                                                                                                     | * @param reflectUpToClass  last superclass for which fields are compared                            
                                                                                                     | * @param excludeFields  fields to exclude                                                           
                                                                                                     | * @return a negative integer, zero, or a positive integer as &lt;code&gt;lhs&lt;/code&gt;           
                                                                                                     | *  is less than, equal to, or greater than &lt;code&gt;rhs&lt;/code&gt;                             
                                                                                                     | * @throws NullPointerException  if either &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&g
                                                                                                     | *  (but not both) is &lt;code&gt;null&lt;/code&gt;                                                  
                                                                                                     | * @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible          
                                                                                                     | *  with &lt;code&gt;lhs&lt;/code&gt;                                                                
                                                                                                     | * @since 2.2 (2.0 as &lt;code&gt;reflectionCompare(Object, Object, boolean, Class)&lt;/code&gt;)    
                                                                                                     | */                                                                                                  
                                                                                                     | public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class&lt;?&gt
                                                                                                     | if (lhs == rhs) {                                                                                   
                                                                                                     | return 0;                                                                                           
                                                                                                     | }                                                                                                   
                                                                                                     | if (lhs == null || rhs == null) {                                                                   
                                                                                                     | throw new NullPointerException();                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | Class&lt;?&gt; lhsClazz = lhs.getClass();                                                           
                                                                                                     | if (!lhsClazz.isInstance(rhs)) {                                                                    
                                                                                                     | throw new ClassCastException();                                                                     
                                                                                                     | }                                                                                                   
                                                                                                     | CompareToBuilder compareToBuilder = new CompareToBuilder();                                         
                                                                                                     | reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);           
                                                                                                     | while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {                          
                                                                                                     | lhsClazz = lhsClazz.getSuperclass();                                                                
                                                                                                     | reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);           
                                                                                                     | }                                                                                                   
                                                                                                     | return compareToBuilder.toComparison();                                                             
                                                                                                     | }                                                                                                   
