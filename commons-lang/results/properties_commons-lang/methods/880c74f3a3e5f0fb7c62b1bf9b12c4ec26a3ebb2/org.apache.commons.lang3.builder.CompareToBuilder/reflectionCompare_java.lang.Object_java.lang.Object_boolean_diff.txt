/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Compares two &lt;code&gt;Object&lt;/code&gt;s via reflection.&lt;/p&gt;                     * &lt;p&gt;Compares two &lt;code&gt;Object&lt;/code&gt;s via reflection.&lt;/p&gt;                  
*                                                                                                      *                                                                                                   
* &lt;p&gt;Fields can be private, thus &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt;         * &lt;p&gt;Fields can be private, thus &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt;      
* is used to bypass normal access control checks. This will fail under a                               * is used to bypass normal access control checks. This will fail under a                            
* security manager unless the appropriate permissions are set.&lt;/p&gt;                               * security manager unless the appropriate permissions are set.&lt;/p&gt;                            
*                                                                                                      *                                                                                                   
* &lt;ul&gt;                                                                                           * &lt;ul&gt;                                                                                        
* &lt;li&gt;Static fields will not be compared&lt;/li&gt;                                              * &lt;li&gt;Static fields will not be compared&lt;/li&gt;                                           
* &lt;li&gt;If &lt;code&gt;compareTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,            * &lt;li&gt;If &lt;code&gt;compareTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,         
*     compares transient members.  Otherwise ignores them, as they                                     *     compares transient members.  Otherwise ignores them, as they                                  
*     are likely derived fields.&lt;/li&gt;                                                            *     are likely derived fields.&lt;/li&gt;                                                         
* &lt;li&gt;Superclass fields will be compared&lt;/li&gt;                                              * &lt;li&gt;Superclass fields will be compared&lt;/li&gt;                                           
* &lt;/ul&gt;                                                                                          * &lt;/ul&gt;                                                                                       
*                                                                                                      *                                                                                                   
* &lt;p&gt;If both &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are &lt;code&gt;nul   * &lt;p&gt;If both &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are &lt;code&gt;nul
* they are considered equal.&lt;/p&gt;                                                                 * they are considered equal.&lt;/p&gt;                                                              
*                                                                                                      *                                                                                                   
* @param lhs  left-hand object                                                                         * @param lhs  left-hand object                                                                      
* @param rhs  right-hand object                                                                        * @param rhs  right-hand object                                                                     
* @param compareTransients  whether to compare transient fields                                        * @param compareTransients  whether to compare transient fields                                     
* @return a negative integer, zero, or a positive integer as &lt;code&gt;lhs&lt;/code&gt;              * @return a negative integer, zero, or a positive integer as &lt;code&gt;lhs&lt;/code&gt;           
*  is less than, equal to, or greater than &lt;code&gt;rhs&lt;/code&gt;                                *  is less than, equal to, or greater than &lt;code&gt;rhs&lt;/code&gt;                             
* @throws NullPointerException  if either &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&g   * @throws NullPointerException  if either &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&g
*  (but not both) is &lt;code&gt;null&lt;/code&gt;                                                     *  (but not both) is &lt;code&gt;null&lt;/code&gt;                                                  
* @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible             * @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible          
*  with &lt;code&gt;lhs&lt;/code&gt;                                                                   *  with &lt;code&gt;lhs&lt;/code&gt;                                                                
*/                                                                                                     */                                                                                                  
public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients) {               public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients) {            
return reflectionCompare(lhs, rhs, compareTransients, null, null);                                   | return reflectionCompare(lhs, rhs, compareTransients, null);                                        
}                                                                                                      }                                                                                                   
