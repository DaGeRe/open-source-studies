/**                                                                                                    /**                                                                                                 
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* This method uses reflection to build a valid hash code.                                              * This method uses reflection to build a valid hash code.                                           
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields.    * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. 
* throw a security exception if run under a security manager, if the permissions are not set up corr   * throw a security exception if run under a security manager, if the permissions are not set up corr
* also not as efficient as testing explicitly.                                                         * also not as efficient as testing explicitly.                                                      
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* If the TestTransients parameter is set to &lt;code&gt;true&lt;/code&gt;, transient members will be   * If the TestTransients parameter is set to &lt;code&gt;true&lt;/code&gt;, transient members will be
* are ignored, as they are likely derived fields, and not part of the value of the &lt;code&gt;Objec   * are ignored, as they are likely derived fields, and not part of the value of the &lt;code&gt;Objec
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Static fields will not be included. Superclass fields will be included up to and including the spe   * Static fields will not be included. Superclass fields will be included up to and including the spe
* superclass. A null superclass is treated as java.lang.Object.                                        * superclass. A null superclass is treated as java.lang.Object.                                     
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different fo   * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different fo
* however this is not vital. Prime numbers are preferred, especially for the multiplier.               * however this is not vital. Prime numbers are preferred, especially for the multiplier.            
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* @param &lt;T&gt;                                                                                     * @param &lt;T&gt;                                                                                  
*            the type of the object involved                                                           *            the type of the object involved                                                        
* @param initialNonZeroOddNumber                                                                       * @param initialNonZeroOddNumber                                                                    
*            a non-zero, odd number used as the initial value                                          *            a non-zero, odd number used as the initial value                                       
* @param multiplierNonZeroOddNumber                                                                    * @param multiplierNonZeroOddNumber                                                                 
*            a non-zero, odd number used as the multiplier                                             *            a non-zero, odd number used as the multiplier                                          
* @param object                                                                                        * @param object                                                                                     
*            the Object to create a &lt;code&gt;hashCode&lt;/code&gt; for                              *            the Object to create a &lt;code&gt;hashCode&lt;/code&gt; for                           
* @param testTransients                                                                                * @param testTransients                                                                             
*            whether to include transient fields                                                       *            whether to include transient fields                                                    
* @param reflectUpToClass                                                                              * @param reflectUpToClass                                                                           
*            the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;         *            the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;      
* @param excludeFields                                                                                 * @param excludeFields                                                                              
*            array of field names to exclude from use in calculation of hash code                      *            array of field names to exclude from use in calculation of hash code                   
* @return int hash code                                                                                * @return int hash code                                                                             
* @throws IllegalArgumentException                                                                     * @throws IllegalArgumentException                                                                  
*             if the Object is &lt;code&gt;null&lt;/code&gt;                                           *             if the Object is &lt;code&gt;null&lt;/code&gt;                                        
* @throws IllegalArgumentException                                                                     * @throws IllegalArgumentException                                                                  
*             if the number is zero or even                                                            *             if the number is zero or even                                                         
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static &lt;T&gt; int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOdd | public static &lt;T&gt; int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOdd
if (object == null) {                                                                                  if (object == null) {                                                                               
throw new IllegalArgumentException("The object to build a hash code for must not be null");            throw new IllegalArgumentException("The object to build a hash code for must not be null");         
}                                                                                                      }                                                                                                   
HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);    HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); 
Class&lt;?&gt; clazz = object.getClass();                                                              Class&lt;?&gt; clazz = object.getClass();                                                           
reflectionAppend(object, clazz, builder, testTransients, excludeFields);                               reflectionAppend(object, clazz, builder, testTransients, excludeFields);                            
while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {                                   while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {                                
clazz = clazz.getSuperclass();                                                                         clazz = clazz.getSuperclass();                                                                      
reflectionAppend(object, clazz, builder, testTransients, excludeFields);                               reflectionAppend(object, clazz, builder, testTransients, excludeFields);                            
}                                                                                                      }                                                                                                   
return builder.toHashCode();                                                                           return builder.toHashCode();                                                                        
}                                                                                                      }                                                                                                   
