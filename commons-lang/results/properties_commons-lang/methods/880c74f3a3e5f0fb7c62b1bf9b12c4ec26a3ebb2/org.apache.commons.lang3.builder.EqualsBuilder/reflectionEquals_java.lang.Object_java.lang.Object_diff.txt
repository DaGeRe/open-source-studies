// -------------------------------------------------------------------------                         |                                                                                                     
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s        * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s     
* are equal.&lt;/p&gt;                                                                                 * are equal.&lt;/p&gt;                                                                              
*                                                                                                      *                                                                                                   
* &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private   * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
* fields. This means that it will throw a security exception if run under                              * fields. This means that it will throw a security exception if run under                           
* a security manager, if the permissions are not set up correctly. It is also                          * a security manager, if the permissions are not set up correctly. It is also                       
* not as efficient as testing explicitly.&lt;/p&gt;                                                    * not as efficient as testing explicitly.&lt;/p&gt;                                                 
*                                                                                                      *                                                                                                   
* &lt;p&gt;Transient members will be not be tested, as they are likely derived                         * &lt;p&gt;Transient members will be not be tested, as they are likely derived                      
* fields, and not part of the value of the Object.&lt;/p&gt;                                           * fields, and not part of the value of the Object.&lt;/p&gt;                                        
*                                                                                                      *                                                                                                   
* &lt;p&gt;Static fields will not be tested. Superclass fields will be included.&lt;/p&gt;             * &lt;p&gt;Static fields will not be tested. Superclass fields will be included.&lt;/p&gt;          
*                                                                                                      *                                                                                                   
* @param lhs  &lt;code&gt;this&lt;/code&gt; object                                                     * @param lhs  &lt;code&gt;this&lt;/code&gt; object                                                  
* @param rhs  the other object                                                                         * @param rhs  the other object                                                                      
                                                                                                     | * @param excludeFields  array of field names to exclude from testing                                
* @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.                         * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.                      
*/                                                                                                     */                                                                                                  
public static boolean reflectionEquals(Object lhs, Object rhs) {                                     | public static boolean reflectionEquals(Object lhs, Object rhs, String... excludeFields) {           
return reflectionEquals(lhs, rhs, false, null, null);                                                | return reflectionEquals(lhs, rhs, false, null, excludeFields);                                      
}                                                                                                      }                                                                                                   
