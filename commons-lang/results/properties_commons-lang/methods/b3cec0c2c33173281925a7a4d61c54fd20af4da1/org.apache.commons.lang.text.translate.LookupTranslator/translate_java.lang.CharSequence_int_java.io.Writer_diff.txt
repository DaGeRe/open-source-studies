/**                                                                                                    /**                                                                                                 
* {@inheritDoc}                                                                                        * {@inheritDoc}                                                                                     
*/                                                                                                     */                                                                                                  
                                                                                                     | @Override                                                                                           
public int translate(CharSequence input, int index, Writer out) throws IOException {                   public int translate(CharSequence input, int index, Writer out) throws IOException {                
int max = longest;                                                                                     int max = longest;                                                                                  
if (index + longest &gt; input.length()) {                                                             if (index + longest &gt; input.length()) {                                                          
max = input.length() - index;                                                                          max = input.length() - index;                                                                       
}                                                                                                      }                                                                                                   
// descend so as to get a greedy algorithm                                                             // descend so as to get a greedy algorithm                                                          
for (int i = max; i &gt;= shortest; i--) {                                                             for (int i = max; i &gt;= shortest; i--) {                                                          
CharSequence subSeq = input.subSequence(index, index + i);                                             CharSequence subSeq = input.subSequence(index, index + i);                                          
CharSequence result = lookupMap.get(subSeq);                                                           CharSequence result = lookupMap.get(subSeq);                                                        
if (result != null) {                                                                                  if (result != null) {                                                                               
out.write(result.toString());                                                                          out.write(result.toString());                                                                       
return i;                                                                                              return i;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return 0;                                                                                              return 0;                                                                                           
}                                                                                                      }                                                                                                   
