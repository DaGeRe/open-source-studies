/*
     * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()
     * we are in the process of calculating.
     * 
     * So we generate a one-to-one mapping from the original object to a new object.
     * 
     * Now HashSet uses equals() to determine if two elements with the same hashcode really
     * are equal, so we also need to ensure that the replacement objects are only equal
     * if the original objects are identical.
     * 
     * The original implementation (2.4 and before) used the System.indentityHashCode()
     * method - however this is not guaranteed to generate unique ids (e.g. LANG-459)
     *  
     * We now use the IDKey helper class (adapted from org.apache.axis.utils.IDKey)
     * to disambiguate the duplicate ids.
     */
/**
 * <p>
 * Returns the registry of object pairs being traversed by the reflection
 * methods in the current thread.
 * </p>
 *
 * @return Set the registry of objects being traversed
 * @since 3.0
 */
static Set<Pair<IDKey, IDKey>> getRegistry() {
    return REGISTRY.get();
}