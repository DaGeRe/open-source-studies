/**
 * <p>Splits the provided text into an array, separator string specified.
 * Returns a maximum of {@code max} substrings.</p>
 *
 * <p>The separator(s) will not be included in the returned String array.
 * Adjacent separators are treated as one separator.</p>
 *
 * <p>A {@code null} input String returns {@code null}.
 * A {@code null} separator splits on whitespace.</p>
 *
 * <pre>
 * StringUtils.splitByWholeSeparator(null, *, *)               = null
 * StringUtils.splitByWholeSeparator("", *, *)                 = []
 * StringUtils.splitByWholeSeparator("ab de fg", null, 0)      = ["ab", "de", "fg"]
 * StringUtils.splitByWholeSeparator("ab   de fg", null, 0)    = ["ab", "de", "fg"]
 * StringUtils.splitByWholeSeparator("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"]
 * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"]
 * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"]
 * </pre>
 *
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,
 *  {@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returned
 *  array. A zero or negative value implies no limit.
 * @return an array of parsed Strings, {@code null} if null String was input
 */
public static String[] splitByWholeSeparator(String str, String separator, int max) {
    return splitByWholeSeparatorWorker(str, separator, max, false);
}