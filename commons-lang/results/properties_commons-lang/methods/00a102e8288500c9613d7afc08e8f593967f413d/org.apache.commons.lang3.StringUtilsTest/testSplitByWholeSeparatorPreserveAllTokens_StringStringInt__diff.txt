@Test                                                                                                  @Test                                                                                               
public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {                             public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {                          
assertEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1));               | assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1));         
assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length);               assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length);            
// test whitespace                                                                                     // test whitespace                                                                                  
String input = "ab   de fg";                                                                           String input = "ab   de fg";                                                                        
String[] expected = new String[] { "ab", "", "", "de", "fg" };                                         String[] expected = new String[] { "ab", "", "", "de", "fg" };                                      
String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1);                 String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1);              
assertEquals(expected.length, actual.length);                                                          assertEquals(expected.length, actual.length);                                                       
for (int i = 0; i &lt; actual.length; i += 1) {                                                        for (int i = 0; i &lt; actual.length; i += 1) {                                                     
assertEquals(expected[i], actual[i]);                                                                  assertEquals(expected[i], actual[i]);                                                               
}                                                                                                      }                                                                                                   
// test delimiter singlechar                                                                           // test delimiter singlechar                                                                        
input = "1::2:::3::::4";                                                                               input = "1::2:::3::::4";                                                                            
expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" };                                expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" };                             
actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1);                           actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1);                        
assertEquals(expected.length, actual.length);                                                          assertEquals(expected.length, actual.length);                                                       
for (int i = 0; i &lt; actual.length; i += 1) {                                                        for (int i = 0; i &lt; actual.length; i += 1) {                                                     
assertEquals(expected[i], actual[i]);                                                                  assertEquals(expected[i], actual[i]);                                                               
}                                                                                                      }                                                                                                   
// test delimiter multichar                                                                            // test delimiter multichar                                                                         
input = "1::2:::3::::4";                                                                               input = "1::2:::3::::4";                                                                            
expected = new String[] { "1", "2", ":3", "", "4" };                                                   expected = new String[] { "1", "2", ":3", "", "4" };                                                
actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1);                          actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1);                       
assertEquals(expected.length, actual.length);                                                          assertEquals(expected.length, actual.length);                                                       
for (int i = 0; i &lt; actual.length; i += 1) {                                                        for (int i = 0; i &lt; actual.length; i += 1) {                                                     
assertEquals(expected[i], actual[i]);                                                                  assertEquals(expected[i], actual[i]);                                                               
}                                                                                                      }                                                                                                   
// test delimiter char with max                                                                        // test delimiter char with max                                                                     
input = "1::2::3:4";                                                                                   input = "1::2::3:4";                                                                                
expected = new String[] { "1", "", "2", ":3:4" };                                                      expected = new String[] { "1", "", "2", ":3:4" };                                                   
actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4);                            actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4);                         
assertEquals(expected.length, actual.length);                                                          assertEquals(expected.length, actual.length);                                                       
for (int i = 0; i &lt; actual.length; i += 1) {                                                        for (int i = 0; i &lt; actual.length; i += 1) {                                                     
assertEquals(expected[i], actual[i]);                                                                  assertEquals(expected[i], actual[i]);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
