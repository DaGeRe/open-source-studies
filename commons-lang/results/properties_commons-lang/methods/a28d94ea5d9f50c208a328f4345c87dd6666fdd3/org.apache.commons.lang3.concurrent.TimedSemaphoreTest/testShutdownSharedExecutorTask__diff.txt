/**                                                                                                    /**                                                                                                 
* Tests the shutdown() method for a shared executor after the task was                                 * Tests the shutdown() method for a shared executor after the task was                              
* started. In this case the task must be canceled.                                                     * started. In this case the task must be canceled.                                                  
*/                                                                                                     */                                                                                                  
@Test                                                                                                  @Test                                                                                               
public void testShutdownSharedExecutorTask() throws InterruptedException {                             public void testShutdownSharedExecutorTask() throws InterruptedException {                          
ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);                ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);             
ScheduledFuture&lt;?&gt; future = EasyMock.createMock(ScheduledFuture.class);                          ScheduledFuture&lt;?&gt; future = EasyMock.createMock(ScheduledFuture.class);                       
prepareStartTimer(service, future);                                                                    prepareStartTimer(service, future);                                                                 
EasyMock.expect(future.cancel(false)).andReturn(true);                                               | EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);                     
EasyMock.replay(service, future);                                                                      EasyMock.replay(service, future);                                                                   
TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, LIMIT);           TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, LIMIT);        
semaphore.acquire();                                                                                   semaphore.acquire();                                                                                
semaphore.shutdown();                                                                                  semaphore.shutdown();                                                                               
assertTrue("Not shutdown", semaphore.isShutdown());                                                    assertTrue("Not shutdown", semaphore.isShutdown());                                                 
EasyMock.verify(service, future);                                                                      EasyMock.verify(service, future);                                                                   
}                                                                                                      }                                                                                                   
