/**
 * <p>Uncapitalizes all the whitespace separated words in a String.
 * Only the first letter of each word is changed.</p>
 *
 * <p>The delimiters represent a set of characters understood to separate words.
 * The first string character and the first non-delimiter character after a
 * delimiter will be uncapitalized. </p>
 *
 * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
 * A <code>null</code> input String returns <code>null</code>.</p>
 *
 * <pre>
 * WordUtils.uncapitalize(null, *)            = null
 * WordUtils.uncapitalize("", *)              = ""
 * WordUtils.uncapitalize(*, null)            = *
 * WordUtils.uncapitalize(*, new char[0])     = *
 * WordUtils.uncapitalize("I AM.FINE", {'.'}) = "i AM.fINE"
 * </pre>
 *
 * @param str  the String to uncapitalize, may be null
 * @param delimiters  set of characters to determine uncapitalization, null means whitespace
 * @return uncapitalized String, <code>null</code> if null String input
 * @see #capitalize(String)
 * @since 2.1
 */
public static String uncapitalize(String str, char[] delimiters) {
    int delimLen = (delimiters == null ? -1 : delimiters.length);
    if (str == null || str.length() == 0 || delimLen == 0) {
        return str;
    }
    int strLen = str.length();
    StringBuffer buffer = new StringBuffer(strLen);
    boolean uncapitalizeNext = true;
    for (int i = 0; i < strLen; i++) {
        char ch = str.charAt(i);
        if (isDelimiter(ch, delimiters)) {
            buffer.append(ch);
            uncapitalizeNext = true;
        } else if (uncapitalizeNext) {
            buffer.append(Character.toLowerCase(ch));
            uncapitalizeNext = false;
        } else {
            buffer.append(ch);
        }
    }
    return buffer.toString();
}