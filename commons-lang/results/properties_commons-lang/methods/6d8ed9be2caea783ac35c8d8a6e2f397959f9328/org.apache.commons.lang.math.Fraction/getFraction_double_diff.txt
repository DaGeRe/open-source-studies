/**
 * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>
 *
 * <p>This method uses the <a href="http://archives.math.utk.edu/articles/atuyl/confrac/">
 *  continued fraction algorithm</a>, computing a maximum of
 *  25 convergents and bounding the denominator by 10,000.</p>
 *
 * @param value  the double value to convert
 * @return a new fraction instance that is close to the value
 * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code>
 *  or <code>value = NaN</code>
 * @throws ArithmeticException if the calculated denominator is <code>zero</code>
 * @throws ArithmeticException if the the algorithm does not converge
 */
public static Fraction getFraction(double value) {
    int sign = (value < 0 ? -1 : 1);
    value = Math.abs(value);
    if (value > Integer.MAX_VALUE || Double.isNaN(value)) {
        throw new ArithmeticException("The value must not be greater than Integer.MAX_VALUE or NaN");
    }
    int wholeNumber = (int) value;
    value -= wholeNumber;
    // the pre-previous
    int numer0 = 0;
    // the pre-previous
    int denom0 = 1;
    // the previous
    int numer1 = 1;
    // the previous
    int denom1 = 0;
    // the current, setup in calculation
    int numer2 = 0;
    // the current, setup in calculation
    int denom2 = 0;
    int a1 = (int) value;
    int a2 = 0;
    double x1 = 1;
    double x2 = 0;
    double y1 = value - a1;
    double y2 = 0;
    double delta1, delta2 = Double.MAX_VALUE;
    double fraction;
    int i = 1;
    // System.out.println("---");
    do {
        delta1 = delta2;
        a2 = (int) (x1 / y1);
        x2 = y1;
        y2 = x1 - a2 * y1;
        numer2 = a1 * numer1 + numer0;
        denom2 = a1 * denom1 + denom0;
        fraction = (double) numer2 / (double) denom2;
        delta2 = Math.abs(value - fraction);
        // System.out.println(numer2 + " " + denom2 + " " + fraction + " " + delta2 + " " + y1);
        a1 = a2;
        x1 = x2;
        y1 = y2;
        numer0 = numer1;
        denom0 = denom1;
        numer1 = numer2;
        denom1 = denom2;
        i++;
        // System.out.println(">>" + delta1 +" "+ delta2+" "+(delta1 > delta2)+" "+i+" "+denom2);
    } while ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25));
    if (i == 25) {
        throw new ArithmeticException("Unable to convert double to fraction");
    }
    return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);
}