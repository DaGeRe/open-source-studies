/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Gets the fraction as a proper &lt;code&gt;String&lt;/code&gt; in the format X Y/Z.&lt;/p&   * &lt;p&gt;Gets the fraction as a proper &lt;code&gt;String&lt;/code&gt; in the format X Y/Z.&lt;/p&
*                                                                                                      *                                                                                                   
* &lt;p&gt;The format used in '&lt;i&gt;wholeNumber&lt;/i&gt; &lt;i&gt;numerator&lt;/i&gt;/&lt;i&gt;   * &lt;p&gt;The format used in '&lt;i&gt;wholeNumber&lt;/i&gt; &lt;i&gt;numerator&lt;/i&gt;/&lt;i&gt;
* If the whole number is zero it will be ommitted. If the numerator is zero,                           * If the whole number is zero it will be ommitted. If the numerator is zero,                        
* only the whole number is returned.&lt;/p&gt;                                                         * only the whole number is returned.&lt;/p&gt;                                                      
*                                                                                                      *                                                                                                   
* @return a &lt;code&gt;String&lt;/code&gt; form of the fraction                                       * @return a &lt;code&gt;String&lt;/code&gt; form of the fraction                                    
*/                                                                                                     */                                                                                                  
public String toProperString() {                                                                       public String toProperString() {                                                                    
if (toProperString == null) {                                                                          if (toProperString == null) {                                                                       
if (numerator == 0) {                                                                                  if (numerator == 0) {                                                                               
toProperString = "0";                                                                                  toProperString = "0";                                                                               
} else if (numerator == denominator) {                                                                 } else if (numerator == denominator) {                                                              
toProperString = "1";                                                                                  toProperString = "1";                                                                               
} else if (numerator == -1 * denominator) {                                                            } else if (numerator == -1 * denominator) {                                                         
toProperString = "-1";                                                                                 toProperString = "-1";                                                                              
} else if ((numerator &gt; 0 ? -numerator : numerator) &lt; -denominator) {                            } else if ((numerator &gt; 0 ? -numerator : numerator) &lt; -denominator) {                         
// note that we do the magnitude comparison test above with                                            // note that we do the magnitude comparison test above with                                         
// NEGATIVE (not positive) numbers, since negative numbers                                             // NEGATIVE (not positive) numbers, since negative numbers                                          
// have a larger range.  otherwise numerator==Integer.MIN_VALUE                                        // have a larger range.  otherwise numerator==Integer.MIN_VALUE                                     
// is handled incorrectly.                                                                             // is handled incorrectly.                                                                          
int properNumerator = getProperNumerator();                                                            int properNumerator = getProperNumerator();                                                         
if (properNumerator == 0) {                                                                            if (properNumerator == 0) {                                                                         
toProperString = Integer.toString(getProperWhole());                                                   toProperString = Integer.toString(getProperWhole());                                                
} else {                                                                                               } else {                                                                                            
toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).a | toProperString = new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).to | toProperString = new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).t
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return toProperString;                                                                                 return toProperString;                                                                              
}                                                                                                      }                                                                                                   
