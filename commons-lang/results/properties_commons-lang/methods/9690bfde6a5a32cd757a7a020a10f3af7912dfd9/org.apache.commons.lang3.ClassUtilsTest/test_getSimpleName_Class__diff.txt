public void test_getSimpleName_Class() {                                                               public void test_getSimpleName_Class() {                                                            
assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class));                                assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class));                             
assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class));                                      assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class));                                   
assertEquals("", ClassUtils.getSimpleName((Class&lt;?&gt;) null));                                     assertEquals("", ClassUtils.getSimpleName((Class&lt;?&gt;) null));                                  
// LANG-535                                                                                            // LANG-535                                                                                         
assertEquals("String[]", ClassUtils.getSimpleName(String[].class));                                    assertEquals("String[]", ClassUtils.getSimpleName(String[].class));                                 
assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class));                                  assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class));                               
// Primitives                                                                                          // Primitives                                                                                       
assertEquals("boolean", ClassUtils.getSimpleName(boolean.class));                                      assertEquals("boolean", ClassUtils.getSimpleName(boolean.class));                                   
assertEquals("byte", ClassUtils.getSimpleName(byte.class));                                            assertEquals("byte", ClassUtils.getSimpleName(byte.class));                                         
assertEquals("char", ClassUtils.getSimpleName(char.class));                                            assertEquals("char", ClassUtils.getSimpleName(char.class));                                         
assertEquals("short", ClassUtils.getSimpleName(short.class));                                          assertEquals("short", ClassUtils.getSimpleName(short.class));                                       
assertEquals("int", ClassUtils.getSimpleName(int.class));                                              assertEquals("int", ClassUtils.getSimpleName(int.class));                                           
assertEquals("long", ClassUtils.getSimpleName(long.class));                                            assertEquals("long", ClassUtils.getSimpleName(long.class));                                         
assertEquals("float", ClassUtils.getSimpleName(float.class));                                          assertEquals("float", ClassUtils.getSimpleName(float.class));                                       
assertEquals("double", ClassUtils.getSimpleName(double.class));                                        assertEquals("double", ClassUtils.getSimpleName(double.class));                                     
// Primitive Arrays                                                                                    // Primitive Arrays                                                                                 
assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class));                                  assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class));                               
assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class));                                        assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class));                                     
assertEquals("char[]", ClassUtils.getSimpleName(char[].class));                                        assertEquals("char[]", ClassUtils.getSimpleName(char[].class));                                     
assertEquals("short[]", ClassUtils.getSimpleName(short[].class));                                      assertEquals("short[]", ClassUtils.getSimpleName(short[].class));                                   
assertEquals("int[]", ClassUtils.getSimpleName(int[].class));                                          assertEquals("int[]", ClassUtils.getSimpleName(int[].class));                                       
assertEquals("long[]", ClassUtils.getSimpleName(long[].class));                                        assertEquals("long[]", ClassUtils.getSimpleName(long[].class));                                     
assertEquals("float[]", ClassUtils.getSimpleName(float[].class));                                      assertEquals("float[]", ClassUtils.getSimpleName(float[].class));                                   
assertEquals("double[]", ClassUtils.getSimpleName(double[].class));                                    assertEquals("double[]", ClassUtils.getSimpleName(double[].class));                                 
// Arrays of arrays of ...                                                                             // Arrays of arrays of ...                                                                          
assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class));                                assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class));                             
assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class));                            assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class));                         
assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class));                        assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class));                     
// On-the-fly types                                                                                    // On-the-fly types                                                                                 
class Named extends Object {                                                                           class Named extends Object {                                                                        
}                                                                                                      }                                                                                                   
;                                                                                                    |                                                                                                     
assertEquals("", ClassUtils.getSimpleName(new Object() {                                               assertEquals("", ClassUtils.getSimpleName(new Object() {                                            
}.getClass()));                                                                                        }.getClass()));                                                                                     
assertEquals("Named", ClassUtils.getSimpleName(Named.class));                                          assertEquals("Named", ClassUtils.getSimpleName(Named.class));                                       
}                                                                                                      }                                                                                                   
