// Methods on StringUtils that are immutable in spirit (i.e. calculate the length)
// should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)
// should take a String or String[] parameter and return String or String[].
// This test enforces that this is done.
public void testStringUtilsCharSequenceContract() {
    Class<StringUtils> c = StringUtils.class;
    Method[] methods = c.getMethods();
    for (Method m : methods) {
        if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {
            // Assume this is mutable and ensure the first parameter is not CharSequence.
            // It may be String or it may be something else (String[], Object, Object[]) so
            // don't actively test for that.
            Class<?>[] params = m.getParameterTypes();
            if (params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {
                fail("The method " + m + " appears to be mutable in spirit and therefore must not accept a CharSequence");
            }
        } else {
            // Assume this is immutable in spirit and ensure the first parameter is not String.
            // As above, it may be something other than CharSequence.
            Class<?>[] params = m.getParameterTypes();
            if (params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {
                fail("The method " + m + " appears to be immutable in spirit and therefore must not accept a String");
            }
        }
    }
}