/**
 * <p>Case in-sensitive find of the first index within a String
 * from the specified position.</p>
 *
 * <p>A <code>null</code> String will return <code>-1</code>.
 * A negative start position is treated as zero.
 * An empty ("") search String always matches.
 * A start position greater than the string length only matches
 * an empty search String.</p>
 *
 * <pre>
 * StringUtils.indexOfIgnoreCase(null, *, *)          = -1
 * StringUtils.indexOfIgnoreCase(*, null, *)          = -1
 * StringUtils.indexOfIgnoreCase("", "", 0)           = 0
 * StringUtils.indexOfIgnoreCase("aabaabaa", "A", 0)  = 0
 * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 0)  = 2
 * StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0) = 1
 * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 3)  = 5
 * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 9)  = -1
 * StringUtils.indexOfIgnoreCase("aabaabaa", "B", -1) = 2
 * StringUtils.indexOfIgnoreCase("aabaabaa", "", 2)   = 2
 * StringUtils.indexOfIgnoreCase("abc", "", 9)        = 3
 * </pre>
 *
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search String,
 *  -1 if no match or <code>null</code> string input
 * @since 2.5
 */
public static int indexOfIgnoreCase(String str, String searchStr, int startPos) {
    if (str == null || searchStr == null) {
        return INDEX_NOT_FOUND;
    }
    if (startPos < 0) {
        startPos = 0;
    }
    int endLimit = (str.length() - searchStr.length()) + 1;
    if (startPos > endLimit) {
        return INDEX_NOT_FOUND;
    }
    if (searchStr.length() == 0) {
        return startPos;
    }
    for (int i = startPos; i < endLimit; i++) {
        if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}