/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Compares two CharSequences, and returns the index at which the                              * &lt;p&gt;Compares two CharSequences, and returns the index at which the                           
* CharSequences begin to differ.&lt;/p&gt;                                                             * CharSequences begin to differ.&lt;/p&gt;                                                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;For example,                                                                                * &lt;p&gt;For example,                                                                             
* &lt;code&gt;indexOfDifference("i am a machine", "i am a robot") -&gt; 7&lt;/code&gt;&lt;/p&gt;       * &lt;code&gt;indexOfDifference("i am a machine", "i am a robot") -&gt; 7&lt;/code&gt;&lt;/p&gt;    
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.indexOfDifference(null, null) = -1                                                       * StringUtils.indexOfDifference(null, null) = -1                                                    
* StringUtils.indexOfDifference("", "") = -1                                                           * StringUtils.indexOfDifference("", "") = -1                                                        
* StringUtils.indexOfDifference("", "abc") = 0                                                         * StringUtils.indexOfDifference("", "abc") = 0                                                      
* StringUtils.indexOfDifference("abc", "") = 0                                                         * StringUtils.indexOfDifference("abc", "") = 0                                                      
* StringUtils.indexOfDifference("abc", "abc") = -1                                                     * StringUtils.indexOfDifference("abc", "abc") = -1                                                  
* StringUtils.indexOfDifference("ab", "abxyz") = 2                                                     * StringUtils.indexOfDifference("ab", "abxyz") = 2                                                  
* StringUtils.indexOfDifference("abcde", "abxyz") = 2                                                  * StringUtils.indexOfDifference("abcde", "abxyz") = 2                                               
* StringUtils.indexOfDifference("abcde", "xyz") = 0                                                    * StringUtils.indexOfDifference("abcde", "xyz") = 0                                                 
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param cs1  the first CharSequence, may be null                                                      * @param cs1  the first CharSequence, may be null                                                   
* @param cs2  the second CharSequence, may be null                                                     * @param cs2  the second CharSequence, may be null                                                  
* @return the index where cs1 and cs2 begin to differ; -1 if they are equal                            * @return the index where cs1 and cs2 begin to differ; -1 if they are equal                         
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {                              public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {                           
if (cs1 == cs2) {                                                                                      if (cs1 == cs2) {                                                                                   
return -1;                                                                                           | return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
if (cs1 == null || cs2 == null) {                                                                      if (cs1 == null || cs2 == null) {                                                                   
return 0;                                                                                              return 0;                                                                                           
}                                                                                                      }                                                                                                   
int i;                                                                                                 int i;                                                                                              
for (i = 0; i &lt; cs1.length() && i &lt; cs2.length(); ++i) {                                         for (i = 0; i &lt; cs1.length() && i &lt; cs2.length(); ++i) {                                      
if (cs1.charAt(i) != cs2.charAt(i)) {                                                                  if (cs1.charAt(i) != cs2.charAt(i)) {                                                               
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (i &lt; cs2.length() || i &lt; cs1.length()) {                                                      if (i &lt; cs2.length() || i &lt; cs1.length()) {                                                   
return i;                                                                                              return i;                                                                                           
}                                                                                                      }                                                                                                   
return -1;                                                                                           | return INDEX_NOT_FOUND;                                                                             
}                                                                                                      }                                                                                                   
