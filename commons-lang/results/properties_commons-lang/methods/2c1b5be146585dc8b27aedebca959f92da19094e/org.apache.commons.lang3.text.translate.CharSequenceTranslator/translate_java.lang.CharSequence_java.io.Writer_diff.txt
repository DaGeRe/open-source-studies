/**                                                                                                    /**                                                                                                 
* Translate an input onto a Writer. This is intentionally final as its algorithm is                    * Translate an input onto a Writer. This is intentionally final as its algorithm is                 
* tightly coupled with the abstract method of this class.                                              * tightly coupled with the abstract method of this class.                                           
*                                                                                                      *                                                                                                   
* @param input CharSequence that is being translated                                                   * @param input CharSequence that is being translated                                                
* @param out Writer to translate the text to                                                           * @param out Writer to translate the text to                                                        
* @throws IOException if and only if the Writer produces an IOException                                * @throws IOException if and only if the Writer produces an IOException                             
*/                                                                                                     */                                                                                                  
public final void translate(CharSequence input, Writer out) throws IOException {                       public final void translate(CharSequence input, Writer out) throws IOException {                    
if (out == null) {                                                                                     if (out == null) {                                                                                  
throw new IllegalArgumentException("The Writer must not be null");                                     throw new IllegalArgumentException("The Writer must not be null");                                  
}                                                                                                      }                                                                                                   
if (input == null) {                                                                                   if (input == null) {                                                                                
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
int sz = Character.codePointCount(input, 0, input.length());                                         | int pos = 0;                                                                                        
for (int i = 0; i &lt; sz; i++) {                                                                    | int len = input.length();                                                                           
// consumed is the number of codepoints consumed                                                     | while (pos &lt; len) {                                                                              
int consumed = translate(input, i, out);                                                             | int consumed = translate(input, pos, out);                                                          
if (consumed == 0) {                                                                                   if (consumed == 0) {                                                                                
out.write(Character.toChars(Character.codePointAt(input, i)));                                       | char[] c = Character.toChars(Character.codePointAt(input, pos));                                    
} else {                                                                                             | out.write(c);                                                                                       
// contract with translators is that they have to understand codepoints                              | pos += c.length;                                                                                    
// and they just took care of a surrogate pair                                                       | continue;                                                                                           
for (int j = 0; j &lt; consumed; j++) {                                                              |                                                                                                     
if (i &lt; sz - 2) {                                                                                 |                                                                                                     
i += Character.charCount(Character.codePointAt(input, i));                                           |                                                                                                     
} else {                                                                                             |                                                                                                     
// If the String ends with a high surrogate, just add the 1 and don't worry about such things        |                                                                                                     
i++;                                                                                                 |                                                                                                     
}                                                                                                      }                                                                                                   
                                                                                                     | // // contract with translators is that they have to understand codepoints                          
                                                                                                     | // // and they just took care of a surrogate pair                                                   
                                                                                                     | for (int pt = 0; pt &lt; consumed; pt++) {                                                          
                                                                                                     | pos += Character.charCount(Character.codePointAt(input, pos));                                      
}                                                                                                      }                                                                                                   
// for loop will increment 1 anyway, so remove 1 to account for that                                 |                                                                                                     
i--;                                                                                                 |                                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                    |                                                                                                     
