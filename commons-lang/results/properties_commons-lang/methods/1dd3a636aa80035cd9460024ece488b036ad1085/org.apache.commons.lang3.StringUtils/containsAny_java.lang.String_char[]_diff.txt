// ContainsAny                                                                                         // ContainsAny                                                                                      
// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks if the CharSequence contains any character in the given                              * &lt;p&gt;Checks if the CharSequence contains any character in the given                           
* set of characters.&lt;/p&gt;                                                                         * set of characters.&lt;/p&gt;                                                                      
*                                                                                                      *                                                                                                   
* &lt;p&gt;A {@code null} CharSequence will return {@code false}.                                      * &lt;p&gt;A {@code null} CharSequence will return {@code false}.                                   
* A {@code null} or zero length search array will return {@code false}.&lt;/p&gt;                      * A {@code null} or zero length search array will return {@code false}.&lt;/p&gt;                   
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.containsAny(null, *)                = false                                              * StringUtils.containsAny(null, *)                = false                                           
* StringUtils.containsAny("", *)                  = false                                              * StringUtils.containsAny("", *)                  = false                                           
* StringUtils.containsAny(*, null)                = false                                              * StringUtils.containsAny(*, null)                = false                                           
* StringUtils.containsAny(*, [])                  = false                                              * StringUtils.containsAny(*, [])                  = false                                           
* StringUtils.containsAny("zzabyycdxx",['z','a']) = true                                               * StringUtils.containsAny("zzabyycdxx",['z','a']) = true                                            
* StringUtils.containsAny("zzabyycdxx",['b','y']) = true                                               * StringUtils.containsAny("zzabyycdxx",['b','y']) = true                                            
* StringUtils.containsAny("aba", ['z'])           = false                                              * StringUtils.containsAny("aba", ['z'])           = false                                           
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param cs  the CharSequence to check, may be null                                                    * @param cs  the CharSequence to check, may be null                                                 
* @param searchChars  the chars to search for, may be null                                             * @param searchChars  the chars to search for, may be null                                          
* @return the {@code true} if any of the chars are found,                                              * @return the {@code true} if any of the chars are found,                                           
* {@code false} if no match or null input                                                              * {@code false} if no match or null input                                                           
* @since 2.4                                                                                           * @since 2.4                                                                                        
*/                                                                                                     */                                                                                                  
public static boolean containsAny(String cs, char[] searchChars) {                                   | public static boolean containsAny(String cs, char... searchChars) {                                 
if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {                                                  if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {                                               
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
int csLength = cs.length();                                                                            int csLength = cs.length();                                                                         
int searchLength = searchChars.length;                                                                 int searchLength = searchChars.length;                                                              
int csLast = csLength - 1;                                                                             int csLast = csLength - 1;                                                                          
int searchLast = searchLength - 1;                                                                     int searchLast = searchLength - 1;                                                                  
for (int i = 0; i &lt; csLength; i++) {                                                                for (int i = 0; i &lt; csLength; i++) {                                                             
char ch = cs.charAt(i);                                                                                char ch = cs.charAt(i);                                                                             
for (int j = 0; j &lt; searchLength; j++) {                                                            for (int j = 0; j &lt; searchLength; j++) {                                                         
if (searchChars[j] == ch) {                                                                            if (searchChars[j] == ch) {                                                                         
if (Character.isHighSurrogate(ch)) {                                                                   if (Character.isHighSurrogate(ch)) {                                                                
if (j == searchLast) {                                                                                 if (j == searchLast) {                                                                              
// missing low surrogate, fine, like String.indexOf(String)                                            // missing low surrogate, fine, like String.indexOf(String)                                         
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
if (i &lt; csLast && searchChars[j + 1] == cs.charAt(i + 1)) {                                         if (i &lt; csLast && searchChars[j + 1] == cs.charAt(i + 1)) {                                      
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// ch is in the Basic Multilingual Plane                                                               // ch is in the Basic Multilingual Plane                                                            
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
