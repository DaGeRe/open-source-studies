// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* Compares this object against some other object. The result is &lt;code&gt;true&lt;/code&gt; if and   * Compares this object against some other object. The result is &lt;code&gt;true&lt;/code&gt; if and
* not &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Float&lt;/code&gt; object that represents a   * not &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Float&lt;/code&gt; object that represents a
* identical bit pattern to the bit pattern of the &lt;code&gt;float&lt;/code&gt; represented by this   * identical bit pattern to the bit pattern of the &lt;code&gt;float&lt;/code&gt; represented by this
* purpose, two float values are considered to be the same if and only if the method                    * purpose, two float values are considered to be the same if and only if the method                 
* {@link Float#floatToIntBits(float)}returns the same int value when applied to each.                  * {@link Float#floatToIntBits(float)}returns the same int value when applied to each.               
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Note that in most cases, for two instances of class &lt;code&gt;Float&lt;/code&gt;,&lt;code&gt;f1&   * Note that in most cases, for two instances of class &lt;code&gt;Float&lt;/code&gt;,&lt;code&gt;f1&
* the value of &lt;code&gt;f1.equals(f2)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only i   * the value of &lt;code&gt;f1.equals(f2)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only i
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
*   f1.floatValue() == f2.floatValue()                                                                 *   f1.floatValue() == f2.floatValue()                                                              
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* &lt;/blockquote&gt;                                                                                  * &lt;/blockquote&gt;                                                                               
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* also has the value &lt;code&gt;true&lt;/code&gt;. However, there are two exceptions:                 * also has the value &lt;code&gt;true&lt;/code&gt;. However, there are two exceptions:              
* &lt;ul&gt;                                                                                           * &lt;ul&gt;                                                                                        
* &lt;li&gt;If &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt; both represent &lt;code&g   * &lt;li&gt;If &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt; both represent &lt;code&g
* &lt;code&gt;equals&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt;, even though &lt;code   * &lt;code&gt;equals&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt;, even though &lt;code
* the value &lt;code&gt;false&lt;/code&gt;.                                                            * the value &lt;code&gt;false&lt;/code&gt;.                                                         
* &lt;li&gt;If &lt;code&gt;f1&lt;/code&gt; represents &lt;code&gt;+0.0f&lt;/code&gt; while &lt;code&   * &lt;li&gt;If &lt;code&gt;f1&lt;/code&gt; represents &lt;code&gt;+0.0f&lt;/code&gt; while &lt;code&
* or vice versa, the &lt;code&gt;equal&lt;/code&gt; test has the value &lt;code&gt;false&lt;/code&gt   * or vice versa, the &lt;code&gt;equal&lt;/code&gt; test has the value &lt;code&gt;false&lt;/code&gt
* &lt;code&gt;0.0f==-0.0f&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;.                    * &lt;code&gt;0.0f==-0.0f&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;.                 
* &lt;/ul&gt;                                                                                          * &lt;/ul&gt;                                                                                       
* This definition allows hashtables to operate properly.                                               * This definition allows hashtables to operate properly.                                            
*                                                                                                      *                                                                                                   
* @param obj                                                                                           * @param obj                                                                                        
*            the object to be compared                                                                 *            the object to be compared                                                              
* @return &lt;code&gt;true&lt;/code&gt; if the objects are the same; &lt;code&gt;false&lt;/code&gt;    * @return &lt;code&gt;true&lt;/code&gt; if the objects are the same; &lt;code&gt;false&lt;/code&gt; 
* @see java.lang.Float#floatToIntBits(float)                                                           * @see java.lang.Float#floatToIntBits(float)                                                        
*/                                                                                                     */                                                                                                  
                                                                                                     | @Override                                                                                           
public boolean equals(Object obj) {                                                                    public boolean equals(Object obj) {                                                                 
return (obj instanceof MutableFloat) && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.f   return (obj instanceof MutableFloat) && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.f
}                                                                                                      }                                                                                                   
