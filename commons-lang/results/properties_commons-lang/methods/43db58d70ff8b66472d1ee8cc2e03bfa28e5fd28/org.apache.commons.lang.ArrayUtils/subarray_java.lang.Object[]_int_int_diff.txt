// Subarrays
// -----------------------------------------------------------------------
/**
 * <p>Produces a new array containing the elements between
 * the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * <p>The component type of the subarray is always the same as
 * that of the input array. Thus, if the input is an array of type
 * <code>Date</code>, the following usage is envisaged:</p>
 *
 * <pre>
 * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
 * </pre>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */
public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    Class type = array.getClass().getComponentType();
    if (newSize <= 0) {
        return (Object[]) Array.newInstance(type, 0);
    }
    Object[] subarray = (Object[]) Array.newInstance(type, newSize);
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}