// -----------------------------------------------------------------------
/**
 * Compares this object against the specified object. The result is <code>true</code> if and only if the argument
 * is not <code>null</code> and is a <code>Double</code> object that represents a double that has the identical
 * bit pattern to the bit pattern of the double represented by this object. For this purpose, two
 * <code>double</code> values are considered to be the same if and only if the method
 * {@link Double#doubleToLongBits(double)}returns the same long value when applied to each.
 * <p>
 * Note that in most cases, for two instances of class <code>Double</code>,<code>d1</code> and <code>d2</code>,
 * the value of <code>d1.equals(d2)</code> is <code>true</code> if and only if <blockquote>
 *
 * <pre>
 *   d1.doubleValue()&nbsp;== d2.doubleValue()
 * </pre>
 *
 * </blockquote>
 * <p>
 * also has the value <code>true</code>. However, there are two exceptions:
 * <ul>
 * <li>If <code>d1</code> and <code>d2</code> both represent <code>Double.NaN</code>, then the
 * <code>equals</code> method returns <code>true</code>, even though <code>Double.NaN==Double.NaN</code> has
 * the value <code>false</code>.
 * <li>If <code>d1</code> represents <code>+0.0</code> while <code>d2</code> represents <code>-0.0</code>,
 * or vice versa, the <code>equal</code> test has the value <code>false</code>, even though
 * <code>+0.0==-0.0</code> has the value <code>true</code>. This allows hashtables to operate properly.
 * </ul>
 *
 * @param obj
 *            the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */
@Override
public boolean equals(Object obj) {
    return (obj instanceof MutableDouble) && (Double.doubleToLongBits(((MutableDouble) obj).value) == Double.doubleToLongBits(value));
}