// Testing JDK against old Lang functionality                                                          // Testing JDK against old Lang functionality                                                       
                                                                                                     | @Test                                                                                               
public void testCompareDouble() {                                                                      public void testCompareDouble() {                                                                   
assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);                                               assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);                                            
assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);                                assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);                             
assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);                                        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);                                     
assertTrue(Double.compare(Double.NaN, 1.2d) == +1);                                                    assertTrue(Double.compare(Double.NaN, 1.2d) == +1);                                                 
assertTrue(Double.compare(Double.NaN, 0.0d) == +1);                                                    assertTrue(Double.compare(Double.NaN, 0.0d) == +1);                                                 
assertTrue(Double.compare(Double.NaN, -0.0d) == +1);                                                   assertTrue(Double.compare(Double.NaN, -0.0d) == +1);                                                
assertTrue(Double.compare(Double.NaN, -1.2d) == +1);                                                   assertTrue(Double.compare(Double.NaN, -1.2d) == +1);                                                
assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);                                       assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);                                    
assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);                                assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);                             
assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);                                assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);                             
assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);                   assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);                
assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);                          assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);                       
assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);                                      assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);                                   
assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);                                      assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);                                   
assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);                                     assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);                                  
assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);                                     assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);                                  
assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);                         assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);                      
assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);                  assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);               
assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);                                        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);                                     
assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);                          assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);                       
assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);                                   assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);                                
assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);                                              assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);                                           
assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);                                              assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);                                           
assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);                                             assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);                                          
assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);                                             assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);                                          
assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);                                 assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);                              
assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                          assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                       
assertTrue(Double.compare(1.2d, Double.NaN) == -1);                                                    assertTrue(Double.compare(1.2d, Double.NaN) == -1);                                                 
assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);                                      assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);                                   
assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);                                              assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);                                           
assertTrue(Double.compare(1.2d, 1.2d) == 0);                                                           assertTrue(Double.compare(1.2d, 1.2d) == 0);                                                        
assertTrue(Double.compare(1.2d, 0.0d) == +1);                                                          assertTrue(Double.compare(1.2d, 0.0d) == +1);                                                       
assertTrue(Double.compare(1.2d, -0.0d) == +1);                                                         assertTrue(Double.compare(1.2d, -0.0d) == +1);                                                      
assertTrue(Double.compare(1.2d, -1.2d) == +1);                                                         assertTrue(Double.compare(1.2d, -1.2d) == +1);                                                      
assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);                                             assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);                                          
assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);                                      assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);                                   
assertTrue(Double.compare(0.0d, Double.NaN) == -1);                                                    assertTrue(Double.compare(0.0d, Double.NaN) == -1);                                                 
assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);                                      assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);                                   
assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);                                              assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);                                           
assertTrue(Double.compare(0.0d, 1.2d) == -1);                                                          assertTrue(Double.compare(0.0d, 1.2d) == -1);                                                       
assertTrue(Double.compare(0.0d, 0.0d) == 0);                                                           assertTrue(Double.compare(0.0d, 0.0d) == 0);                                                        
assertTrue(Double.compare(0.0d, -0.0d) == +1);                                                         assertTrue(Double.compare(0.0d, -0.0d) == +1);                                                      
assertTrue(Double.compare(0.0d, -1.2d) == +1);                                                         assertTrue(Double.compare(0.0d, -1.2d) == +1);                                                      
assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);                                             assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);                                          
assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);                                      assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);                                   
assertTrue(Double.compare(-0.0d, Double.NaN) == -1);                                                   assertTrue(Double.compare(-0.0d, Double.NaN) == -1);                                                
assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);                                     assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);                                  
assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);                                             assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);                                          
assertTrue(Double.compare(-0.0d, 1.2d) == -1);                                                         assertTrue(Double.compare(-0.0d, 1.2d) == -1);                                                      
assertTrue(Double.compare(-0.0d, 0.0d) == -1);                                                         assertTrue(Double.compare(-0.0d, 0.0d) == -1);                                                      
assertTrue(Double.compare(-0.0d, -0.0d) == 0);                                                         assertTrue(Double.compare(-0.0d, -0.0d) == 0);                                                      
assertTrue(Double.compare(-0.0d, -1.2d) == +1);                                                        assertTrue(Double.compare(-0.0d, -1.2d) == +1);                                                     
assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);                                            assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);                                         
assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);                                     assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);                                  
assertTrue(Double.compare(-1.2d, Double.NaN) == -1);                                                   assertTrue(Double.compare(-1.2d, Double.NaN) == -1);                                                
assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);                                     assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);                                  
assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);                                             assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);                                          
assertTrue(Double.compare(-1.2d, 1.2d) == -1);                                                         assertTrue(Double.compare(-1.2d, 1.2d) == -1);                                                      
assertTrue(Double.compare(-1.2d, 0.0d) == -1);                                                         assertTrue(Double.compare(-1.2d, 0.0d) == -1);                                                      
assertTrue(Double.compare(-1.2d, -0.0d) == -1);                                                        assertTrue(Double.compare(-1.2d, -0.0d) == -1);                                                     
assertTrue(Double.compare(-1.2d, -1.2d) == 0);                                                         assertTrue(Double.compare(-1.2d, -1.2d) == 0);                                                      
assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);                                            assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);                                         
assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);                                     assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);                                  
assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);                                       assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);                                    
assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);                         assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);                      
assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);                                 assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);                              
assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);                                             assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);                                          
assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);                                             assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);                                          
assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);                                            assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);                                         
assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);                                            assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);                                         
assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);                                 assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);                              
assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                         assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                      
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);                                assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);                             
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);                  assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);               
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);                          assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);                       
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);                                      assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);                                   
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);                                      assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);                                   
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);                                     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);                                  
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);                                     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);                                  
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);                         assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);                      
assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);                   assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);                
}                                                                                                      }                                                                                                   
