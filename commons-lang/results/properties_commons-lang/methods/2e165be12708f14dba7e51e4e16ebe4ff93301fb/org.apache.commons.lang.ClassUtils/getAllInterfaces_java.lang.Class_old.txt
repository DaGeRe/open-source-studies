/**
 * <p>Gets a <code>List</code> of all interfaces implemented by the given
 * class and its superclasses.</p>
 *
 * <p>The order is determined by looking through each interface in turn as
 * declared in the source file and following its hierarchy up. Then each
 * superclass is considered in the same way. Later duplicates are ignored,
 * so the order is maintained.</p>
 *
 * @param cls  the class to look up, may be <code>null</code>
 * @return the <code>List</code> of interfaces in order,
 *  <code>null</code> if null input
 */
public static List<Class<?>> getAllInterfaces(Class<?> cls) {
    if (cls == null) {
        return null;
    }
    List<Class<?>> list = new ArrayList<Class<?>>();
    while (cls != null) {
        Class<?>[] interfaces = cls.getInterfaces();
        for (Class<?> intface : interfaces) {
            if (list.contains(intface) == false) {
                list.add(intface);
            }
            List<Class<?>> superInterfaces = getAllInterfaces(intface);
            for (Class<?> superInterface : superInterfaces) {
                if (list.contains(superInterface) == false) {
                    list.add(superInterface);
                }
            }
        }
        cls = cls.getSuperclass();
    }
    return list;
}