public void testWrappersToPrimitives() {                                                               public void testWrappersToPrimitives() {                                                            
// an array with classes to test                                                                       // an array with classes to test                                                                    
final Class[] classes = { Boolean.class, Byte.class, Character.class, Short.class, Integer.class, Lo | final Class&lt;?&gt;[] classes = { Boolean.class, Byte.class, Character.class, Short.class, Integer.
Class[] primitives = ClassUtils.wrappersToPrimitives(classes);                                       | Class&lt;?&gt;[] primitives = ClassUtils.wrappersToPrimitives(classes);                             
// now test the result                                                                                 // now test the result                                                                              
assertEquals("Wrong length of result array", classes.length, primitives.length);                       assertEquals("Wrong length of result array", classes.length, primitives.length);                    
for (int i = 0; i &lt; classes.length; i++) {                                                          for (int i = 0; i &lt; classes.length; i++) {                                                       
Class expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);                                 | Class&lt;?&gt; expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);                       
assertEquals(classes[i] + " -&gt; " + expectedPrimitive, expectedPrimitive, primitives[i]);            assertEquals(classes[i] + " -&gt; " + expectedPrimitive, expectedPrimitive, primitives[i]);         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
