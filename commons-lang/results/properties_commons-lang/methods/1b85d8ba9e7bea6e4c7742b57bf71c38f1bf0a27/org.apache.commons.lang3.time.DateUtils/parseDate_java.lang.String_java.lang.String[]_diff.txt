// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Parses a string representing a date by trying a variety of different parsers.&lt;/p&gt;     * &lt;p&gt;Parses a string representing a date by trying a variety of different parsers.&lt;/p&gt;  
*                                                                                                      *                                                                                                   
* &lt;p&gt;The parse will try each parse pattern in turn.                                              * &lt;p&gt;The parse will try each parse pattern in turn.                                           
* A parse is only deemed sucessful if it parses the whole of the input string.                         * A parse is only deemed sucessful if it parses the whole of the input string.                      
* If no parse patterns match, a ParseException is thrown.&lt;/p&gt;                                    * If no parse patterns match, a ParseException is thrown.&lt;/p&gt;                                 
*                                                                                                      *                                                                                                   
* @param str  the date to parse, not null                                                              * @param str  the date to parse, not null                                                           
* @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null                * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null             
* @return the parsed date                                                                              * @return the parsed date                                                                           
* @throws IllegalArgumentException if the date string or pattern array is null                         * @throws IllegalArgumentException if the date string or pattern array is null                      
* @throws ParseException if none of the date patterns were suitable (or there were none)               * @throws ParseException if none of the date patterns were suitable (or there were none)            
*/                                                                                                     */                                                                                                  
public static Date parseDate(String str, String[] parsePatterns) throws ParseException {               public static Date parseDate(String str, String[] parsePatterns) throws ParseException {            
if (str == null || parsePatterns == null) {                                                            if (str == null || parsePatterns == null) {                                                         
throw new IllegalArgumentException("Date and Patterns must not be null");                              throw new IllegalArgumentException("Date and Patterns must not be null");                           
}                                                                                                      }                                                                                                   
SimpleDateFormat parser = null;                                                                        SimpleDateFormat parser = null;                                                                     
ParsePosition pos = new ParsePosition(0);                                                              ParsePosition pos = new ParsePosition(0);                                                           
for (int i = 0; i &lt; parsePatterns.length; i++) {                                                    for (int i = 0; i &lt; parsePatterns.length; i++) {                                                 
                                                                                                     | String pattern = parsePatterns[i];                                                                  
                                                                                                     | // LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat                  
                                                                                                     | if (parsePatterns[i].endsWith("ZZ")) {                                                              
                                                                                                     | pattern = pattern.substring(0, pattern.length() - 1);                                               
                                                                                                     | }                                                                                                   
if (i == 0) {                                                                                          if (i == 0) {                                                                                       
parser = new SimpleDateFormat(parsePatterns[0]);                                                     | parser = new SimpleDateFormat(pattern);                                                             
} else {                                                                                               } else {                                                                                            
// cannot be null if i != 0                                                                            // cannot be null if i != 0                                                                         
parser.applyPattern(parsePatterns[i]);                                                               | parser.applyPattern(pattern);                                                                       
}                                                                                                      }                                                                                                   
pos.setIndex(0);                                                                                       pos.setIndex(0);                                                                                    
Date date = parser.parse(str, pos);                                                                  | String str2 = str;                                                                                  
if (date != null && pos.getIndex() == str.length()) {                                                | // LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException  
                                                                                                     | if (parsePatterns[i].endsWith("ZZ")) {                                                              
                                                                                                     | str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2");                                    
                                                                                                     | }                                                                                                   
                                                                                                     | Date date = parser.parse(str2, pos);                                                                
                                                                                                     | if (date != null && pos.getIndex() == str2.length()) {                                              
return date;                                                                                           return date;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
throw new ParseException("Unable to parse the date: " + str, -1);                                      throw new ParseException("Unable to parse the date: " + str, -1);                                   
}                                                                                                      }                                                                                                   
