// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Creates a compact stack trace for the root cause of the supplied                            * &lt;p&gt;Creates a compact stack trace for the root cause of the supplied                         
* &lt;code&gt;Throwable&lt;/code&gt;.&lt;/p&gt;                                                        * &lt;code&gt;Throwable&lt;/code&gt;.&lt;/p&gt;                                                     
*                                                                                                      *                                                                                                   
* &lt;p&gt;The output of this method is consistent across JDK versions.                                * &lt;p&gt;The output of this method is consistent across JDK versions.                             
* It consists of the root exception followed by each of its wrapping                                   * It consists of the root exception followed by each of its wrapping                                
* exceptions separated by '[wrapped]'. Note that this is the opposite                                  * exceptions separated by '[wrapped]'. Note that this is the opposite                               
* order to the JDK1.4 display.&lt;/p&gt;                                                               * order to the JDK1.4 display.&lt;/p&gt;                                                            
*                                                                                                      *                                                                                                   
* @param throwable  the throwable to examine, may be null                                              * @param throwable  the throwable to examine, may be null                                           
* @return an array of stack trace frames, never null                                                   * @return an array of stack trace frames, never null                                                
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public static String[] getRootCauseStackTrace(Throwable throwable) {                                   public static String[] getRootCauseStackTrace(Throwable throwable) {                                
if (throwable == null) {                                                                               if (throwable == null) {                                                                            
return ArrayUtils.EMPTY_STRING_ARRAY;                                                                  return ArrayUtils.EMPTY_STRING_ARRAY;                                                               
}                                                                                                      }                                                                                                   
Throwable[] throwables = getThrowables(throwable);                                                     Throwable[] throwables = getThrowables(throwable);                                                  
int count = throwables.length;                                                                         int count = throwables.length;                                                                      
List&lt;String&gt; frames = new ArrayList&lt;String&gt;();                                             List&lt;String&gt; frames = new ArrayList&lt;String&gt;();                                          
List&lt;String&gt; nextTrace = getStackFrameList(throwables[count - 1]);                               List&lt;String&gt; nextTrace = getStackFrameList(throwables[count - 1]);                            
for (int i = count; --i &gt;= 0; ) {                                                                   for (int i = count; --i &gt;= 0; ) {                                                                
List&lt;String&gt; trace = nextTrace;                                                                  List&lt;String&gt; trace = nextTrace;                                                               
if (i != 0) {                                                                                          if (i != 0) {                                                                                       
nextTrace = getStackFrameList(throwables[i - 1]);                                                      nextTrace = getStackFrameList(throwables[i - 1]);                                                   
removeCommonFrames(trace, nextTrace);                                                                  removeCommonFrames(trace, nextTrace);                                                               
}                                                                                                      }                                                                                                   
if (i == count - 1) {                                                                                  if (i == count - 1) {                                                                               
frames.add(throwables[i].toString());                                                                  frames.add(throwables[i].toString());                                                               
} else {                                                                                               } else {                                                                                            
frames.add(WRAPPED_MARKER + throwables[i].toString());                                                 frames.add(WRAPPED_MARKER + throwables[i].toString());                                              
}                                                                                                      }                                                                                                   
for (int j = 0; j &lt; trace.size(); j++) {                                                            for (int j = 0; j &lt; trace.size(); j++) {                                                         
frames.add(trace.get(j));                                                                              frames.add(trace.get(j));                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return frames.toArray(new String[0]);                                                                | return frames.toArray(new String[frames.size()]);                                                   
}                                                                                                      }                                                                                                   
