/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Performs the parsing of tokens.&lt;/p&gt;                                                   * &lt;p&gt;Performs the parsing of tokens.&lt;/p&gt;                                                
*                                                                                                      *                                                                                                   
* @param pattern  the pattern                                                                          * @param pattern  the pattern                                                                       
* @param indexRef  index references                                                                    * @param indexRef  index references                                                                 
* @return parsed token                                                                                 * @return parsed token                                                                              
*/                                                                                                     */                                                                                                  
protected String parseToken(String pattern, int[] indexRef) {                                          protected String parseToken(String pattern, int[] indexRef) {                                       
StringBuffer buf = new StringBuffer();                                                               | StringBuilder buf = new StringBuilder();                                                            
int i = indexRef[0];                                                                                   int i = indexRef[0];                                                                                
int length = pattern.length();                                                                         int length = pattern.length();                                                                      
char c = pattern.charAt(i);                                                                            char c = pattern.charAt(i);                                                                         
if (c &gt;= 'A' && c &lt;= 'Z' || c &gt;= 'a' && c &lt;= 'z') {                                        if (c &gt;= 'A' && c &lt;= 'Z' || c &gt;= 'a' && c &lt;= 'z') {                                     
// Scan a run of the same character, which indicates a time                                            // Scan a run of the same character, which indicates a time                                         
// pattern.                                                                                            // pattern.                                                                                         
buf.append(c);                                                                                         buf.append(c);                                                                                      
while (i + 1 &lt; length) {                                                                            while (i + 1 &lt; length) {                                                                         
char peek = pattern.charAt(i + 1);                                                                     char peek = pattern.charAt(i + 1);                                                                  
if (peek == c) {                                                                                       if (peek == c) {                                                                                    
buf.append(c);                                                                                         buf.append(c);                                                                                      
i++;                                                                                                   i++;                                                                                                
} else {                                                                                               } else {                                                                                            
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// This will identify token as text.                                                                   // This will identify token as text.                                                                
buf.append('\'');                                                                                      buf.append('\'');                                                                                   
boolean inLiteral = false;                                                                             boolean inLiteral = false;                                                                          
for (; i &lt; length; i++) {                                                                           for (; i &lt; length; i++) {                                                                        
c = pattern.charAt(i);                                                                                 c = pattern.charAt(i);                                                                              
if (c == '\'') {                                                                                       if (c == '\'') {                                                                                    
if (i + 1 &lt; length && pattern.charAt(i + 1) == '\'') {                                              if (i + 1 &lt; length && pattern.charAt(i + 1) == '\'') {                                           
// '' is treated as escaped '                                                                          // '' is treated as escaped '                                                                       
i++;                                                                                                   i++;                                                                                                
buf.append(c);                                                                                         buf.append(c);                                                                                      
} else {                                                                                               } else {                                                                                            
inLiteral = !inLiteral;                                                                                inLiteral = !inLiteral;                                                                             
}                                                                                                      }                                                                                                   
} else if (!inLiteral && (c &gt;= 'A' && c &lt;= 'Z' || c &gt;= 'a' && c &lt;= 'z')) {                 } else if (!inLiteral && (c &gt;= 'A' && c &lt;= 'Z' || c &gt;= 'a' && c &lt;= 'z')) {              
i--;                                                                                                   i--;                                                                                                
break;                                                                                                 break;                                                                                              
} else {                                                                                               } else {                                                                                            
buf.append(c);                                                                                         buf.append(c);                                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
indexRef[0] = i;                                                                                       indexRef[0] = i;                                                                                    
return buf.toString();                                                                                 return buf.toString();                                                                              
}                                                                                                      }                                                                                                   
