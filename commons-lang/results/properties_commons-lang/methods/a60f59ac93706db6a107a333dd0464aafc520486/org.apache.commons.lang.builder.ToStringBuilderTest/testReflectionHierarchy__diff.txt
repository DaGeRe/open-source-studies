public void testReflectionHierarchy() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));
    assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, List.class));
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));
    assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, List.class));
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
    assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
    this.validateEmptyToStringStyleRegistry();
}