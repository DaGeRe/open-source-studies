/**                                                                                                    /**                                                                                                 
* Gets the number of steps required needed to turn the source class into the                         | * Gets the number of steps required needed to turn the source class into                            
* destination class. This represents the number of steps in the object hierarchy                     | * the destination class. This represents the number of steps in the object                          
* graph.                                                                                             | * hierarchy graph.                                                                                  
* @param srcClass The source class                                                                     * @param srcClass The source class                                                                  
* @param destClass The destination class                                                               * @param destClass The destination class                                                            
* @return The cost of transforming an object                                                           * @return The cost of transforming an object                                                        
*/                                                                                                     */                                                                                                  
private static float getObjectTransformationCost(Class&lt;?&gt; srcClass, Class&lt;?&gt; destClass)    private static float getObjectTransformationCost(Class&lt;?&gt; srcClass, Class&lt;?&gt; destClass) 
if (destClass.isPrimitive()) {                                                                         if (destClass.isPrimitive()) {                                                                      
return getPrimitivePromotionCost(srcClass, destClass);                                                 return getPrimitivePromotionCost(srcClass, destClass);                                              
}                                                                                                      }                                                                                                   
float cost = 0.0f;                                                                                     float cost = 0.0f;                                                                                  
while (destClass != null && !destClass.equals(srcClass)) {                                             while (destClass != null && !destClass.equals(srcClass)) {                                          
if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) {                         if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) {                      
// slight penalty for interface match.                                                                 // slight penalty for interface match.                                                              
// we still want an exact match to override an interface match,                                        // we still want an exact match to override an interface match,                                     
// but                                                                                                 // but                                                                                              
// an interface match should override anything where we have to                                        // an interface match should override anything where we have to                                     
// get a superclass.                                                                                   // get a superclass.                                                                                
cost += 0.25f;                                                                                         cost += 0.25f;                                                                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
cost++;                                                                                                cost++;                                                                                             
destClass = destClass.getSuperclass();                                                                 destClass = destClass.getSuperclass();                                                              
}                                                                                                      }                                                                                                   
/*                                                                                                     /*                                                                                                  
* If the destination class is null, we've travelled all the way up to                                  * If the destination class is null, we've travelled all the way up to                               
* an Object match. We'll penalize this by adding 1.5 to the cost.                                      * an Object match. We'll penalize this by adding 1.5 to the cost.                                   
*/                                                                                                     */                                                                                                  
if (destClass == null) {                                                                               if (destClass == null) {                                                                            
cost += 1.5f;                                                                                          cost += 1.5f;                                                                                       
}                                                                                                      }                                                                                                   
return cost;                                                                                           return cost;                                                                                        
}                                                                                                      }                                                                                                   
