/**                                                                                                    /**                                                                                                 
* Get the number of steps required to promote a primitive number to another type.                    | * Get the number of steps required to promote a primitive number to another                         
                                                                                                     | * type.                                                                                             
* @param srcClass the (primitive) source class                                                         * @param srcClass the (primitive) source class                                                      
* @param destClass the (primitive) destination class                                                   * @param destClass the (primitive) destination class                                                
* @return The cost of promoting the primitive                                                          * @return The cost of promoting the primitive                                                       
*/                                                                                                     */                                                                                                  
private static float getPrimitivePromotionCost(final Class&lt;?&gt; srcClass, final Class&lt;?&gt; d   private static float getPrimitivePromotionCost(final Class&lt;?&gt; srcClass, final Class&lt;?&gt; d
float cost = 0.0f;                                                                                     float cost = 0.0f;                                                                                  
Class&lt;?&gt; cls = srcClass;                                                                         Class&lt;?&gt; cls = srcClass;                                                                      
if (!cls.isPrimitive()) {                                                                              if (!cls.isPrimitive()) {                                                                           
// slight unwrapping penalty                                                                           // slight unwrapping penalty                                                                        
cost += 0.1f;                                                                                          cost += 0.1f;                                                                                       
cls = ClassUtils.wrapperToPrimitive(cls);                                                              cls = ClassUtils.wrapperToPrimitive(cls);                                                           
}                                                                                                      }                                                                                                   
for (int i = 0; cls != destClass && i &lt; ORDERED_PRIMITIVE_TYPES.length; i++) {                      for (int i = 0; cls != destClass && i &lt; ORDERED_PRIMITIVE_TYPES.length; i++) {                   
if (cls == ORDERED_PRIMITIVE_TYPES[i]) {                                                               if (cls == ORDERED_PRIMITIVE_TYPES[i]) {                                                            
cost += 0.1f;                                                                                          cost += 0.1f;                                                                                       
if (i &lt; ORDERED_PRIMITIVE_TYPES.length - 1) {                                                       if (i &lt; ORDERED_PRIMITIVE_TYPES.length - 1) {                                                    
cls = ORDERED_PRIMITIVE_TYPES[i + 1];                                                                  cls = ORDERED_PRIMITIVE_TYPES[i + 1];                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return cost;                                                                                           return cost;                                                                                        
}                                                                                                      }                                                                                                   
