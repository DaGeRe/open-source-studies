/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (subtracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is {@code null}, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1.1], 0)           = []
 * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
 * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
 * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is {@code null}.
 * @since 2.1
 */
public static float[] remove(float[] array, int index) {
    return (float[]) remove((Object) array, index);
}