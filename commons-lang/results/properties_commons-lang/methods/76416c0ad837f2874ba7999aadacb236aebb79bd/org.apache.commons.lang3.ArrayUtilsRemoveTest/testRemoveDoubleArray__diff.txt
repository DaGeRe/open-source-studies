                                                                                                     | @Test                                                                                               
public void testRemoveDoubleArray() {                                                                  public void testRemoveDoubleArray() {                                                               
double[] array;                                                                                        double[] array;                                                                                     
array = ArrayUtils.remove(new double[] { 1 }, 0);                                                      array = ArrayUtils.remove(new double[] { 1 }, 0);                                                   
assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));                                       assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));                                    
assertEquals(Double.TYPE, array.getClass().getComponentType());                                        assertEquals(Double.TYPE, array.getClass().getComponentType());                                     
array = ArrayUtils.remove(new double[] { 1, 2 }, 0);                                                   array = ArrayUtils.remove(new double[] { 1, 2 }, 0);                                                
assertTrue(Arrays.equals(new double[] { 2 }, array));                                                  assertTrue(Arrays.equals(new double[] { 2 }, array));                                               
assertEquals(Double.TYPE, array.getClass().getComponentType());                                        assertEquals(Double.TYPE, array.getClass().getComponentType());                                     
array = ArrayUtils.remove(new double[] { 1, 2 }, 1);                                                   array = ArrayUtils.remove(new double[] { 1, 2 }, 1);                                                
assertTrue(Arrays.equals(new double[] { 1 }, array));                                                  assertTrue(Arrays.equals(new double[] { 1 }, array));                                               
assertEquals(Double.TYPE, array.getClass().getComponentType());                                        assertEquals(Double.TYPE, array.getClass().getComponentType());                                     
array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1);                                                array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1);                                             
assertTrue(Arrays.equals(new double[] { 1, 1 }, array));                                               assertTrue(Arrays.equals(new double[] { 1, 1 }, array));                                            
assertEquals(Double.TYPE, array.getClass().getComponentType());                                        assertEquals(Double.TYPE, array.getClass().getComponentType());                                     
try {                                                                                                  try {                                                                                               
ArrayUtils.remove(new double[] { 1, 2 }, -1);                                                          ArrayUtils.remove(new double[] { 1, 2 }, -1);                                                       
fail("IndexOutOfBoundsException expected");                                                            fail("IndexOutOfBoundsException expected");                                                         
} catch (IndexOutOfBoundsException e) {                                                                } catch (IndexOutOfBoundsException e) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
ArrayUtils.remove(new double[] { 1, 2 }, 2);                                                           ArrayUtils.remove(new double[] { 1, 2 }, 2);                                                        
fail("IndexOutOfBoundsException expected");                                                            fail("IndexOutOfBoundsException expected");                                                         
} catch (IndexOutOfBoundsException e) {                                                                } catch (IndexOutOfBoundsException e) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
ArrayUtils.remove((double[]) null, 0);                                                                 ArrayUtils.remove((double[]) null, 0);                                                              
fail("IndexOutOfBoundsException expected");                                                            fail("IndexOutOfBoundsException expected");                                                         
} catch (IndexOutOfBoundsException e) {                                                                } catch (IndexOutOfBoundsException e) {                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
