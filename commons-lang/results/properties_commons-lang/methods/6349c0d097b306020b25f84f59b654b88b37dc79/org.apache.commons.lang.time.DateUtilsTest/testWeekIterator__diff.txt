/**                                                                                                    /**                                                                                                 
* Tests the calendar iterator for week ranges                                                          * Tests the calendar iterator for week ranges                                                       
*/                                                                                                     */                                                                                                  
public void testWeekIterator() throws Exception {                                                      public void testWeekIterator() throws Exception {                                                   
Calendar now = Calendar.getInstance();                                                                 Calendar now = Calendar.getInstance();                                                              
for (int i = 0; i &lt; 7; i++) {                                                                       for (int i = 0; i &lt; 7; i++) {                                                                    
Calendar today = DateUtils.truncate(now, Calendar.DATE);                                               Calendar today = DateUtils.truncate(now, Calendar.DATE);                                            
Calendar sunday = DateUtils.truncate(now, Calendar.DATE);                                              Calendar sunday = DateUtils.truncate(now, Calendar.DATE);                                           
sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));                                       sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));                                    
Calendar monday = DateUtils.truncate(now, Calendar.DATE);                                              Calendar monday = DateUtils.truncate(now, Calendar.DATE);                                           
if (monday.get(Calendar.DAY_OF_WEEK) == 1) {                                                           if (monday.get(Calendar.DAY_OF_WEEK) == 1) {                                                        
// This is sunday... roll back 6 days                                                                  // This is sunday... roll back 6 days                                                               
monday.add(Calendar.DATE, -6);                                                                         monday.add(Calendar.DATE, -6);                                                                      
} else {                                                                                               } else {                                                                                            
monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));                                       monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));                                    
}                                                                                                      }                                                                                                   
Calendar centered = DateUtils.truncate(now, Calendar.DATE);                                            Calendar centered = DateUtils.truncate(now, Calendar.DATE);                                         
centered.add(Calendar.DATE, -3);                                                                       centered.add(Calendar.DATE, -3);                                                                    
Iterator it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);                                  | Iterator&lt;?&gt; it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);                        
assertWeekIterator(it, sunday);                                                                        assertWeekIterator(it, sunday);                                                                     
it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);                                             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);                                          
assertWeekIterator(it, monday);                                                                        assertWeekIterator(it, monday);                                                                     
it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);                                           it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);                                        
assertWeekIterator(it, today);                                                                         assertWeekIterator(it, today);                                                                      
it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);                                             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);                                          
assertWeekIterator(it, centered);                                                                      assertWeekIterator(it, centered);                                                                   
it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);                                    it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);                                 
assertWeekIterator(it, centered);                                                                      assertWeekIterator(it, centered);                                                                   
it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);                          it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);                       
assertWeekIterator(it, centered);                                                                      assertWeekIterator(it, centered);                                                                   
try {                                                                                                  try {                                                                                               
it.next();                                                                                             it.next();                                                                                          
fail();                                                                                                fail();                                                                                             
} catch (NoSuchElementException ex) {                                                                  } catch (NoSuchElementException ex) {                                                               
}                                                                                                      }                                                                                                   
it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);                                             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);                                          
it.next();                                                                                             it.next();                                                                                          
try {                                                                                                  try {                                                                                               
it.remove();                                                                                           it.remove();                                                                                        
} catch (UnsupportedOperationException ex) {                                                           } catch (UnsupportedOperationException ex) {                                                        
}                                                                                                      }                                                                                                   
now.add(Calendar.DATE, 1);                                                                             now.add(Calendar.DATE, 1);                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
