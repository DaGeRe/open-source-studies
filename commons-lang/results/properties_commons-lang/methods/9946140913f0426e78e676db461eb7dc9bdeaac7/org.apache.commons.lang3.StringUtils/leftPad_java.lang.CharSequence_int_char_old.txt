/**
 * <p>Left pad a String with a specified character.</p>
 *
 * <p>Pad to a size of {@code size}.</p>
 *
 * <pre>
 * StringUtils.leftPad(null, *, *)     = null
 * StringUtils.leftPad("", 3, 'z')     = "zzz"
 * StringUtils.leftPad("bat", 3, 'z')  = "bat"
 * StringUtils.leftPad("bat", 5, 'z')  = "zzbat"
 * StringUtils.leftPad("bat", 1, 'z')  = "bat"
 * StringUtils.leftPad("bat", -1, 'z') = "bat"
 * </pre>
 *
 * @param seq  the CharSequence to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return left padded String or original String if no padding is necessary,
 *  {@code null} if null String input
 * @since 2.0
 */
public static String leftPad(CharSequence seq, int size, char padChar) {
    if (seq == null) {
        return null;
    }
    int pads = size - seq.length();
    if (pads <= 0) {
        // returns original String when possible
        return seq.toString();
    }
    if (pads > PAD_LIMIT) {
        return leftPad(seq, size, String.valueOf(padChar));
    }
    return padding(pads, padChar).concat(seq.toString());
}