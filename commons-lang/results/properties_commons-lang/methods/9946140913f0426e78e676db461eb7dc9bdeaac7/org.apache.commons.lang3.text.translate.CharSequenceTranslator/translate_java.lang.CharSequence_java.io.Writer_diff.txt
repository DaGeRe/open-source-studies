/**
 * Translate an input onto a Writer. This is intentionally final as its algorithm is
 * tightly coupled with the abstract method of this class.
 *
 * @param input CharSequence that is being translated
 * @param out Writer to translate the text to
 * @throws IOException if and only if the Writer produces an IOException
 */
public final void translate(CharSequence input, Writer out) throws IOException {
    if (out == null) {
        throw new IllegalArgumentException("The Writer must not be null");
    }
    if (input == null) {
        return;
    }
    int sz = Character.codePointCount(input, 0, input.length());
    for (int i = 0; i < sz; i++) {
        // consumed is the number of codepoints consumed
        int consumed = translate(input, i, out);
        if (consumed == 0) {
            out.write(Character.toChars(Character.codePointAt(input, i)));
        } else {
            // contract with translators is that they have to understand codepoints
            // and they just took care of a surrogate pair
            for (int j = 0; j < consumed; j++) {
                if (i < sz - 2) {
                    i += Character.charCount(Character.codePointAt(input, i));
                } else {
                    // If the String ends with a high surrogate, just add the 1 and don't worry about such things
                    i++;
                }
            }
            // for loop will increment 1 anyway, so remove 1 to account for that
            i--;
        }
    }
}