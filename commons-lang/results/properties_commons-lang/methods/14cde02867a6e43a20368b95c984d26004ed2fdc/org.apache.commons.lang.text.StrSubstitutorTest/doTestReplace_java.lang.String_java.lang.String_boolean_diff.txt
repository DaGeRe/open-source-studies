// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {         private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {      
String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);                 String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);              
StrSubstitutor sub = new StrSubstitutor(values);                                                       StrSubstitutor sub = new StrSubstitutor(values);                                                    
// replace using String                                                                                // replace using String                                                                             
assertEquals(expectedResult, sub.replace(replaceTemplate));                                            assertEquals(expectedResult, sub.replace(replaceTemplate));                                         
if (substring) {                                                                                       if (substring) {                                                                                    
assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));      assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));   
}                                                                                                      }                                                                                                   
// replace using char[]                                                                                // replace using char[]                                                                             
char[] chars = replaceTemplate.toCharArray();                                                          char[] chars = replaceTemplate.toCharArray();                                                       
assertEquals(expectedResult, sub.replace(chars));                                                      assertEquals(expectedResult, sub.replace(chars));                                                   
if (substring) {                                                                                       if (substring) {                                                                                    
assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));                            assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));                         
}                                                                                                      }                                                                                                   
// replace using StringBuffer                                                                          // replace using StringBuffer                                                                       
StringBuffer buf = new StringBuffer(replaceTemplate);                                                  StringBuffer buf = new StringBuffer(replaceTemplate);                                               
assertEquals(expectedResult, sub.replace(buf));                                                        assertEquals(expectedResult, sub.replace(buf));                                                     
if (substring) {                                                                                       if (substring) {                                                                                    
assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));                              assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));                           
}                                                                                                      }                                                                                                   
// replace using StrBuilder                                                                            // replace using StrBuilder                                                                         
StrBuilder bld = new StrBuilder(replaceTemplate);                                                      StrBuilder bld = new StrBuilder(replaceTemplate);                                                   
assertEquals(expectedResult, sub.replace(bld));                                                        assertEquals(expectedResult, sub.replace(bld));                                                     
if (substring) {                                                                                       if (substring) {                                                                                    
assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));                              assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));                           
}                                                                                                      }                                                                                                   
// replace using object                                                                                // replace using object                                                                             
// toString returns template                                                                           // toString returns template                                                                        
MutableObject obj = new MutableObject(replaceTemplate);                                              | MutableObject&lt;String&gt; obj = new MutableObject&lt;String&gt;(replaceTemplate);                 
assertEquals(expectedResult, sub.replace(obj));                                                        assertEquals(expectedResult, sub.replace(obj));                                                     
// replace in StringBuffer                                                                             // replace in StringBuffer                                                                          
buf = new StringBuffer(replaceTemplate);                                                               buf = new StringBuffer(replaceTemplate);                                                            
assertEquals(true, sub.replaceIn(buf));                                                                assertEquals(true, sub.replaceIn(buf));                                                             
assertEquals(expectedResult, buf.toString());                                                          assertEquals(expectedResult, buf.toString());                                                       
if (substring) {                                                                                       if (substring) {                                                                                    
buf = new StringBuffer(replaceTemplate);                                                               buf = new StringBuffer(replaceTemplate);                                                            
assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));                                           assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));                                        
// expect full result as remainder is untouched                                                        // expect full result as remainder is untouched                                                     
assertEquals(expectedResult, buf.toString());                                                          assertEquals(expectedResult, buf.toString());                                                       
}                                                                                                      }                                                                                                   
// replace in StrBuilder                                                                               // replace in StrBuilder                                                                            
bld = new StrBuilder(replaceTemplate);                                                                 bld = new StrBuilder(replaceTemplate);                                                              
assertEquals(true, sub.replaceIn(bld));                                                                assertEquals(true, sub.replaceIn(bld));                                                             
assertEquals(expectedResult, bld.toString());                                                          assertEquals(expectedResult, bld.toString());                                                       
if (substring) {                                                                                       if (substring) {                                                                                    
bld = new StrBuilder(replaceTemplate);                                                                 bld = new StrBuilder(replaceTemplate);                                                              
assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));                                           assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));                                        
// expect full result as remainder is untouched                                                        // expect full result as remainder is untouched                                                     
assertEquals(expectedResult, bld.toString());                                                          assertEquals(expectedResult, bld.toString());                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
