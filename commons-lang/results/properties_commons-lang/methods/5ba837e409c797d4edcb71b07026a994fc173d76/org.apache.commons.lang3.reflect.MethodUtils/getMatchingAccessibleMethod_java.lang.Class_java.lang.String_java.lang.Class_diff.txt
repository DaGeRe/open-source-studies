                                                                                                     | /**                                                                                                 
                                                                                                     | * &lt;p&gt;Find an accessible method that matches the given name and has compatible parameters.     
                                                                                                     | * Compatible parameters mean that every method parameter is assignable from                         
                                                                                                     | * the given parameters.                                                                             
                                                                                                     | * In other words, it finds a method with the given name                                             
                                                                                                     | * that will take the parameters given.&lt;p&gt;                                                     
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;This method is used by                                                                   
                                                                                                     | * {@link                                                                                            
                                                                                                     | * #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.          
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;This method can match primitive parameter by passing in wrapper classes.                 
                                                                                                     | * For example, a &lt;code&gt;Boolean&lt;/code&gt; will match a primitive &lt;code&gt;boolean&lt;/cod
                                                                                                     | * parameter.                                                                                        
                                                                                                     | *                                                                                                   
                                                                                                     | * @param cls find method in this class                                                              
                                                                                                     | * @param methodName find method with this name                                                      
                                                                                                     | * @param parameterTypes find method with most compatible parameters                                 
                                                                                                     | * @return The accessible method                                                                     
                                                                                                     | */                                                                                                  
                                                                                                     | public static Method getMatchingAccessibleMethod(Class&lt;?&gt; cls, String methodName, Class&lt;?&g
                                                                                                     | try {                                                                                               
                                                                                                     | Method method = cls.getMethod(methodName, parameterTypes);                                          
                                                                                                     | MemberUtils.setAccessibleWorkaround(method);                                                        
                                                                                                     | return method;                                                                                      
                                                                                                     | } catch (NoSuchMethodException e) {                                                                 
                                                                                                     | /* SWALLOW */                                                                                       
                                                                                                     | }                                                                                                   
                                                                                                     | // search through all methods                                                                       
                                                                                                     | Method bestMatch = null;                                                                            
                                                                                                     | Method[] methods = cls.getMethods();                                                                
                                                                                                     | for (int i = 0, size = methods.length; i &lt; size; i++) {                                          
                                                                                                     | if (methods[i].getName().equals(methodName)) {                                                      
                                                                                                     | // compare parameters                                                                               
                                                                                                     | if (ClassUtils.isAssignable(parameterTypes, methods[i].getParameterTypes(), true)) {                
                                                                                                     | // get accessible version of method                                                                 
                                                                                                     | Method accessibleMethod = getAccessibleMethod(methods[i]);                                          
                                                                                                     | if (accessibleMethod != null) {                                                                     
                                                                                                     | if (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bes
                                                                                                     | bestMatch = accessibleMethod;                                                                       
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | if (bestMatch != null) {                                                                            
                                                                                                     | MemberUtils.setAccessibleWorkaround(bestMatch);                                                     
                                                                                                     | }                                                                                                   
                                                                                                     | return bestMatch;                                                                                   
                                                                                                     | }                                                                                                   
