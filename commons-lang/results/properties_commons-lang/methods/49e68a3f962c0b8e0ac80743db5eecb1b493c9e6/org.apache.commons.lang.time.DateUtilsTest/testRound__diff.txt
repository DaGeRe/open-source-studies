// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* Tests various values with the round method                                                           * Tests various values with the round method                                                        
*/                                                                                                     */                                                                                                  
public void testRound() throws Exception {                                                             public void testRound() throws Exception {                                                          
// tests for public static Date round(Date date, int field)                                            // tests for public static Date round(Date date, int field)                                         
assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Cale   assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Cale
assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Cale   assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Cale
assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Ca   assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Ca
assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Ca   assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Ca
assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0   assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0
assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date   assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date
assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date   assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date
assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Ca   assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Ca
assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Ca   assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Ca
assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtil   assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtil
assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils   assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils
assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUt   assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUt
assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUti   assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUti
assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUt   assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUt
assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUti   assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUti
assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils   assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils
assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils   assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils
assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils   assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils
assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils   assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils
// tests for public static Date round(Object date, int field)                                          // tests for public static Date round(Object date, int field)                                       
assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) da   assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) da
assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) da   assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) da
assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object)    assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) 
assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object)    assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) 
assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Obj   assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Obj
assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Obj   assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Obj
assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object)    assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) 
assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object)    assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) 
assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtil   assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtil
assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils   assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils
assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUt   assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUt
assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUti   assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUti
assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUt   assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUt
assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUti   assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUti
assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"   assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"
assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000")   assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000")
assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils   assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils
assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils   assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils
assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils   assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils
assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils   assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils
try {                                                                                                  try {                                                                                               
DateUtils.round((Date) null, Calendar.SECOND);                                                         DateUtils.round((Date) null, Calendar.SECOND);                                                      
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.round((Calendar) null, Calendar.SECOND);                                                     DateUtils.round((Calendar) null, Calendar.SECOND);                                                  
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.round((Object) null, Calendar.SECOND);                                                       DateUtils.round((Object) null, Calendar.SECOND);                                                    
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.round("", Calendar.SECOND);                                                                  DateUtils.round("", Calendar.SECOND);                                                               
fail();                                                                                                fail();                                                                                             
} catch (ClassCastException ex) {                                                                      } catch (ClassCastException ex) {                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.round(date1, -9999);                                                                         DateUtils.round(date1, -9999);                                                                      
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils   assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils
assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils   assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils
assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils   assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils
assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils   assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils
// Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560                                   | // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 / LANG-13                        
// Test rounding across the beginning of daylight saving time                                          // Test rounding across the beginning of daylight saving time                                       
TimeZone.setDefault(zone);                                                                             TimeZone.setDefault(zone);                                                                          
dateTimeParser.setTimeZone(zone);                                                                      dateTimeParser.setTimeZone(zone);                                                                   
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.
if (SystemUtils.isJavaVersionAtLeast(1.4f)) {                                                          if (SystemUtils.isJavaVersionAtLeast(1.4f)) {                                                       
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.
assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.   assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.
} else {                                                                                               } else {                                                                                            
this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JA   this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JA
}                                                                                                      }                                                                                                   
TimeZone.setDefault(defaultZone);                                                                      TimeZone.setDefault(defaultZone);                                                                   
dateTimeParser.setTimeZone(defaultZone);                                                               dateTimeParser.setTimeZone(defaultZone);                                                            
}                                                                                                      }                                                                                                   
