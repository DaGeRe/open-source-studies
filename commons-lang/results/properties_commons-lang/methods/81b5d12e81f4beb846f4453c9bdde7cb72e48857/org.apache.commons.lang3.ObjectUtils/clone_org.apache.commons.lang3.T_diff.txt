/**                                                                                                    /**                                                                                                 
* Clone an object.                                                                                   | * &lt;p&gt;Clone an object.&lt;/p&gt;                                                               
*                                                                                                      *                                                                                                   
* @param &lt;T&gt; the type of the object                                                              * @param &lt;T&gt; the type of the object                                                           
* @param o the object to clone                                                                       | * @param obj  the object to clone, null returns null                                                
* @return the clone if the object implements {@link Cloneable} otherwise &lt;code&gt;null&lt;/code&g | * @return the clone if the object implements {@link Cloneable} otherwise {@code null}               
* @throws CloneFailedException if the object is cloneable and the clone operation fails                * @throws CloneFailedException if the object is cloneable and the clone operation fails             
* @since 3.0                                                                                           * @since 3.0                                                                                        
*/                                                                                                     */                                                                                                  
public static &lt;T&gt; T clone(final T o) {                                                         | public static &lt;T&gt; T clone(final T obj) {                                                      
if (o instanceof Cloneable) {                                                                        | if (obj instanceof Cloneable) {                                                                     
final Object result;                                                                                   final Object result;                                                                                
if (o.getClass().isArray()) {                                                                        | if (obj.getClass().isArray()) {                                                                     
final Class&lt;?&gt; componentType = o.getClass().getComponentType();                                | final Class&lt;?&gt; componentType = obj.getClass().getComponentType();                             
if (!componentType.isPrimitive()) {                                                                    if (!componentType.isPrimitive()) {                                                                 
result = ((Object[]) o).clone();                                                                     | result = ((Object[]) obj).clone();                                                                  
} else {                                                                                               } else {                                                                                            
int length = Array.getLength(o);                                                                     | int length = Array.getLength(obj);                                                                  
result = Array.newInstance(componentType, length);                                                     result = Array.newInstance(componentType, length);                                                  
while (length-- &gt; 0) {                                                                              while (length-- &gt; 0) {                                                                           
Array.set(result, length, Array.get(o, length));                                                     | Array.set(result, length, Array.get(obj, length));                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
try {                                                                                                  try {                                                                                               
final Method clone = o.getClass().getMethod("clone");                                                | final Method clone = obj.getClass().getMethod("clone");                                             
result = clone.invoke(o);                                                                            | result = clone.invoke(obj);                                                                         
} catch (final NoSuchMethodException e) {                                                              } catch (final NoSuchMethodException e) {                                                           
throw new CloneFailedException("Cloneable type " + o.getClass().getName() + " has no clone method",  | throw new CloneFailedException("Cloneable type " + obj.getClass().getName() + " has no clone method"
} catch (final IllegalAccessException e) {                                                             } catch (final IllegalAccessException e) {                                                          
throw new CloneFailedException("Cannot clone Cloneable type " + o.getClass().getName(), e);          | throw new CloneFailedException("Cannot clone Cloneable type " + obj.getClass().getName(), e);       
} catch (final InvocationTargetException e) {                                                          } catch (final InvocationTargetException e) {                                                       
throw new CloneFailedException("Exception cloning Cloneable type " + o.getClass().getName(), e.getCa | throw new CloneFailedException("Exception cloning Cloneable type " + obj.getClass().getName(), e.get
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
@SuppressWarnings("unchecked")                                                                         @SuppressWarnings("unchecked")                                                                      
final T checked = (T) result;                                                                          final T checked = (T) result;                                                                       
return checked;                                                                                        return checked;                                                                                     
}                                                                                                      }                                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
