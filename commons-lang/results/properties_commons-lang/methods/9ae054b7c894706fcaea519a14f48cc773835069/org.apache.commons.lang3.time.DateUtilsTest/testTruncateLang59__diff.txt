/**                                                                                                    /**                                                                                                 
* Tests for LANG-59                                                                                    * Tests for LANG-59                                                                                 
*                                                                                                      *                                                                                                   
* see http://issues.apache.org/jira/browse/LANG-59                                                     * see http://issues.apache.org/jira/browse/LANG-59                                                  
*/                                                                                                     */                                                                                                  
public void testTruncateLang59() throws Exception {                                                    public void testTruncateLang59() throws Exception {                                                 
if (!SystemUtils.isJavaVersionAtLeast(1.4f)) {                                                       | if (!SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {                                                  
this.warn("WARNING: Test for LANG-59 not run since the current version is " + SystemUtils.JAVA_VERSI | this.warn("WARNING: Test for LANG-59 not run since the current version is " + SystemUtils.JAVA_SPECI
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Set TimeZone to Mountain Time                                                                       // Set TimeZone to Mountain Time                                                                    
TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");                                                    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");                                                 
TimeZone.setDefault(MST_MDT);                                                                          TimeZone.setDefault(MST_MDT);                                                                       
DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");                                 DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");                              
format.setTimeZone(MST_MDT);                                                                           format.setTimeZone(MST_MDT);                                                                        
Date oct31_01MDT = new Date(1099206000000L);                                                           Date oct31_01MDT = new Date(1099206000000L);                                                        
// - 1 hour                                                                                            // - 1 hour                                                                                         
Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);                                            Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);                                         
// + 2 minutes                                                                                         // + 2 minutes                                                                                      
Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);                                       Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);                                    
// + 3 seconds                                                                                         // + 3 seconds                                                                                      
Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);                                   Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);                                
// + 4 milliseconds                                                                                    // + 4 milliseconds                                                                                 
Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);                                Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);                             
assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));            assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));         
assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));         assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));      
assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));      assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));   
assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));   assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));
assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT   assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT
// ------- Demonstrate Problem -------                                                                 // ------- Demonstrate Problem -------                                                              
Calendar gval = Calendar.getInstance();                                                                Calendar gval = Calendar.getInstance();                                                             
gval.setTime(new Date(oct31_01MDT.getTime()));                                                         gval.setTime(new Date(oct31_01MDT.getTime()));                                                      
// set minutes to the same value                                                                       // set minutes to the same value                                                                    
gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));                                                  gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));                                               
assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);       assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);    
// ---------- Test Truncate ----------                                                                 // ---------- Test Truncate ----------                                                              
assertEquals("Truncate Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_0   assertEquals("Truncate Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_0
assertEquals("Truncate Calendar.SECOND", oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT,   assertEquals("Truncate Calendar.SECOND", oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT,
assertEquals("Truncate Calendar.MINUTE", oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Ca   assertEquals("Truncate Calendar.MINUTE", oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Ca
assertEquals("Truncate Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT,    assertEquals("Truncate Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, 
assertEquals("Truncate Calendar.HOUR", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calenda   assertEquals("Truncate Calendar.HOUR", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calenda
assertEquals("Truncate Calendar.DATE", oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.D   assertEquals("Truncate Calendar.DATE", oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.D
// ---------- Test Round (down) ----------                                                             // ---------- Test Round (down) ----------                                                          
assertEquals("Round Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MD   assertEquals("Round Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MD
assertEquals("Round Calendar.SECOND", oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calen   assertEquals("Round Calendar.SECOND", oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calen
assertEquals("Round Calendar.MINUTE", oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar   assertEquals("Round Calendar.MINUTE", oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar
assertEquals("Round Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calend   assertEquals("Round Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calend
assertEquals("Round Calendar.HOUR", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR   assertEquals("Round Calendar.HOUR", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR
assertEquals("Round Calendar.DATE", oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));   assertEquals("Round Calendar.DATE", oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));
// restore default time zone                                                                           // restore default time zone                                                                        
TimeZone.setDefault(defaultZone);                                                                      TimeZone.setDefault(defaultZone);                                                                   
}                                                                                                      }                                                                                                   
