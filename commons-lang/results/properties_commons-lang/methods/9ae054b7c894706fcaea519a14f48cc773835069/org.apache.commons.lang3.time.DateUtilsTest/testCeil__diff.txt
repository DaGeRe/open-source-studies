/**                                                                                                    /**                                                                                                 
* Tests various values with the ceiling method                                                         * Tests various values with the ceiling method                                                      
*/                                                                                                     */                                                                                                  
public void testCeil() throws Exception {                                                              public void testCeil() throws Exception {                                                           
// test javadoc                                                                                        // test javadoc                                                                                     
assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUt   assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUt
assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUti   assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUti
// tests public static Date ceiling(Date date, int field)                                              // tests public static Date ceiling(Date date, int field)                                           
assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1,    assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, 
assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2,    assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, 
assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, C   assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, C
assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2   assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2
assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(   assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(
assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(d   assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(d
assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1   assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1
assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2   assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2
assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUt   assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUt
assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUti   assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUti
assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), Date   assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), Date
assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateU   assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateU
assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), Date   assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), Date
assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateU   assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateU
assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti   assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti
assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti   assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti
assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti   assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti
assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti   assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti
// tests public static Date ceiling(Object date, int field)                                            // tests public static Date ceiling(Object date, int field)                                         
assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object   assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object
assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object   assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object
assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object)   assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object)
assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Obje   assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Obje
assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(   assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(
assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((   assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((
assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Obje   assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Obje
assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Obje   assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Obje
assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUt   assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUt
assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUti   assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUti
assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), Date   assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), Date
assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateU   assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateU
assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), Date   assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), Date
assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateU   assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateU
assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti   assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti
assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti   assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti
assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti   assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti
assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti   assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti
assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.00   assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.00
assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000   assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000
assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti   assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti
assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti   assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUti
assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti   assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti
assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti   assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUti
try {                                                                                                  try {                                                                                               
DateUtils.ceiling((Date) null, Calendar.SECOND);                                                       DateUtils.ceiling((Date) null, Calendar.SECOND);                                                    
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.ceiling((Calendar) null, Calendar.SECOND);                                                   DateUtils.ceiling((Calendar) null, Calendar.SECOND);                                                
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.ceiling((Object) null, Calendar.SECOND);                                                     DateUtils.ceiling((Object) null, Calendar.SECOND);                                                  
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.ceiling("", Calendar.SECOND);                                                                DateUtils.ceiling("", Calendar.SECOND);                                                             
fail();                                                                                                fail();                                                                                             
} catch (ClassCastException ex) {                                                                      } catch (ClassCastException ex) {                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
DateUtils.ceiling(date1, -9999);                                                                       DateUtils.ceiling(date1, -9999);                                                                    
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
// Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560                                     // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560                                  
// Test ceiling across the beginning of daylight saving time                                           // Test ceiling across the beginning of daylight saving time                                        
TimeZone.setDefault(zone);                                                                             TimeZone.setDefault(zone);                                                                          
dateTimeParser.setTimeZone(zone);                                                                      dateTimeParser.setTimeZone(zone);                                                                   
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0
if (SystemUtils.isJavaVersionAtLeast(1.4f)) {                                                        | if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {                                                   
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0
assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0   assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:0
} else {                                                                                               } else {                                                                                            
this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAV | this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAV
}                                                                                                      }                                                                                                   
TimeZone.setDefault(defaultZone);                                                                      TimeZone.setDefault(defaultZone);                                                                   
dateTimeParser.setTimeZone(defaultZone);                                                               dateTimeParser.setTimeZone(defaultZone);                                                            
// Bug 31395, large dates                                                                              // Bug 31395, large dates                                                                           
// fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis                                                // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis                                             
Date endOfTime = new Date(Long.MAX_VALUE);                                                             Date endOfTime = new Date(Long.MAX_VALUE);                                                          
GregorianCalendar endCal = new GregorianCalendar();                                                    GregorianCalendar endCal = new GregorianCalendar();                                                 
endCal.setTime(endOfTime);                                                                             endCal.setTime(endOfTime);                                                                          
try {                                                                                                  try {                                                                                               
DateUtils.ceiling(endCal, Calendar.DATE);                                                              DateUtils.ceiling(endCal, Calendar.DATE);                                                           
fail();                                                                                                fail();                                                                                             
} catch (ArithmeticException ex) {                                                                     } catch (ArithmeticException ex) {                                                                  
}                                                                                                      }                                                                                                   
endCal.set(Calendar.YEAR, 280000001);                                                                  endCal.set(Calendar.YEAR, 280000001);                                                               
try {                                                                                                  try {                                                                                               
DateUtils.ceiling(endCal, Calendar.DATE);                                                              DateUtils.ceiling(endCal, Calendar.DATE);                                                           
fail();                                                                                                fail();                                                                                             
} catch (ArithmeticException ex) {                                                                     } catch (ArithmeticException ex) {                                                                  
}                                                                                                      }                                                                                                   
endCal.set(Calendar.YEAR, 280000000);                                                                  endCal.set(Calendar.YEAR, 280000000);                                                               
Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);                                               Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);                                            
assertEquals(0, cal.get(Calendar.HOUR));                                                               assertEquals(0, cal.get(Calendar.HOUR));                                                            
}                                                                                                      }                                                                                                   
