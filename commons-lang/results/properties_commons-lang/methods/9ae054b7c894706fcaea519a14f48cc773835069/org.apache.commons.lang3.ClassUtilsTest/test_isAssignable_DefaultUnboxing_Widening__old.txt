public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {
    boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);
    // test byte conversions
    assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE));
    assertEquals("byte -> byte", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));
    assertEquals("byte -> short", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));
    assertEquals("byte -> int", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));
    assertEquals("byte -> long", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));
    assertEquals("byte -> float", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));
    assertEquals("byte -> double", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));
    assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));
    // test short conversions
    assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE));
    assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE));
    assertEquals("short -> short", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));
    assertEquals("short -> int", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));
    assertEquals("short -> long", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));
    assertEquals("short -> float", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));
    assertEquals("short -> double", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));
    assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE));
    // test char conversions
    assertEquals("char -> char", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE));
    assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE));
    assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE));
    assertEquals("char -> int", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE));
    assertEquals("char -> long", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));
    assertEquals("char -> float", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE));
    assertEquals("char -> double", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE));
    assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE));
    // test int conversions
    assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE));
    assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE));
    assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE));
    assertEquals("int -> int", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));
    assertEquals("int -> long", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));
    assertEquals("int -> float", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));
    assertEquals("int -> double", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));
    assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));
    // test long conversions
    assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE));
    assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE));
    assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE));
    assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE));
    assertEquals("long -> long", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));
    assertEquals("long -> float", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));
    assertEquals("long -> double", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));
    assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE));
    // test float conversions
    assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE));
    assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE));
    assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE));
    assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE));
    assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE));
    assertEquals("float -> float", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));
    assertEquals("float -> double", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));
    assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE));
    // test double conversions
    assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE));
    assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE));
    assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE));
    assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE));
    assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE));
    assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE));
    assertEquals("double -> double", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));
    assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE));
    // test boolean conversions
    assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE));
    assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));
    assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE));
    assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));
    assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE));
    assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE));
    assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE));
    assertEquals("boolean -> boolean", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));
}