public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {                            public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {                         
boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);                                         | boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);                                    
// test byte conversions                                                                               // test byte conversions                                                                            
assertFalse("byte -&gt; char", ClassUtils.isAssignable(Byte.class, Character.TYPE));                   assertFalse("byte -&gt; char", ClassUtils.isAssignable(Byte.class, Character.TYPE));                
assertEquals("byte -&gt; byte", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));           assertEquals("byte -&gt; byte", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));        
assertEquals("byte -&gt; short", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));         assertEquals("byte -&gt; short", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));      
assertEquals("byte -&gt; int", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));         assertEquals("byte -&gt; int", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));      
assertEquals("byte -&gt; long", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));           assertEquals("byte -&gt; long", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));        
assertEquals("byte -&gt; float", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));         assertEquals("byte -&gt; float", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));      
assertEquals("byte -&gt; double", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));       assertEquals("byte -&gt; double", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));    
assertFalse("byte -&gt; boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));                  assertFalse("byte -&gt; boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));               
// test short conversions                                                                              // test short conversions                                                                           
assertFalse("short -&gt; char", ClassUtils.isAssignable(Short.class, Character.TYPE));                 assertFalse("short -&gt; char", ClassUtils.isAssignable(Short.class, Character.TYPE));              
assertFalse("short -&gt; byte", ClassUtils.isAssignable(Short.class, Byte.TYPE));                      assertFalse("short -&gt; byte", ClassUtils.isAssignable(Short.class, Byte.TYPE));                   
assertEquals("short -&gt; short", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));       assertEquals("short -&gt; short", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));    
assertEquals("short -&gt; int", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));       assertEquals("short -&gt; int", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));    
assertEquals("short -&gt; long", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));         assertEquals("short -&gt; long", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));      
assertEquals("short -&gt; float", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));       assertEquals("short -&gt; float", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));    
assertEquals("short -&gt; double", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));     assertEquals("short -&gt; double", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));  
assertFalse("short -&gt; boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE));                assertFalse("short -&gt; boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE));             
// test char conversions                                                                               // test char conversions                                                                            
assertEquals("char -&gt; char", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE)   assertEquals("char -&gt; char", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE)
assertFalse("char -&gt; byte", ClassUtils.isAssignable(Character.class, Byte.TYPE));                   assertFalse("char -&gt; byte", ClassUtils.isAssignable(Character.class, Byte.TYPE));                
assertFalse("char -&gt; short", ClassUtils.isAssignable(Character.class, Short.TYPE));                 assertFalse("char -&gt; short", ClassUtils.isAssignable(Character.class, Short.TYPE));              
assertEquals("char -&gt; int", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE));    assertEquals("char -&gt; int", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE)); 
assertEquals("char -&gt; long", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));      assertEquals("char -&gt; long", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));   
assertEquals("char -&gt; float", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE));    assertEquals("char -&gt; float", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE)); 
assertEquals("char -&gt; double", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE))   assertEquals("char -&gt; double", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE))
assertFalse("char -&gt; boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE));             assertFalse("char -&gt; boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE));          
// test int conversions                                                                                // test int conversions                                                                             
assertFalse("int -&gt; char", ClassUtils.isAssignable(Integer.class, Character.TYPE));                 assertFalse("int -&gt; char", ClassUtils.isAssignable(Integer.class, Character.TYPE));              
assertFalse("int -&gt; byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE));                      assertFalse("int -&gt; byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE));                   
assertFalse("int -&gt; short", ClassUtils.isAssignable(Integer.class, Short.TYPE));                    assertFalse("int -&gt; short", ClassUtils.isAssignable(Integer.class, Short.TYPE));                 
assertEquals("int -&gt; int", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));       assertEquals("int -&gt; int", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));    
assertEquals("int -&gt; long", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));         assertEquals("int -&gt; long", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));      
assertEquals("int -&gt; float", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));       assertEquals("int -&gt; float", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));    
assertEquals("int -&gt; double", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));     assertEquals("int -&gt; double", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));  
assertFalse("int -&gt; boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));                assertFalse("int -&gt; boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));             
// test long conversions                                                                               // test long conversions                                                                            
assertFalse("long -&gt; char", ClassUtils.isAssignable(Long.class, Character.TYPE));                   assertFalse("long -&gt; char", ClassUtils.isAssignable(Long.class, Character.TYPE));                
assertFalse("long -&gt; byte", ClassUtils.isAssignable(Long.class, Byte.TYPE));                        assertFalse("long -&gt; byte", ClassUtils.isAssignable(Long.class, Byte.TYPE));                     
assertFalse("long -&gt; short", ClassUtils.isAssignable(Long.class, Short.TYPE));                      assertFalse("long -&gt; short", ClassUtils.isAssignable(Long.class, Short.TYPE));                   
assertFalse("long -&gt; int", ClassUtils.isAssignable(Long.class, Integer.TYPE));                      assertFalse("long -&gt; int", ClassUtils.isAssignable(Long.class, Integer.TYPE));                   
assertEquals("long -&gt; long", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));           assertEquals("long -&gt; long", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));        
assertEquals("long -&gt; float", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));         assertEquals("long -&gt; float", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));      
assertEquals("long -&gt; double", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));       assertEquals("long -&gt; double", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));    
assertFalse("long -&gt; boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE));                  assertFalse("long -&gt; boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE));               
// test float conversions                                                                              // test float conversions                                                                           
assertFalse("float -&gt; char", ClassUtils.isAssignable(Float.class, Character.TYPE));                 assertFalse("float -&gt; char", ClassUtils.isAssignable(Float.class, Character.TYPE));              
assertFalse("float -&gt; byte", ClassUtils.isAssignable(Float.class, Byte.TYPE));                      assertFalse("float -&gt; byte", ClassUtils.isAssignable(Float.class, Byte.TYPE));                   
assertFalse("float -&gt; short", ClassUtils.isAssignable(Float.class, Short.TYPE));                    assertFalse("float -&gt; short", ClassUtils.isAssignable(Float.class, Short.TYPE));                 
assertFalse("float -&gt; int", ClassUtils.isAssignable(Float.class, Integer.TYPE));                    assertFalse("float -&gt; int", ClassUtils.isAssignable(Float.class, Integer.TYPE));                 
assertFalse("float -&gt; long", ClassUtils.isAssignable(Float.class, Long.TYPE));                      assertFalse("float -&gt; long", ClassUtils.isAssignable(Float.class, Long.TYPE));                   
assertEquals("float -&gt; float", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));       assertEquals("float -&gt; float", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));    
assertEquals("float -&gt; double", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));     assertEquals("float -&gt; double", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));  
assertFalse("float -&gt; boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE));                assertFalse("float -&gt; boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE));             
// test double conversions                                                                             // test double conversions                                                                          
assertFalse("double -&gt; char", ClassUtils.isAssignable(Double.class, Character.TYPE));               assertFalse("double -&gt; char", ClassUtils.isAssignable(Double.class, Character.TYPE));            
assertFalse("double -&gt; byte", ClassUtils.isAssignable(Double.class, Byte.TYPE));                    assertFalse("double -&gt; byte", ClassUtils.isAssignable(Double.class, Byte.TYPE));                 
assertFalse("double -&gt; short", ClassUtils.isAssignable(Double.class, Short.TYPE));                  assertFalse("double -&gt; short", ClassUtils.isAssignable(Double.class, Short.TYPE));               
assertFalse("double -&gt; int", ClassUtils.isAssignable(Double.class, Integer.TYPE));                  assertFalse("double -&gt; int", ClassUtils.isAssignable(Double.class, Integer.TYPE));               
assertFalse("double -&gt; long", ClassUtils.isAssignable(Double.class, Long.TYPE));                    assertFalse("double -&gt; long", ClassUtils.isAssignable(Double.class, Long.TYPE));                 
assertFalse("double -&gt; float", ClassUtils.isAssignable(Double.class, Float.TYPE));                  assertFalse("double -&gt; float", ClassUtils.isAssignable(Double.class, Float.TYPE));               
assertEquals("double -&gt; double", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));   assertEquals("double -&gt; double", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));
assertFalse("double -&gt; boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE));              assertFalse("double -&gt; boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE));           
// test boolean conversions                                                                            // test boolean conversions                                                                         
assertFalse("boolean -&gt; char", ClassUtils.isAssignable(Boolean.class, Character.TYPE));             assertFalse("boolean -&gt; char", ClassUtils.isAssignable(Boolean.class, Character.TYPE));          
assertFalse("boolean -&gt; byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));                  assertFalse("boolean -&gt; byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));               
assertFalse("boolean -&gt; short", ClassUtils.isAssignable(Boolean.class, Short.TYPE));                assertFalse("boolean -&gt; short", ClassUtils.isAssignable(Boolean.class, Short.TYPE));             
assertFalse("boolean -&gt; int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));                assertFalse("boolean -&gt; int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));             
assertFalse("boolean -&gt; long", ClassUtils.isAssignable(Boolean.class, Long.TYPE));                  assertFalse("boolean -&gt; long", ClassUtils.isAssignable(Boolean.class, Long.TYPE));               
assertFalse("boolean -&gt; float", ClassUtils.isAssignable(Boolean.class, Float.TYPE));                assertFalse("boolean -&gt; float", ClassUtils.isAssignable(Boolean.class, Float.TYPE));             
assertFalse("boolean -&gt; double", ClassUtils.isAssignable(Boolean.class, Double.TYPE));              assertFalse("boolean -&gt; double", ClassUtils.isAssignable(Boolean.class, Double.TYPE));           
assertEquals("boolean -&gt; boolean", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYP   assertEquals("boolean -&gt; boolean", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYP
}                                                                                                      }                                                                                                   
