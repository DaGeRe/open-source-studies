/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Appends to the &lt;code&gt;builder&lt;/code&gt; the deep comparison of                      * &lt;p&gt;Appends to the &lt;code&gt;builder&lt;/code&gt; the deep comparison of                   
* two &lt;code&gt;Object&lt;/code&gt; arrays.&lt;/p&gt;                                                * two &lt;code&gt;Object&lt;/code&gt; arrays.&lt;/p&gt;                                             
*                                                                                                      *                                                                                                   
* &lt;ol&gt;                                                                                           * &lt;ol&gt;                                                                                        
*  &lt;li&gt;Check if arrays are the same using &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;                 *  &lt;li&gt;Check if arrays are the same using &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;              
*  &lt;li&gt;Check if for &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; is less than    *  &lt;li&gt;Check if for &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; is less than 
*  &lt;li&gt;Check array length, a short length array is less than a long length array&lt;/li&gt;      *  &lt;li&gt;Check array length, a short length array is less than a long length array&lt;/li&gt;   
*  &lt;li&gt;Check array contents element by element using {@link #append(Object, Object, Comparator   *  &lt;li&gt;Check array contents element by element using {@link #append(Object, Object, Comparator
* &lt;/ol&gt;                                                                                          * &lt;/ol&gt;                                                                                       
*                                                                                                      *                                                                                                   
* &lt;p&gt;This method will also will be called for the top level of multi-dimensional,                * &lt;p&gt;This method will also will be called for the top level of multi-dimensional,             
* ragged, and multi-typed arrays.&lt;/p&gt;                                                            * ragged, and multi-typed arrays.&lt;/p&gt;                                                         
*                                                                                                      *                                                                                                   
* @param lhs  left-hand array                                                                          * @param lhs  left-hand array                                                                       
* @param rhs  right-hand array                                                                         * @param rhs  right-hand array                                                                      
* @param comparator  &lt;code&gt;Comparator&lt;/code&gt; to use to compare the array elements,         * @param comparator  &lt;code&gt;Comparator&lt;/code&gt; to use to compare the array elements,      
*  &lt;code&gt;null&lt;/code&gt; means to treat &lt;code&gt;lhs&lt;/code&gt; elements as &lt;code&gt   *  &lt;code&gt;null&lt;/code&gt; means to treat &lt;code&gt;lhs&lt;/code&gt; elements as &lt;code&gt
* @return this - used to chain append calls                                                            * @return this - used to chain append calls                                                         
* @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible             * @throws ClassCastException  if &lt;code&gt;rhs&lt;/code&gt; is not assignment-compatible          
*  with &lt;code&gt;lhs&lt;/code&gt;                                                                   *  with &lt;code&gt;lhs&lt;/code&gt;                                                                
* @since 2.0                                                                                           * @since 2.0                                                                                        
*/                                                                                                     */                                                                                                  
public CompareToBuilder append(Object[] lhs, Object[] rhs, Comparator comparator) {                  | public CompareToBuilder append(Object[] lhs, Object[] rhs, Comparator&lt;?&gt; comparator) {        
if (comparison != 0) {                                                                                 if (comparison != 0) {                                                                              
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs == rhs) {                                                                                      if (lhs == rhs) {                                                                                   
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs == null) {                                                                                     if (lhs == null) {                                                                                  
comparison = -1;                                                                                       comparison = -1;                                                                                    
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (rhs == null) {                                                                                     if (rhs == null) {                                                                                  
comparison = +1;                                                                                       comparison = +1;                                                                                    
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs.length != rhs.length) {                                                                        if (lhs.length != rhs.length) {                                                                     
comparison = (lhs.length &lt; rhs.length) ? -1 : +1;                                                   comparison = (lhs.length &lt; rhs.length) ? -1 : +1;                                                
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
for (int i = 0; i &lt; lhs.length && comparison == 0; i++) {                                           for (int i = 0; i &lt; lhs.length && comparison == 0; i++) {                                        
append(lhs[i], rhs[i], comparator);                                                                    append(lhs[i], rhs[i], comparator);                                                                 
}                                                                                                      }                                                                                                   
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
