                                                                                                     | /**                                                                                                 
                                                                                                     | * &lt;p&gt;Find an accessible constructor with compatible parameters.                               
                                                                                                     | * Compatible parameters mean that every method parameter is assignable from                         
                                                                                                     | * the given parameters. In other words, it finds constructor that will take                         
                                                                                                     | * the parameters given.&lt;/p&gt;                                                                   
                                                                                                     | *                                                                                                   
                                                                                                     | * &lt;p&gt;First it checks if there is constructor matching the exact signature.                    
                                                                                                     | * If no such, all the constructors of the class are tested if their signatures                      
                                                                                                     | * are assignment compatible with the parameter types.                                               
                                                                                                     | * The first matching constructor is returned.&lt;/p&gt;                                             
                                                                                                     | *                                                                                                   
                                                                                                     | * @param cls find constructor for this class                                                        
                                                                                                     | * @param parameterTypes find method with compatible parameters                                      
                                                                                                     | * @return a valid Constructor object. If there's no matching constructor, returns &lt;code&gt;null&l
                                                                                                     | */                                                                                                  
                                                                                                     | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | public static &lt;T&gt; Constructor&lt;T&gt; getMatchingAccessibleConstructor(Class&lt;T&gt; cls, Cl
                                                                                                     | // see if we can find the constructor directly                                                      
                                                                                                     | // most of the time this works and it's much faster                                                 
                                                                                                     | try {                                                                                               
                                                                                                     | Constructor&lt;T&gt; ctor = cls.getConstructor(parameterTypes);                                     
                                                                                                     | MemberUtils.setAccessibleWorkaround(ctor);                                                          
                                                                                                     | return ctor;                                                                                        
                                                                                                     | } catch (NoSuchMethodException e) {                                                                 
                                                                                                     | /* SWALLOW */                                                                                       
                                                                                                     | }                                                                                                   
                                                                                                     | Constructor&lt;T&gt; result = null;                                                                 
                                                                                                     | // search through all constructors                                                                  
                                                                                                     | Constructor&lt;?&gt;[] ctors = cls.getConstructors();                                               
                                                                                                     | for (int i = 0; i &lt; ctors.length; i++) {                                                         
                                                                                                     | // compare parameters                                                                               
                                                                                                     | if (ClassUtils.isAssignable(parameterTypes, ctors[i].getParameterTypes(), true)) {                  
                                                                                                     | // get accessible version of method                                                                 
                                                                                                     | Constructor&lt;T&gt; ctor = getAccessibleConstructor((Constructor&lt;T&gt;) ctors[i]);              
                                                                                                     | if (ctor != null) {                                                                                 
                                                                                                     | MemberUtils.setAccessibleWorkaround(ctor);                                                          
                                                                                                     | if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParamete
                                                                                                     | result = ctor;                                                                                      
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | return result;                                                                                      
                                                                                                     | }                                                                                                   
