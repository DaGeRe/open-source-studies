/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Constructs a new &lt;code&gt;NumberRange&lt;/code&gt; with the specified                    * &lt;p&gt;Constructs a new &lt;code&gt;NumberRange&lt;/code&gt; with the specified                 
* minimum and maximum numbers (both inclusive).&lt;/p&gt;                                              * minimum and maximum numbers (both inclusive).&lt;/p&gt;                                           
*                                                                                                      *                                                                                                   
* &lt;p&gt;The arguments may be passed in the order (min,max) or (max,min). The                        * &lt;p&gt;The arguments may be passed in the order (min,max) or (max,min). The                     
* {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods will return the                  * {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods will return the               
* correct value.&lt;/p&gt;                                                                             * correct value.&lt;/p&gt;                                                                          
*                                                                                                      *                                                                                                   
* &lt;p&gt;This constructor is designed to be used with two &lt;code&gt;Number&lt;/code&gt;            * &lt;p&gt;This constructor is designed to be used with two &lt;code&gt;Number&lt;/code&gt;         
* objects of the same type. If two objects of different types are passed in,                           * objects of the same type. If two objects of different types are passed in,                        
* an exception is thrown.&lt;/p&gt;                                                                    * an exception is thrown.&lt;/p&gt;                                                                 
*                                                                                                      *                                                                                                   
* @param num1  first number that defines the edge of the range, inclusive                              * @param num1  first number that defines the edge of the range, inclusive                           
* @param num2  second number that defines the edge of the range, inclusive                             * @param num2  second number that defines the edge of the range, inclusive                          
* @throws IllegalArgumentException if either number is &lt;code&gt;null&lt;/code&gt;                   * @throws IllegalArgumentException if either number is &lt;code&gt;null&lt;/code&gt;                
* @throws IllegalArgumentException if the numbers are of different types                               * @throws IllegalArgumentException if the numbers are of different types                            
* @throws IllegalArgumentException if the numbers don't implement &lt;code&gt;Comparable&lt;/code&gt   * @throws IllegalArgumentException if the numbers don't implement &lt;code&gt;Comparable&lt;/code&gt
*/                                                                                                     */                                                                                                  
public NumberRange(Number num1, Number num2) {                                                         public NumberRange(Number num1, Number num2) {                                                      
if (num1 == null || num2 == null) {                                                                    if (num1 == null || num2 == null) {                                                                 
throw new IllegalArgumentException("The numbers must not be null");                                    throw new IllegalArgumentException("The numbers must not be null");                                 
}                                                                                                      }                                                                                                   
if (num1.getClass() != num2.getClass()) {                                                              if (num1.getClass() != num2.getClass()) {                                                           
throw new IllegalArgumentException("The numbers must be of the same type");                            throw new IllegalArgumentException("The numbers must be of the same type");                         
}                                                                                                      }                                                                                                   
if (num1 instanceof Comparable == false) {                                                             if (num1 instanceof Comparable == false) {                                                          
throw new IllegalArgumentException("The numbers must implement Comparable");                           throw new IllegalArgumentException("The numbers must implement Comparable");                        
}                                                                                                      }                                                                                                   
if (num1 instanceof Double) {                                                                          if (num1 instanceof Double) {                                                                       
if (((Double) num1).isNaN() || ((Double) num2).isNaN()) {                                              if (((Double) num1).isNaN() || ((Double) num2).isNaN()) {                                           
throw new IllegalArgumentException("The number must not be NaN");                                      throw new IllegalArgumentException("The number must not be NaN");                                   
}                                                                                                      }                                                                                                   
} else if (num1 instanceof Float) {                                                                    } else if (num1 instanceof Float) {                                                                 
if (((Float) num1).isNaN() || ((Float) num2).isNaN()) {                                                if (((Float) num1).isNaN() || ((Float) num2).isNaN()) {                                             
throw new IllegalArgumentException("The number must not be NaN");                                      throw new IllegalArgumentException("The number must not be NaN");                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
int compare = ((Comparable) num1).compareTo(num2);                                                   | int compare = ((Comparable&lt;Number&gt;) num1).compareTo(num2);                                    
if (compare == 0) {                                                                                    if (compare == 0) {                                                                                 
this.min = num1;                                                                                       this.min = num1;                                                                                    
this.max = num1;                                                                                       this.max = num1;                                                                                    
} else if (compare &gt; 0) {                                                                           } else if (compare &gt; 0) {                                                                        
this.min = num2;                                                                                       this.min = num2;                                                                                    
this.max = num1;                                                                                       this.max = num1;                                                                                    
} else {                                                                                               } else {                                                                                            
this.min = num1;                                                                                       this.min = num1;                                                                                    
this.max = num2;                                                                                       this.max = num2;                                                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
