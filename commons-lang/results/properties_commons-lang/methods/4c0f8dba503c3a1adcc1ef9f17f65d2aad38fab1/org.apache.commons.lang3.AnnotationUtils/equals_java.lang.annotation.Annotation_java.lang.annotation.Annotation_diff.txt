/**                                                                                                    /**                                                                                                 
* Learn whether two annotations are equivalent as defined by                                         | * Learn whether two annotations are equivalent; dynamically created                                 
* {@link Annotation#equals(Object)}. This method is useful because                                   | * {@link Annotation} instances are always proxy objects which cannot be                             
* dynamically created {@link Annotation} instances are always proxy                                  | * depended upon to know how to implement {@link Annotation#equals(Object)}                          
* objects, which, though dependent upon implementation, very often cannot                            | * per spec.                                                                                         
* be depended upon to behave "normally" in terms of {@link #equals(Object)}                          |                                                                                                     
* implementation.                                                                                    |                                                                                                     
* @param a1 the first Annotation to compare                                                            * @param a1 the first Annotation to compare                                                         
* @param a2 the second Annotation to compare                                                           * @param a2 the second Annotation to compare                                                        
*/                                                                                                     */                                                                                                  
public static boolean equals(Annotation a1, Annotation a2) {                                           public static boolean equals(Annotation a1, Annotation a2) {                                        
if (a1 == a2) {                                                                                        if (a1 == a2) {                                                                                     
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
if (a1 == null || a2 == null) {                                                                        if (a1 == null || a2 == null) {                                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
Class&lt;? extends Annotation&gt; type = a1.annotationType();                                          Class&lt;? extends Annotation&gt; type = a1.annotationType();                                       
Class&lt;? extends Annotation&gt; type2 = a2.annotationType();                                         Class&lt;? extends Annotation&gt; type2 = a2.annotationType();                                      
Validate.notNull(type, "Annotation %s with null annotationType()", a1);                                Validate.notNull(type, "Annotation %s with null annotationType()", a1);                             
Validate.notNull(type2, "Annotation %s with null annotationType()", a2);                               Validate.notNull(type2, "Annotation %s with null annotationType()", a2);                            
if (!type.equals(type2)) {                                                                             if (!type.equals(type2)) {                                                                          
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
for (Method m : type.getDeclaredMethods()) {                                                           for (Method m : type.getDeclaredMethods()) {                                                        
if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {             if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {          
Object v1 = m.invoke(a1);                                                                              Object v1 = m.invoke(a1);                                                                           
Object v2 = m.invoke(a2);                                                                              Object v2 = m.invoke(a2);                                                                           
if (!memberEquals(m.getReturnType(), v1, v2)) {                                                        if (!memberEquals(m.getReturnType(), v1, v2)) {                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
