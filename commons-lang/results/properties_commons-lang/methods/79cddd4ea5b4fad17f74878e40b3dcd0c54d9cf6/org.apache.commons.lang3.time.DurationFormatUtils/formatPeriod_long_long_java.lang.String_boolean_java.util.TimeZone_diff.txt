/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Formats the time gap as a string, using the specified format.                               * &lt;p&gt;Formats the time gap as a string, using the specified format.                            
* Padding the left hand side of numbers with zeroes is optional and                                    * Padding the left hand side of numbers with zeroes is optional and                                 
* the timezone may be specified. &lt;/p&gt;                                                            * the timezone may be specified. &lt;/p&gt;                                                         
*                                                                                                      *                                                                                                   
* &lt;p&gt;When calculating the difference between months/days, it chooses to                          * &lt;p&gt;When calculating the difference between months/days, it chooses to                       
* calculate months first. So when working out the number of months and                                 * calculate months first. So when working out the number of months and                              
* days between January 15th and March 10th, it choose 1 month and                                      * days between January 15th and March 10th, it choose 1 month and                                   
* 23 days gained by choosing January-&gt;February = 1 month and then                                   * 23 days gained by choosing January-&gt;February = 1 month and then                                
* calculating days forwards, and not the 1 month and 26 days gained by                                 * calculating days forwards, and not the 1 month and 26 days gained by                              
* choosing March -&gt; February = 1 month and then calculating days                                    * choosing March -&gt; February = 1 month and then calculating days                                 
* backwards. &lt;/p&gt;                                                                                * backwards. &lt;/p&gt;                                                                             
*                                                                                                      *                                                                                                   
* &lt;p&gt;For more control, the &lt;a href="http://joda-time.sf.net/"&gt;Joda-Time&lt;/a&gt;          * &lt;p&gt;For more control, the &lt;a href="http://joda-time.sf.net/"&gt;Joda-Time&lt;/a&gt;       
* library is recommended.&lt;/p&gt;                                                                    * library is recommended.&lt;/p&gt;                                                                 
*                                                                                                      *                                                                                                   
* @param startMillis  the start of the duration                                                        * @param startMillis  the start of the duration                                                     
* @param endMillis  the end of the duration                                                            * @param endMillis  the end of the duration                                                         
* @param format  the way in which to format the duration                                               * @param format  the way in which to format the duration                                            
* @param padWithZeros whether to pad the left hand side of numbers with 0's                            * @param padWithZeros whether to pad the left hand side of numbers with 0's                         
* @param timezone the millis are defined in                                                            * @param timezone the millis are defined in                                                         
* @return the time as a String                                                                         * @return the time as a String                                                                      
*/                                                                                                     */                                                                                                  
public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZe   public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZe
// Used to optimise for differences under 28 days and                                                  // Used to optimise for differences under 28 days and                                               
// called formatDuration(millis, format); however this did not work                                    // called formatDuration(millis, format); however this did not work                                 
// over leap years.                                                                                    // over leap years.                                                                                 
// TODO: Compare performance to see if anything was lost by                                            // TODO: Compare performance to see if anything was lost by                                         
// losing this optimisation.                                                                           // losing this optimisation.                                                                        
Token[] tokens = lexx(format);                                                                         Token[] tokens = lexx(format);                                                                      
// timezones get funky around 0, so normalizing everything to GMT                                      // timezones get funky around 0, so normalizing everything to GMT                                   
// stops the hours being off                                                                           // stops the hours being off                                                                        
Calendar start = Calendar.getInstance(timezone);                                                       Calendar start = Calendar.getInstance(timezone);                                                    
start.setTime(new Date(startMillis));                                                                  start.setTime(new Date(startMillis));                                                               
Calendar end = Calendar.getInstance(timezone);                                                         Calendar end = Calendar.getInstance(timezone);                                                      
end.setTime(new Date(endMillis));                                                                      end.setTime(new Date(endMillis));                                                                   
// initial estimates                                                                                   // initial estimates                                                                                
int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);                    int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);                 
int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);                                   int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);                                
int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);                                   int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);                                
int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);                           int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);                        
int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);                          int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);                       
int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);                                      int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);                                   
int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);                                         int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);                                      
// each initial estimate is adjusted in case it is under 0                                             // each initial estimate is adjusted in case it is under 0                                          
while (milliseconds &lt; 0) {                                                                          while (milliseconds &lt; 0) {                                                                       
milliseconds += 1000;                                                                                  milliseconds += 1000;                                                                               
seconds -= 1;                                                                                          seconds -= 1;                                                                                       
}                                                                                                      }                                                                                                   
while (seconds &lt; 0) {                                                                               while (seconds &lt; 0) {                                                                            
seconds += 60;                                                                                         seconds += 60;                                                                                      
minutes -= 1;                                                                                          minutes -= 1;                                                                                       
}                                                                                                      }                                                                                                   
while (minutes &lt; 0) {                                                                               while (minutes &lt; 0) {                                                                            
minutes += 60;                                                                                         minutes += 60;                                                                                      
hours -= 1;                                                                                            hours -= 1;                                                                                         
}                                                                                                      }                                                                                                   
while (hours &lt; 0) {                                                                                 while (hours &lt; 0) {                                                                              
hours += 24;                                                                                           hours += 24;                                                                                        
days -= 1;                                                                                             days -= 1;                                                                                          
}                                                                                                      }                                                                                                   
if (Token.containsTokenWithValue(tokens, M)) {                                                         if (Token.containsTokenWithValue(tokens, M)) {                                                      
while (days &lt; 0) {                                                                                  while (days &lt; 0) {                                                                               
days += start.getActualMaximum(Calendar.DAY_OF_MONTH);                                                 days += start.getActualMaximum(Calendar.DAY_OF_MONTH);                                              
months -= 1;                                                                                           months -= 1;                                                                                        
start.add(Calendar.MONTH, 1);                                                                          start.add(Calendar.MONTH, 1);                                                                       
}                                                                                                      }                                                                                                   
while (months &lt; 0) {                                                                                while (months &lt; 0) {                                                                             
months += 12;                                                                                          months += 12;                                                                                       
years -= 1;                                                                                            years -= 1;                                                                                         
}                                                                                                      }                                                                                                   
if (!Token.containsTokenWithValue(tokens, y) && years != 0) {                                          if (!Token.containsTokenWithValue(tokens, y) && years != 0) {                                       
while (years != 0) {                                                                                   while (years != 0) {                                                                                
months += 12 * years;                                                                                  months += 12 * years;                                                                               
years = 0;                                                                                             years = 0;                                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// there are no M's in the format string                                                               // there are no M's in the format string                                                            
if (!Token.containsTokenWithValue(tokens, y)) {                                                        if (!Token.containsTokenWithValue(tokens, y)) {                                                     
int target = end.get(Calendar.YEAR);                                                                   int target = end.get(Calendar.YEAR);                                                                
if (months &lt; 0) {                                                                                   if (months &lt; 0) {                                                                                
// target is end-year -1                                                                               // target is end-year -1                                                                            
target -= 1;                                                                                           target -= 1;                                                                                        
}                                                                                                      }                                                                                                   
while ((start.get(Calendar.YEAR) != target)) {                                                         while ((start.get(Calendar.YEAR) != target)) {                                                      
days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);                days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);             
// Not sure I grok why this is needed, but the brutal tests show it is                                 // Not sure I grok why this is needed, but the brutal tests show it is                              
if (start instanceof GregorianCalendar) {                                                            | if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.ge
if ((start.get(Calendar.MONTH) == Calendar.FEBRUARY) && (start.get(Calendar.DAY_OF_MONTH) == 29)) {  |                                                                                                     
days += 1;                                                                                             days += 1;                                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                    |                                                                                                     
start.add(Calendar.YEAR, 1);                                                                           start.add(Calendar.YEAR, 1);                                                                        
days += start.get(Calendar.DAY_OF_YEAR);                                                               days += start.get(Calendar.DAY_OF_YEAR);                                                            
}                                                                                                      }                                                                                                   
years = 0;                                                                                             years = 0;                                                                                          
}                                                                                                      }                                                                                                   
while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {                                         while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {                                      
days += start.getActualMaximum(Calendar.DAY_OF_MONTH);                                                 days += start.getActualMaximum(Calendar.DAY_OF_MONTH);                                              
start.add(Calendar.MONTH, 1);                                                                          start.add(Calendar.MONTH, 1);                                                                       
}                                                                                                      }                                                                                                   
months = 0;                                                                                            months = 0;                                                                                         
while (days &lt; 0) {                                                                                  while (days &lt; 0) {                                                                               
days += start.getActualMaximum(Calendar.DAY_OF_MONTH);                                                 days += start.getActualMaximum(Calendar.DAY_OF_MONTH);                                              
months -= 1;                                                                                           months -= 1;                                                                                        
start.add(Calendar.MONTH, 1);                                                                          start.add(Calendar.MONTH, 1);                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// The rest of this code adds in values that                                                           // The rest of this code adds in values that                                                        
// aren't requested. This allows the user to ask for the                                               // aren't requested. This allows the user to ask for the                                            
// number of months and get the real count and not just 0-&gt;11.                                      // number of months and get the real count and not just 0-&gt;11.                                   
if (!Token.containsTokenWithValue(tokens, d)) {                                                        if (!Token.containsTokenWithValue(tokens, d)) {                                                     
hours += 24 * days;                                                                                    hours += 24 * days;                                                                                 
days = 0;                                                                                              days = 0;                                                                                           
}                                                                                                      }                                                                                                   
if (!Token.containsTokenWithValue(tokens, H)) {                                                        if (!Token.containsTokenWithValue(tokens, H)) {                                                     
minutes += 60 * hours;                                                                                 minutes += 60 * hours;                                                                              
hours = 0;                                                                                             hours = 0;                                                                                          
}                                                                                                      }                                                                                                   
if (!Token.containsTokenWithValue(tokens, m)) {                                                        if (!Token.containsTokenWithValue(tokens, m)) {                                                     
seconds += 60 * minutes;                                                                               seconds += 60 * minutes;                                                                            
minutes = 0;                                                                                           minutes = 0;                                                                                        
}                                                                                                      }                                                                                                   
if (!Token.containsTokenWithValue(tokens, s)) {                                                        if (!Token.containsTokenWithValue(tokens, s)) {                                                     
milliseconds += 1000 * seconds;                                                                        milliseconds += 1000 * seconds;                                                                     
seconds = 0;                                                                                           seconds = 0;                                                                                        
}                                                                                                      }                                                                                                   
return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);       return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);    
}                                                                                                      }                                                                                                   
