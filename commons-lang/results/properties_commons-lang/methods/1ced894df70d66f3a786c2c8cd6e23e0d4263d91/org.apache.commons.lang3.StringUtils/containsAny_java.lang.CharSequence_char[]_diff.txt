// ContainsAny                                                                                         // ContainsAny                                                                                      
// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Checks if the CharSequence contains any character in the given                              * &lt;p&gt;Checks if the CharSequence contains any character in the given                           
* set of characters.&lt;/p&gt;                                                                         * set of characters.&lt;/p&gt;                                                                      
*                                                                                                      *                                                                                                   
* &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; CharSequence will return &lt;code&gt;false&lt;/code&gt;.    * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; CharSequence will return &lt;code&gt;false&lt;/code&gt;. 
* A &lt;code&gt;null&lt;/code&gt; or zero length search array will return &lt;code&gt;false&lt;/code   * A &lt;code&gt;null&lt;/code&gt; or zero length search array will return &lt;code&gt;false&lt;/code
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.containsAny(null, *)                = false                                              * StringUtils.containsAny(null, *)                = false                                           
* StringUtils.containsAny("", *)                  = false                                              * StringUtils.containsAny("", *)                  = false                                           
* StringUtils.containsAny(*, null)                = false                                              * StringUtils.containsAny(*, null)                = false                                           
* StringUtils.containsAny(*, [])                  = false                                              * StringUtils.containsAny(*, [])                  = false                                           
* StringUtils.containsAny("zzabyycdxx",['z','a']) = true                                               * StringUtils.containsAny("zzabyycdxx",['z','a']) = true                                            
* StringUtils.containsAny("zzabyycdxx",['b','y']) = true                                               * StringUtils.containsAny("zzabyycdxx",['b','y']) = true                                            
* StringUtils.containsAny("aba", ['z'])           = false                                              * StringUtils.containsAny("aba", ['z'])           = false                                           
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param cs  the CharSequence to check, may be null                                                    * @param cs  the CharSequence to check, may be null                                                 
* @param searchChars  the chars to search for, may be null                                             * @param searchChars  the chars to search for, may be null                                          
* @return the &lt;code&gt;true&lt;/code&gt; if any of the chars are found,                             * @return the &lt;code&gt;true&lt;/code&gt; if any of the chars are found,                          
* &lt;code&gt;false&lt;/code&gt; if no match or null input                                             * &lt;code&gt;false&lt;/code&gt; if no match or null input                                          
* @since 2.4                                                                                           * @since 2.4                                                                                        
*/                                                                                                     */                                                                                                  
public static boolean containsAny(CharSequence cs, char[] searchChars) {                               public static boolean containsAny(CharSequence cs, char[] searchChars) {                            
if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {              | if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {                                               
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
for (int i = 0; i &lt; cs.length(); i++) {                                                           | int csLength = cs.length();                                                                         
                                                                                                     | int searchLength = searchChars.length;                                                              
                                                                                                     | int csLastIndex = csLength - 1;                                                                     
                                                                                                     | int searchLastIndex = searchLength - 1;                                                             
                                                                                                     | for (int i = 0; i &lt; csLength; i++) {                                                             
char ch = cs.charAt(i);                                                                                char ch = cs.charAt(i);                                                                             
for (int j = 0; j &lt; searchChars.length; j++) {                                                    | for (int j = 0; j &lt; searchLength; j++) {                                                         
if (searchChars[j] == ch) {                                                                            if (searchChars[j] == ch) {                                                                         
                                                                                                     | if (i &lt; csLastIndex && j &lt; searchLastIndex && ch &gt;= Character.MIN_HIGH_SURROGATE && ch &lt;
                                                                                                     | // ch is a supplementary character                                                                  
                                                                                                     | if (searchChars[j + 1] == cs.charAt(i + 1)) {                                                       
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
                                                                                                     | } else {                                                                                            
                                                                                                     | // ch is in the Basic Multilingual Plane                                                            
                                                                                                     | return true;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | }                                                                                                   
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
