/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Gets a substring from the specified CharSequence avoiding exceptions.&lt;/p&gt;             * &lt;p&gt;Gets a substring from the specified CharSequence avoiding exceptions.&lt;/p&gt;          
*                                                                                                      *                                                                                                   
* &lt;p&gt;A negative start position can be used to start/end {@code n}                                * &lt;p&gt;A negative start position can be used to start/end {@code n}                             
* characters from the end of the CharSequence.&lt;/p&gt;                                               * characters from the end of the CharSequence.&lt;/p&gt;                                            
*                                                                                                      *                                                                                                   
* &lt;p&gt;The returned substring starts with the character in the {@code start}                       * &lt;p&gt;The returned substring starts with the character in the {@code start}                    
* position and ends before the {@code end} position. All position counting is                          * position and ends before the {@code end} position. All position counting is                       
* zero-based -- i.e., to start at the beginning of the string use                                      * zero-based -- i.e., to start at the beginning of the string use                                   
* {@code start = 0}. Negative start and end positions can be used to                                   * {@code start = 0}. Negative start and end positions can be used to                                
* specify offsets relative to the end of the CharSequence.&lt;/p&gt;                                   * specify offsets relative to the end of the CharSequence.&lt;/p&gt;                                
*                                                                                                      *                                                                                                   
* &lt;p&gt;If {@code start} is not strictly to the left of {@code end}, ""                             * &lt;p&gt;If {@code start} is not strictly to the left of {@code end}, ""                          
* is returned.&lt;/p&gt;                                                                               * is returned.&lt;/p&gt;                                                                            
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.substring(null, *, *)    = null                                                          * StringUtils.substring(null, *, *)    = null                                                       
* StringUtils.substring("", * ,  *)    = "";                                                           * StringUtils.substring("", * ,  *)    = "";                                                        
* StringUtils.substring("abc", 0, 2)   = "ab"                                                          * StringUtils.substring("abc", 0, 2)   = "ab"                                                       
* StringUtils.substring("abc", 2, 0)   = ""                                                            * StringUtils.substring("abc", 2, 0)   = ""                                                         
* StringUtils.substring("abc", 2, 4)   = "c"                                                           * StringUtils.substring("abc", 2, 4)   = "c"                                                        
* StringUtils.substring("abc", 4, 6)   = ""                                                            * StringUtils.substring("abc", 4, 6)   = ""                                                         
* StringUtils.substring("abc", 2, 2)   = ""                                                            * StringUtils.substring("abc", 2, 2)   = ""                                                         
* StringUtils.substring("abc", -2, -1) = "b"                                                           * StringUtils.substring("abc", -2, -1) = "b"                                                        
* StringUtils.substring("abc", -4, 2)  = "ab"                                                          * StringUtils.substring("abc", -4, 2)  = "ab"                                                       
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param str  the CharSequence to get the substring from, may be null                                  * @param str  the CharSequence to get the substring from, may be null                               
* @param start  the position to start from, negative means                                             * @param start  the position to start from, negative means                                          
*  count back from the end of the CharSequence by this many characters                                 *  count back from the end of the CharSequence by this many characters                              
* @param end  the position to end at (exclusive), negative means                                       * @param end  the position to end at (exclusive), negative means                                    
*  count back from the end of the CharSequence by this many characters                                 *  count back from the end of the CharSequence by this many characters                              
* @return substring from start position to end positon,                                                * @return substring from start position to end positon,                                             
*  {@code null} if null CharSequence input                                                             *  {@code null} if null CharSequence input                                                          
*/                                                                                                     */                                                                                                  
public static String substring(CharSequence str, int start, int end) {                                 public static String substring(CharSequence str, int start, int end) {                              
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// handle negatives                                                                                    // handle negatives                                                                                 
if (end &lt; 0) {                                                                                      if (end &lt; 0) {                                                                                   
// remember end is negative                                                                            // remember end is negative                                                                         
end = str.length() + end;                                                                              end = str.length() + end;                                                                           
}                                                                                                      }                                                                                                   
if (start &lt; 0) {                                                                                    if (start &lt; 0) {                                                                                 
// remember start is negative                                                                          // remember start is negative                                                                       
start = str.length() + start;                                                                          start = str.length() + start;                                                                       
}                                                                                                      }                                                                                                   
// check length next                                                                                   // check length next                                                                                
if (end &gt; str.length()) {                                                                           if (end &gt; str.length()) {                                                                        
end = str.length();                                                                                    end = str.length();                                                                                 
}                                                                                                      }                                                                                                   
// if start is greater than end, return ""                                                             // if start is greater than end, return ""                                                          
if (start &gt; end) {                                                                                  if (start &gt; end) {                                                                               
return EMPTY;                                                                                          return EMPTY;                                                                                       
}                                                                                                      }                                                                                                   
if (start &lt; 0) {                                                                                    if (start &lt; 0) {                                                                                 
start = 0;                                                                                             start = 0;                                                                                          
}                                                                                                      }                                                                                                   
if (end &lt; 0) {                                                                                      if (end &lt; 0) {                                                                                   
end = 0;                                                                                               end = 0;                                                                                            
}                                                                                                      }                                                                                                   
return sequenceToString(str.subSequence(start, end));                                                | return str.subSequence(start, end).toString();                                                      
}                                                                                                      }                                                                                                   
