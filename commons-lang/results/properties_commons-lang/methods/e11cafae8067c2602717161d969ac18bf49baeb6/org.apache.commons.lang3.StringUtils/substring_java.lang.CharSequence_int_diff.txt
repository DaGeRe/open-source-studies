// Substring                                                                                           // Substring                                                                                        
// -----------------------------------------------------------------------                             // -----------------------------------------------------------------------                          
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Gets a substring from the specified CharSequence avoiding exceptions.&lt;/p&gt;             * &lt;p&gt;Gets a substring from the specified CharSequence avoiding exceptions.&lt;/p&gt;          
*                                                                                                      *                                                                                                   
* &lt;p&gt;A negative start position can be used to start {@code n}                                    * &lt;p&gt;A negative start position can be used to start {@code n}                                 
* characters from the end of the CharSequence.&lt;/p&gt;                                               * characters from the end of the CharSequence.&lt;/p&gt;                                            
*                                                                                                      *                                                                                                   
* &lt;p&gt;A {@code null} CharSequence will return {@code null}.                                       * &lt;p&gt;A {@code null} CharSequence will return {@code null}.                                    
* An empty ("") CharSequence will return "".&lt;/p&gt;                                                 * An empty ("") CharSequence will return "".&lt;/p&gt;                                              
*                                                                                                      *                                                                                                   
* &lt;pre&gt;                                                                                          * &lt;pre&gt;                                                                                       
* StringUtils.substring(null, *)   = null                                                              * StringUtils.substring(null, *)   = null                                                           
* StringUtils.substring("", *)     = ""                                                                * StringUtils.substring("", *)     = ""                                                             
* StringUtils.substring("abc", 0)  = "abc"                                                             * StringUtils.substring("abc", 0)  = "abc"                                                          
* StringUtils.substring("abc", 2)  = "c"                                                               * StringUtils.substring("abc", 2)  = "c"                                                            
* StringUtils.substring("abc", 4)  = ""                                                                * StringUtils.substring("abc", 4)  = ""                                                             
* StringUtils.substring("abc", -2) = "bc"                                                              * StringUtils.substring("abc", -2) = "bc"                                                           
* StringUtils.substring("abc", -4) = "abc"                                                             * StringUtils.substring("abc", -4) = "abc"                                                          
* &lt;/pre&gt;                                                                                         * &lt;/pre&gt;                                                                                      
*                                                                                                      *                                                                                                   
* @param str  the CharSequence to get the substring from, may be null                                  * @param str  the CharSequence to get the substring from, may be null                               
* @param start  the position to start from, negative means                                             * @param start  the position to start from, negative means                                          
*  count back from the end of the CharSequence by this many characters                                 *  count back from the end of the CharSequence by this many characters                              
* @return substring from start position, {@code null} if null CharSequence input                       * @return substring from start position, {@code null} if null CharSequence input                    
*/                                                                                                     */                                                                                                  
public static String substring(CharSequence str, int start) {                                          public static String substring(CharSequence str, int start) {                                       
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// handle negatives, which means last n characters                                                     // handle negatives, which means last n characters                                                  
if (start &lt; 0) {                                                                                    if (start &lt; 0) {                                                                                 
// remember start is negative                                                                          // remember start is negative                                                                       
start = str.length() + start;                                                                          start = str.length() + start;                                                                       
}                                                                                                      }                                                                                                   
if (start &lt; 0) {                                                                                    if (start &lt; 0) {                                                                                 
start = 0;                                                                                             start = 0;                                                                                          
}                                                                                                      }                                                                                                   
if (start &gt; str.length()) {                                                                         if (start &gt; str.length()) {                                                                      
return EMPTY;                                                                                          return EMPTY;                                                                                       
}                                                                                                      }                                                                                                   
return sequenceToString(str.subSequence(start, str.length()));                                       | return str.subSequence(start, str.length()).toString();                                             
}                                                                                                      }                                                                                                   
