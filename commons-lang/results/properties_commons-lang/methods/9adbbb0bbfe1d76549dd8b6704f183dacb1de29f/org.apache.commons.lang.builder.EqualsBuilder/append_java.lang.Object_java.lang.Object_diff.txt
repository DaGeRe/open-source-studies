// -------------------------------------------------------------------------                           // -------------------------------------------------------------------------                        
/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Test if two &lt;code&gt;Object&lt;/code&gt;s are equal using their                          * &lt;p&gt;Test if two &lt;code&gt;Object&lt;/code&gt;s are equal using their                       
* &lt;code&gt;equals&lt;/code&gt; method.&lt;/p&gt;                                                    * &lt;code&gt;equals&lt;/code&gt; method.&lt;/p&gt;                                                 
*                                                                                                      *                                                                                                   
* @param lhs  the left hand object                                                                     * @param lhs  the left hand object                                                                  
* @param rhs  the right hand object                                                                    * @param rhs  the right hand object                                                                 
* @return EqualsBuilder - used to chain calls.                                                         * @return EqualsBuilder - used to chain calls.                                                      
*/                                                                                                     */                                                                                                  
public EqualsBuilder append(Object lhs, Object rhs) {                                                  public EqualsBuilder append(Object lhs, Object rhs) {                                               
if (isEquals == false) {                                                                               if (isEquals == false) {                                                                            
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs == rhs) {                                                                                      if (lhs == rhs) {                                                                                   
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
if (lhs == null || rhs == null) {                                                                      if (lhs == null || rhs == null) {                                                                   
this.setEquals(false);                                                                                 this.setEquals(false);                                                                              
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
Class&lt;?&gt; lhsClass = lhs.getClass();                                                              Class&lt;?&gt; lhsClass = lhs.getClass();                                                           
if (!lhsClass.isArray()) {                                                                             if (!lhsClass.isArray()) {                                                                          
if (lhs instanceof java.math.BigDecimal && rhs instanceof java.math.BigDecimal) {                    |                                                                                                     
isEquals = (((java.math.BigDecimal) lhs).compareTo((java.math.BigDecimal) rhs) == 0);                |                                                                                                     
} else {                                                                                             |                                                                                                     
// The simple case, not an array, just test the element                                                // The simple case, not an array, just test the element                                             
isEquals = lhs.equals(rhs);                                                                            isEquals = lhs.equals(rhs);                                                                         
}                                                                                                    |                                                                                                     
} else if (lhs.getClass() != rhs.getClass()) {                                                         } else if (lhs.getClass() != rhs.getClass()) {                                                      
// Here when we compare different dimensions, for example: a boolean[][] to a boolean[]                // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]             
this.setEquals(false);                                                                                 this.setEquals(false);                                                                              
} else // 'Switch' on type of array, to dispatch to the correct handler                                } else // 'Switch' on type of array, to dispatch to the correct handler                             
// This handles multi dimensional arrays of the same depth                                             // This handles multi dimensional arrays of the same depth                                          
if (lhs instanceof long[]) {                                                                           if (lhs instanceof long[]) {                                                                        
append((long[]) lhs, (long[]) rhs);                                                                    append((long[]) lhs, (long[]) rhs);                                                                 
} else if (lhs instanceof int[]) {                                                                     } else if (lhs instanceof int[]) {                                                                  
append((int[]) lhs, (int[]) rhs);                                                                      append((int[]) lhs, (int[]) rhs);                                                                   
} else if (lhs instanceof short[]) {                                                                   } else if (lhs instanceof short[]) {                                                                
append((short[]) lhs, (short[]) rhs);                                                                  append((short[]) lhs, (short[]) rhs);                                                               
} else if (lhs instanceof char[]) {                                                                    } else if (lhs instanceof char[]) {                                                                 
append((char[]) lhs, (char[]) rhs);                                                                    append((char[]) lhs, (char[]) rhs);                                                                 
} else if (lhs instanceof byte[]) {                                                                    } else if (lhs instanceof byte[]) {                                                                 
append((byte[]) lhs, (byte[]) rhs);                                                                    append((byte[]) lhs, (byte[]) rhs);                                                                 
} else if (lhs instanceof double[]) {                                                                  } else if (lhs instanceof double[]) {                                                               
append((double[]) lhs, (double[]) rhs);                                                                append((double[]) lhs, (double[]) rhs);                                                             
} else if (lhs instanceof float[]) {                                                                   } else if (lhs instanceof float[]) {                                                                
append((float[]) lhs, (float[]) rhs);                                                                  append((float[]) lhs, (float[]) rhs);                                                               
} else if (lhs instanceof boolean[]) {                                                                 } else if (lhs instanceof boolean[]) {                                                              
append((boolean[]) lhs, (boolean[]) rhs);                                                              append((boolean[]) lhs, (boolean[]) rhs);                                                           
} else {                                                                                               } else {                                                                                            
// Not an array of primitives                                                                          // Not an array of primitives                                                                       
append((Object[]) lhs, (Object[]) rhs);                                                                append((Object[]) lhs, (Object[]) rhs);                                                             
}                                                                                                      }                                                                                                   
return this;                                                                                           return this;                                                                                        
}                                                                                                      }                                                                                                   
