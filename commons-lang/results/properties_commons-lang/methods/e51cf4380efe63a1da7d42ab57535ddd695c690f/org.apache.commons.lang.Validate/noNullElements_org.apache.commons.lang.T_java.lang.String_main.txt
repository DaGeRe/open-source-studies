// notNullElements collection
// ---------------------------------------------------------------------------------
/**
 * <p>Validate that the specified argument collection is neither
 * <code>null</code> nor contains any elements that are <code>null</code>;
 * otherwise throwing an exception with the specified message.
 *
 * <pre>Validate.noNullElements(myCollection, "The collection contains null at position %d");</pre>
 *
 * <p>If the collection is <code>null</code>, then the message in the exception
 * is &quot;The validated object is null&quot;.</p>
 *
 * <p>If the collection has a <code>null</code> element, then the iteration
 * index of the invalid element is appended to the <code>values</code>
 * argument.</p>
 *
 * @param <T> the collection type
 * @param collection the collection to check
 * @return the validated collection (never <code>null</code> method for chaining)
 * @throws NullPointerException if the array is <code>null</code>
 * @throws IllegalArgumentException if an element is <code>null</code>
 * @see #noNullElements(Collection, String, Object...)
 */
public static <T extends Collection<?>> T noNullElements(T collection, String message, Object... values) {
    Validate.notNull(collection);
    int i = 0;
    for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {
        if (it.next() == null) {
            Object[] values2 = ArrayUtils.addAll(values, i);
            throw new IllegalArgumentException(String.format(message, values2));
        }
    }
    return collection;
}