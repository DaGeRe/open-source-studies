/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Splits a String by Character type as returned by                                            * &lt;p&gt;Splits a String by Character type as returned by                                         
* &lt;code&gt;java.lang.Character.getType(char)&lt;/code&gt;. Groups of contiguous                     * &lt;code&gt;java.lang.Character.getType(char)&lt;/code&gt;. Groups of contiguous                  
* characters of the same type are returned as complete tokens, with the                                * characters of the same type are returned as complete tokens, with the                             
* following exception: if &lt;code&gt;camelCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,         * following exception: if &lt;code&gt;camelCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,      
* the character of type &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt;, if any,                   * the character of type &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt;, if any,                
* immediately preceding a token of type &lt;code&gt;Character.LOWERCASE_LETTER&lt;/code&gt;            * immediately preceding a token of type &lt;code&gt;Character.LOWERCASE_LETTER&lt;/code&gt;         
* will belong to the following token rather than to the preceding, if any,                             * will belong to the following token rather than to the preceding, if any,                          
* &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt; token.                                           * &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt; token.                                        
* @param str the String to split, may be &lt;code&gt;null&lt;/code&gt;                                 * @param str the String to split, may be &lt;code&gt;null&lt;/code&gt;                              
* @param camelCase whether to use so-called "camel-case" for letter types                              * @param camelCase whether to use so-called "camel-case" for letter types                           
* @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input               * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input            
* @since 2.4                                                                                           * @since 2.4                                                                                        
*/                                                                                                     */                                                                                                  
private static String[] splitByCharacterType(String str, boolean camelCase) {                          private static String[] splitByCharacterType(String str, boolean camelCase) {                       
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
if (str.length() == 0) {                                                                               if (str.length() == 0) {                                                                            
return ArrayUtils.EMPTY_STRING_ARRAY;                                                                  return ArrayUtils.EMPTY_STRING_ARRAY;                                                               
}                                                                                                      }                                                                                                   
char[] c = str.toCharArray();                                                                          char[] c = str.toCharArray();                                                                       
List list = new ArrayList();                                                                         | List&lt;String&gt; list = new ArrayList&lt;String&gt;();                                            
int tokenStart = 0;                                                                                    int tokenStart = 0;                                                                                 
int currentType = Character.getType(c[tokenStart]);                                                    int currentType = Character.getType(c[tokenStart]);                                                 
for (int pos = tokenStart + 1; pos &lt; c.length; pos++) {                                             for (int pos = tokenStart + 1; pos &lt; c.length; pos++) {                                          
int type = Character.getType(c[pos]);                                                                  int type = Character.getType(c[pos]);                                                               
if (type == currentType) {                                                                             if (type == currentType) {                                                                          
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {    if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) { 
int newTokenStart = pos - 1;                                                                           int newTokenStart = pos - 1;                                                                        
if (newTokenStart != tokenStart) {                                                                     if (newTokenStart != tokenStart) {                                                                  
list.add(new String(c, tokenStart, newTokenStart - tokenStart));                                       list.add(new String(c, tokenStart, newTokenStart - tokenStart));                                    
tokenStart = newTokenStart;                                                                            tokenStart = newTokenStart;                                                                         
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
list.add(new String(c, tokenStart, pos - tokenStart));                                                 list.add(new String(c, tokenStart, pos - tokenStart));                                              
tokenStart = pos;                                                                                      tokenStart = pos;                                                                                   
}                                                                                                      }                                                                                                   
currentType = type;                                                                                    currentType = type;                                                                                 
}                                                                                                      }                                                                                                   
list.add(new String(c, tokenStart, c.length - tokenStart));                                            list.add(new String(c, tokenStart, c.length - tokenStart));                                         
return (String[]) list.toArray(new String[list.size()]);                                             | return list.toArray(new String[list.size()]);                                                       
}                                                                                                      }                                                                                                   
