/**                                                                                                    /**                                                                                                 
* Performs the logic for the &lt;code&gt;split&lt;/code&gt; and                                        * Performs the logic for the &lt;code&gt;split&lt;/code&gt; and                                     
* &lt;code&gt;splitPreserveAllTokens&lt;/code&gt; methods that do not return a                         * &lt;code&gt;splitPreserveAllTokens&lt;/code&gt; methods that do not return a                      
* maximum array length.                                                                                * maximum array length.                                                                             
*                                                                                                      *                                                                                                   
* @param str  the String to parse, may be &lt;code&gt;null&lt;/code&gt;                                * @param str  the String to parse, may be &lt;code&gt;null&lt;/code&gt;                             
* @param separatorChar the separate character                                                          * @param separatorChar the separate character                                                       
* @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are                   * @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are                
* treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent                       * treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent                    
* separators are treated as one separator.                                                             * separators are treated as one separator.                                                          
* @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input               * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input            
*/                                                                                                     */                                                                                                  
private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {       private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {    
// Performance tuned for 2.0 (JDK1.4)                                                                  // Performance tuned for 2.0 (JDK1.4)                                                               
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
int len = str.length();                                                                                int len = str.length();                                                                             
if (len == 0) {                                                                                        if (len == 0) {                                                                                     
return ArrayUtils.EMPTY_STRING_ARRAY;                                                                  return ArrayUtils.EMPTY_STRING_ARRAY;                                                               
}                                                                                                      }                                                                                                   
List list = new ArrayList();                                                                         | List&lt;String&gt; list = new ArrayList&lt;String&gt;();                                            
int i = 0, start = 0;                                                                                  int i = 0, start = 0;                                                                               
boolean match = false;                                                                                 boolean match = false;                                                                              
boolean lastMatch = false;                                                                             boolean lastMatch = false;                                                                          
while (i &lt; len) {                                                                                   while (i &lt; len) {                                                                                
if (str.charAt(i) == separatorChar) {                                                                  if (str.charAt(i) == separatorChar) {                                                               
if (match || preserveAllTokens) {                                                                      if (match || preserveAllTokens) {                                                                   
list.add(str.substring(start, i));                                                                     list.add(str.substring(start, i));                                                                  
match = false;                                                                                         match = false;                                                                                      
lastMatch = true;                                                                                      lastMatch = true;                                                                                   
}                                                                                                      }                                                                                                   
start = ++i;                                                                                           start = ++i;                                                                                        
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
lastMatch = false;                                                                                     lastMatch = false;                                                                                  
match = true;                                                                                          match = true;                                                                                       
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
if (match || (preserveAllTokens && lastMatch)) {                                                       if (match || (preserveAllTokens && lastMatch)) {                                                    
list.add(str.substring(start, i));                                                                     list.add(str.substring(start, i));                                                                  
}                                                                                                      }                                                                                                   
return (String[]) list.toArray(new String[list.size()]);                                             | return list.toArray(new String[list.size()]);                                                       
}                                                                                                      }                                                                                                   
