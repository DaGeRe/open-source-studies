/**                                                                                                    /**                                                                                                 
* Performs the logic for the &lt;code&gt;splitByWholeSeparatorPreserveAllTokens&lt;/code&gt; methods   * Performs the logic for the &lt;code&gt;splitByWholeSeparatorPreserveAllTokens&lt;/code&gt; methods
*                                                                                                      *                                                                                                   
* @param str  the String to parse, may be &lt;code&gt;null&lt;/code&gt;                                * @param str  the String to parse, may be &lt;code&gt;null&lt;/code&gt;                             
* @param separator  String containing the String to be used as a delimiter,                            * @param separator  String containing the String to be used as a delimiter,                         
*  &lt;code&gt;null&lt;/code&gt; splits on whitespace                                                  *  &lt;code&gt;null&lt;/code&gt; splits on whitespace                                               
* @param max  the maximum number of elements to include in the returned                                * @param max  the maximum number of elements to include in the returned                             
*  array. A zero or negative value implies no limit.                                                   *  array. A zero or negative value implies no limit.                                                
* @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are                   * @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are                
* treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent                       * treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent                    
* separators are treated as one separator.                                                             * separators are treated as one separator.                                                          
* @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input               * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input            
* @since 2.4                                                                                           * @since 2.4                                                                                        
*/                                                                                                     */                                                                                                  
private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, boolean p   private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, boolean p
if (str == null) {                                                                                     if (str == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
int len = str.length();                                                                                int len = str.length();                                                                             
if (len == 0) {                                                                                        if (len == 0) {                                                                                     
return ArrayUtils.EMPTY_STRING_ARRAY;                                                                  return ArrayUtils.EMPTY_STRING_ARRAY;                                                               
}                                                                                                      }                                                                                                   
if ((separator == null) || (EMPTY.equals(separator))) {                                                if ((separator == null) || (EMPTY.equals(separator))) {                                             
// Split on whitespace.                                                                                // Split on whitespace.                                                                             
return splitWorker(str, null, max, preserveAllTokens);                                                 return splitWorker(str, null, max, preserveAllTokens);                                              
}                                                                                                      }                                                                                                   
int separatorLength = separator.length();                                                              int separatorLength = separator.length();                                                           
ArrayList substrings = new ArrayList();                                                              | ArrayList&lt;String&gt; substrings = new ArrayList&lt;String&gt;();                                 
int numberOfSubstrings = 0;                                                                            int numberOfSubstrings = 0;                                                                         
int beg = 0;                                                                                           int beg = 0;                                                                                        
int end = 0;                                                                                           int end = 0;                                                                                        
while (end &lt; len) {                                                                                 while (end &lt; len) {                                                                              
end = str.indexOf(separator, beg);                                                                     end = str.indexOf(separator, beg);                                                                  
if (end &gt; -1) {                                                                                     if (end &gt; -1) {                                                                                  
if (end &gt; beg) {                                                                                    if (end &gt; beg) {                                                                                 
numberOfSubstrings += 1;                                                                               numberOfSubstrings += 1;                                                                            
if (numberOfSubstrings == max) {                                                                       if (numberOfSubstrings == max) {                                                                    
end = len;                                                                                             end = len;                                                                                          
substrings.add(str.substring(beg));                                                                    substrings.add(str.substring(beg));                                                                 
} else {                                                                                               } else {                                                                                            
// The following is OK, because String.substring( beg, end ) excludes                                  // The following is OK, because String.substring( beg, end ) excludes                               
// the character at the position 'end'.                                                                // the character at the position 'end'.                                                             
substrings.add(str.substring(beg, end));                                                               substrings.add(str.substring(beg, end));                                                            
// Set the starting point for the next search.                                                         // Set the starting point for the next search.                                                      
// The following is equivalent to beg = end + (separatorLength - 1) + 1,                               // The following is equivalent to beg = end + (separatorLength - 1) + 1,                            
// which is the right calculation:                                                                     // which is the right calculation:                                                                  
beg = end + separatorLength;                                                                           beg = end + separatorLength;                                                                        
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// We found a consecutive occurrence of the separator, so skip it.                                     // We found a consecutive occurrence of the separator, so skip it.                                  
if (preserveAllTokens) {                                                                               if (preserveAllTokens) {                                                                            
numberOfSubstrings += 1;                                                                               numberOfSubstrings += 1;                                                                            
if (numberOfSubstrings == max) {                                                                       if (numberOfSubstrings == max) {                                                                    
end = len;                                                                                             end = len;                                                                                          
substrings.add(str.substring(beg));                                                                    substrings.add(str.substring(beg));                                                                 
} else {                                                                                               } else {                                                                                            
substrings.add(EMPTY);                                                                                 substrings.add(EMPTY);                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
beg = end + separatorLength;                                                                           beg = end + separatorLength;                                                                        
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// String.substring( beg ) goes from 'beg' to the end of the String.                                   // String.substring( beg ) goes from 'beg' to the end of the String.                                
substrings.add(str.substring(beg));                                                                    substrings.add(str.substring(beg));                                                                 
end = len;                                                                                             end = len;                                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return (String[]) substrings.toArray(new String[substrings.size()]);                                 | return substrings.toArray(new String[substrings.size()]);                                           
}                                                                                                      }                                                                                                   
