/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Find an accessible constructor with compatible parameters.                                  * &lt;p&gt;Find an accessible constructor with compatible parameters.                               
* Compatible parameters mean that every method parameter is assignable from                            * Compatible parameters mean that every method parameter is assignable from                         
* the given parameters. In other words, it finds constructor that will take                            * the given parameters. In other words, it finds constructor that will take                         
* the parameters given.&lt;/p&gt;                                                                      * the parameters given.&lt;/p&gt;                                                                   
*                                                                                                      *                                                                                                   
* &lt;p&gt;First it checks if there is constructor matching the exact signature.                       * &lt;p&gt;First it checks if there is constructor matching the exact signature.                    
* If no such, all the constructors of the class are tested if their signatures                         * If no such, all the constructors of the class are tested if their signatures                      
* are assignment compatible with the parameter types.                                                  * are assignment compatible with the parameter types.                                               
* The first matching constructor is returned.&lt;/p&gt;                                                * The first matching constructor is returned.&lt;/p&gt;                                             
*                                                                                                      *                                                                                                   
* @param cls find constructor for this class                                                           * @param cls find constructor for this class                                                        
* @param parameterTypes find method with compatible parameters                                         * @param parameterTypes find method with compatible parameters                                      
* @return a valid Constructor object. If there's no matching constructor, returns &lt;code&gt;null&l   * @return a valid Constructor object. If there's no matching constructor, returns &lt;code&gt;null&l
*/                                                                                                     */                                                                                                  
@SuppressWarnings("unchecked")                                                                       |                                                                                                     
public static &lt;T&gt; Constructor&lt;T&gt; getMatchingAccessibleConstructor(Class&lt;T&gt; cls, Cl   public static &lt;T&gt; Constructor&lt;T&gt; getMatchingAccessibleConstructor(Class&lt;T&gt; cls, Cl
// see if we can find the constructor directly                                                         // see if we can find the constructor directly                                                      
// most of the time this works and it's much faster                                                    // most of the time this works and it's much faster                                                 
try {                                                                                                  try {                                                                                               
Constructor&lt;T&gt; ctor = cls.getConstructor(parameterTypes);                                        Constructor&lt;T&gt; ctor = cls.getConstructor(parameterTypes);                                     
MemberUtils.setAccessibleWorkaround(ctor);                                                             MemberUtils.setAccessibleWorkaround(ctor);                                                          
return ctor;                                                                                           return ctor;                                                                                        
} catch (NoSuchMethodException e) {                                                                    } catch (NoSuchMethodException e) {                                                                 
/* SWALLOW */                                                                                          /* SWALLOW */                                                                                       
}                                                                                                      }                                                                                                   
Constructor&lt;T&gt; result = null;                                                                    Constructor&lt;T&gt; result = null;                                                                 
// search through all constructors                                                                     // search through all constructors                                                                  
Constructor&lt;?&gt;[] ctors = cls.getConstructors();                                                  Constructor&lt;?&gt;[] ctors = cls.getConstructors();                                               
for (int i = 0; i &lt; ctors.length; i++) {                                                            for (int i = 0; i &lt; ctors.length; i++) {                                                         
// compare parameters                                                                                  // compare parameters                                                                               
if (ClassUtils.isAssignable(parameterTypes, ctors[i].getParameterTypes(), true)) {                     if (ClassUtils.isAssignable(parameterTypes, ctors[i].getParameterTypes(), true)) {                  
// get accessible version of method                                                                    // get accessible version of method                                                                 
                                                                                                     | // TODO is this OK? If so, why?                                                                     
                                                                                                     | @SuppressWarnings("unchecked")                                                                      
Constructor&lt;T&gt; ctor = getAccessibleConstructor((Constructor&lt;T&gt;) ctors[i]);                 Constructor&lt;T&gt; ctor = getAccessibleConstructor((Constructor&lt;T&gt;) ctors[i]);              
if (ctor != null) {                                                                                    if (ctor != null) {                                                                                 
MemberUtils.setAccessibleWorkaround(ctor);                                                             MemberUtils.setAccessibleWorkaround(ctor);                                                          
if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParamete   if (result == null || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParamete
result = ctor;                                                                                         result = ctor;                                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
