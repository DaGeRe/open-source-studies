public void testReflectionHierarchyEquals(boolean testTransients) {                                  | private void testReflectionHierarchyEquals(boolean testTransients) {                                
TestObject to1 = new TestObject(4);                                                                    TestObject to1 = new TestObject(4);                                                                 
TestObject to1Bis = new TestObject(4);                                                                 TestObject to1Bis = new TestObject(4);                                                              
TestObject to1Ter = new TestObject(4);                                                                 TestObject to1Ter = new TestObject(4);                                                              
TestObject to2 = new TestObject(5);                                                                    TestObject to2 = new TestObject(5);                                                                 
TestEmptySubObject teso = new TestEmptySubObject(4);                                                   TestEmptySubObject teso = new TestEmptySubObject(4);                                                
TestTSubObject ttso = new TestTSubObject(4, 1);                                                        TestTSubObject ttso = new TestTSubObject(4, 1);                                                     
TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);                                                  TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);                                               
TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);                                              TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);                                           
TestSubObject tso1 = new TestSubObject(1, 4);                                                          TestSubObject tso1 = new TestSubObject(1, 4);                                                       
TestSubObject tso1bis = new TestSubObject(1, 4);                                                       TestSubObject tso1bis = new TestSubObject(1, 4);                                                    
TestSubObject tso1ter = new TestSubObject(1, 4);                                                       TestSubObject tso1ter = new TestSubObject(1, 4);                                                    
TestSubObject tso2 = new TestSubObject(2, 5);                                                          TestSubObject tso2 = new TestSubObject(2, 5);                                                       
testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransien   testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransien
testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testT   testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testT
// More sanity checks:                                                                                 // More sanity checks:                                                                              
// same values                                                                                         // same values                                                                                      
assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));                                assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));                             
assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTr   assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTr
// same super values, diff sub values                                                                  // same super values, diff sub values                                                               
assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testT   assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testT
assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testT   assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testT
// diff super values, same sub values                                                                  // diff super values, same sub values                                                               
assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testT   assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testT
assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testT   assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testT
// mix super and sub types: equals                                                                     // mix super and sub types: equals                                                                  
assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));                                 assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));                              
assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));                                 assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));                              
// Force testTransients = false for this assert                                                        // Force testTransients = false for this assert                                                     
assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false));                                          assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false));                                       
// Force testTransients = false for this assert                                                        // Force testTransients = false for this assert                                                     
assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false));                                          assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false));                                       
// Force testTransients = false for this assert                                                        // Force testTransients = false for this assert                                                     
assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false));                                         assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false));                                      
// Force testTransients = false for this assert                                                        // Force testTransients = false for this assert                                                     
assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false));                                         assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false));                                      
// Force testTransients = false for this assert                                                        // Force testTransients = false for this assert                                                     
assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false));                                        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false));                                     
// Force testTransients = false for this assert                                                        // Force testTransients = false for this assert                                                     
assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false));                                        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false));                                     
// mix super and sub types: NOT equals                                                                 // mix super and sub types: NOT equals                                                              
assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransie   assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransie
assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransie   assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransie
assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransien   assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransien
assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransien   assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransien
assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransien   assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransien
assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransien   assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransien
assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));                                                assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));                                             
assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));                                               assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));                                            
}                                                                                                      }                                                                                                   
