                                                                                                     | @Test                                                                                               
public void testReflectionEqualsExcludeFields() throws Exception {                                     public void testReflectionEqualsExcludeFields() throws Exception {                                  
TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);                           TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);                        
TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);                           TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);                        
// not equal when including all fields                                                                 // not equal when including all fields                                                              
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));                                                   assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));                                                
// doesn't barf on null, empty array, or non-existent field, but still tests as not equal              // doesn't barf on null, empty array, or non-existent field, but still tests as not equal           
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));                                  assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));                               
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));                                  assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));                               
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" }));                           assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" }));                        
// not equal if only one of the differing fields excluded                                              // not equal if only one of the differing fields excluded                                           
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" }));                           assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" }));                        
assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" }));                         assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" }));                      
// equal if both differing fields excluded                                                             // equal if both differing fields excluded                                                          
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" }));                   assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" }));                
// still equal as long as both differing fields are among excluded                                     // still equal as long as both differing fields are among excluded                                  
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" }));            assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" }));         
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" }));     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" }));  
}                                                                                                      }                                                                                                   
