/**                                                                                                    /**                                                                                                 
* Equivalence relationship tests inspired by "Effective Java":                                         * Equivalence relationship tests inspired by "Effective Java":                                      
* &lt;ul&gt;                                                                                           * &lt;ul&gt;                                                                                        
* &lt;li&gt;reflection&lt;/li&gt;                                                                      * &lt;li&gt;reflection&lt;/li&gt;                                                                   
* &lt;li&gt;symmetry&lt;/li&gt;                                                                        * &lt;li&gt;symmetry&lt;/li&gt;                                                                     
* &lt;li&gt;transitive&lt;/li&gt;                                                                      * &lt;li&gt;transitive&lt;/li&gt;                                                                   
* &lt;li&gt;consistency&lt;/li&gt;                                                                     * &lt;li&gt;consistency&lt;/li&gt;                                                                  
* &lt;li&gt;non-null reference&lt;/li&gt;                                                              * &lt;li&gt;non-null reference&lt;/li&gt;                                                           
* &lt;/ul&gt;                                                                                          * &lt;/ul&gt;                                                                                       
* @param to a TestObject                                                                               * @param to a TestObject                                                                            
* @param toBis a TestObject, equal to to and toTer                                                     * @param toBis a TestObject, equal to to and toTer                                                  
* @param toTer Left hand side, equal to to and toBis                                                   * @param toTer Left hand side, equal to to and toBis                                                
* @param to2 a different TestObject                                                                    * @param to2 a different TestObject                                                                 
* @param oToChange a TestObject that will be changed                                                   * @param oToChange a TestObject that will be changed                                                
* @param testTransients whether to test transient instance variables                                   * @param testTransients whether to test transient instance variables                                
*/                                                                                                     */                                                                                                  
public void testReflectionEqualsEquivalenceRelationship(TestObject to, TestObject toBis, TestObject  | private void testReflectionEqualsEquivalenceRelationship(TestObject to, TestObject toBis, TestObject
// reflection test                                                                                     // reflection test                                                                                  
assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));                                    assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));                                 
assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));                                  assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));                               
// symmetry test                                                                                       // symmetry test                                                                                    
assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEqua   assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEqua
// transitive test                                                                                     // transitive test                                                                                  
assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEqua   assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEqua
// consistency test                                                                                    // consistency test                                                                                 
oToChange.setA(to.getA());                                                                             oToChange.setA(to.getA());                                                                          
if (oToChange instanceof TestSubObject) {                                                              if (oToChange instanceof TestSubObject) {                                                           
((TestSubObject) oToChange).setB(((TestSubObject) to).getB());                                         ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());                                      
}                                                                                                      }                                                                                                   
assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                             assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                          
assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                             assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                          
oToChange.setA(to.getA() + 1);                                                                         oToChange.setA(to.getA() + 1);                                                                      
if (oToChange instanceof TestSubObject) {                                                              if (oToChange instanceof TestSubObject) {                                                           
((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);                                     ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);                                  
}                                                                                                      }                                                                                                   
assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                            assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                         
assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                            assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));                         
// non-null reference test                                                                             // non-null reference test                                                                          
assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));                                 assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));                              
assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));                                assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));                             
assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));                                 assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));                              
assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));                                assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));                             
assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));              assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));           
}                                                                                                      }                                                                                                   
