@Test                                                                                                  @Test                                                                                               
public void testCounting() throws IOException {                                                        public void testCounting() throws IOException {                                                     
final ByteArrayOutputStream baos = new ByteArrayOutputStream();                                        final ByteArrayOutputStream baos = new ByteArrayOutputStream();                                     
final CountingOutputStream cos = new CountingOutputStream(baos);                                     | try (final CountingOutputStream cos = new CountingOutputStream(baos)) {                             
for (int i = 0; i &lt; 20; i++) {                                                                      for (int i = 0; i &lt; 20; i++) {                                                                   
cos.write(i);                                                                                          cos.write(i);                                                                                       
}                                                                                                      }                                                                                                   
assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 0, 20);                   assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 0, 20);                
assertEquals("CountingOutputStream.getCount()", cos.getCount(), 20);                                   assertEquals("CountingOutputStream.getCount()", cos.getCount(), 20);                                
final byte[] array = new byte[10];                                                                     final byte[] array = new byte[10];                                                                  
for (int i = 20; i &lt; 30; i++) {                                                                     for (int i = 20; i &lt; 30; i++) {                                                                  
array[i - 20] = (byte) i;                                                                              array[i - 20] = (byte) i;                                                                           
}                                                                                                      }                                                                                                   
cos.write(array);                                                                                      cos.write(array);                                                                                   
assertByteArrayEquals("CountingOutputStream.write(byte[])", baos.toByteArray(), 0, 30);                assertByteArrayEquals("CountingOutputStream.write(byte[])", baos.toByteArray(), 0, 30);             
assertEquals("CountingOutputStream.getCount()", cos.getCount(), 30);                                   assertEquals("CountingOutputStream.getCount()", cos.getCount(), 30);                                
for (int i = 25; i &lt; 35; i++) {                                                                     for (int i = 25; i &lt; 35; i++) {                                                                  
array[i - 25] = (byte) i;                                                                              array[i - 25] = (byte) i;                                                                           
}                                                                                                      }                                                                                                   
cos.write(array, 5, 5);                                                                                cos.write(array, 5, 5);                                                                             
assertByteArrayEquals("CountingOutputStream.write(byte[], int, int)", baos.toByteArray(), 0, 35);      assertByteArrayEquals("CountingOutputStream.write(byte[], int, int)", baos.toByteArray(), 0, 35);   
assertEquals("CountingOutputStream.getCount()", cos.getCount(), 35);                                   assertEquals("CountingOutputStream.getCount()", cos.getCount(), 35);                                
final int count = cos.resetCount();                                                                    final int count = cos.resetCount();                                                                 
assertEquals("CountingOutputStream.resetCount()", count, 35);                                          assertEquals("CountingOutputStream.resetCount()", count, 35);                                       
for (int i = 0; i &lt; 10; i++) {                                                                      for (int i = 0; i &lt; 10; i++) {                                                                   
cos.write(i);                                                                                          cos.write(i);                                                                                       
}                                                                                                      }                                                                                                   
assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 35, 45);                  assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 35, 45);               
assertEquals("CountingOutputStream.getCount()", cos.getCount(), 10);                                   assertEquals("CountingOutputStream.getCount()", cos.getCount(), 10);                                
cos.close();                                                                                         |                                                                                                     
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
