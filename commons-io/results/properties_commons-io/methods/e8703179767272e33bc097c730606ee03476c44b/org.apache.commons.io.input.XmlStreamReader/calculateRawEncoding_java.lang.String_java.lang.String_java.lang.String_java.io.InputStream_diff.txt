private String calculateRawEncoding(String bomEnc, String xmlGuessEnc, String xmlEnc, InputStream is   private String calculateRawEncoding(String bomEnc, String xmlGuessEnc, String xmlEnc, InputStream is
String encoding;                                                                                       String encoding;                                                                                    
if (bomEnc == null) {                                                                                  if (bomEnc == null) {                                                                               
if (xmlGuessEnc == null || xmlEnc == null) {                                                           if (xmlGuessEnc == null || xmlEnc == null) {                                                        
encoding = (defaultEncoding == null) ? UTF_8 : defaultEncoding;                                        encoding = (defaultEncoding == null) ? UTF_8 : defaultEncoding;                                     
} else if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE)))    } else if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) 
encoding = xmlGuessEnc;                                                                                encoding = xmlGuessEnc;                                                                             
} else {                                                                                               } else {                                                                                            
encoding = xmlEnc;                                                                                     encoding = xmlEnc;                                                                                  
}                                                                                                      }                                                                                                   
} else if (bomEnc.equals(UTF_8)) {                                                                     } else if (bomEnc.equals(UTF_8)) {                                                                  
if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {                                               if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {                                            
throw new XmlStreamReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo | throw new XmlStreamReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo
}                                                                                                      }                                                                                                   
if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {                                                         if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {                                                      
throw new XmlStreamReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo | throw new XmlStreamReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo
}                                                                                                      }                                                                                                   
encoding = UTF_8;                                                                                      encoding = UTF_8;                                                                                   
} else if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {                                       } else if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {                                    
if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {                                              if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {                                           
throw new IOException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }));                  throw new IOException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }));               
}                                                                                                      }                                                                                                   
if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {                              if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {                           
throw new XmlStreamReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo | throw new XmlStreamReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo
}                                                                                                      }                                                                                                   
encoding = bomEnc;                                                                                     encoding = bomEnc;                                                                                  
} else {                                                                                               } else {                                                                                            
throw new XmlStreamReaderException(RAW_EX_2.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo | throw new XmlStreamReaderException(RAW_EX_2.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bo
}                                                                                                      }                                                                                                   
return encoding;                                                                                       return encoding;                                                                                    
}                                                                                                      }                                                                                                   
