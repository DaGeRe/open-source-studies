@Test                                                                                                  @Test                                                                                               
public void testContentEqualsIgnoreEOL() throws Exception {                                            public void testContentEqualsIgnoreEOL() throws Exception {                                         
final File file1 = new File(getTestDirectory(), getName());                                            final File file1 = new File(getTestDirectory(), getName());                                         
final File file2 = new File(getTestDirectory(), getName() + "2");                                      final File file2 = new File(getTestDirectory(), getName() + "2");                                   
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));                                      assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));                                   
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));                                      assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));                                   
assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file2, null));                                      assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file2, null));                                   
assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file1, null));                                      assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file1, null));                                   
try {                                                                                                  try {                                                                                               
FileUtils.contentEqualsIgnoreEOL(getTestDirectory(), getTestDirectory(), null);                        FileUtils.contentEqualsIgnoreEOL(getTestDirectory(), getTestDirectory(), null);                     
fail("Comparing directories should fail with an IOException");                                         fail("Comparing directories should fail with an IOException");                                      
} catch (final IOException ioe) {                                                                      } catch (final IOException ioe) {                                                                   
}                                                                                                      }                                                                                                   
final File tfile1 = new File(getTestDirectory(), getName() + ".txt1");                                 final File tfile1 = new File(getTestDirectory(), getName() + ".txt1");                              
tfile1.deleteOnExit();                                                                                 tfile1.deleteOnExit();                                                                              
FileUtils.write(tfile1, "123\r");                                                                      FileUtils.write(tfile1, "123\r");                                                                   
final File tfile2 = new File(getTestDirectory(), getName() + ".txt2");                                 final File tfile2 = new File(getTestDirectory(), getName() + ".txt2");                              
tfile1.deleteOnExit();                                                                                 tfile1.deleteOnExit();                                                                              
FileUtils.write(tfile2, "123\n");                                                                      FileUtils.write(tfile2, "123\n");                                                                   
final File tfile3 = new File(getTestDirectory(), getName() + ".collection");                           final File tfile3 = new File(getTestDirectory(), getName() + ".collection");                        
tfile3.deleteOnExit();                                                                                 tfile3.deleteOnExit();                                                                              
FileUtils.write(tfile3, "123\r\n2");                                                                   FileUtils.write(tfile3, "123\r\n2");                                                                
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));                                    assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));                                 
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));                                    assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));                                 
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));                                    assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));                                 
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));                                    assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));                                 
assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));                                   assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));                                
assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));                                   assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));                                
final URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");                                   final URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");                                
assertNotNull(urlCR);                                                                                  assertNotNull(urlCR);                                                                               
final File cr = new File(urlCR.getPath());                                                           | final File cr = new File(urlCR.toURI());                                                            
assertTrue(cr.exists());                                                                               assertTrue(cr.exists());                                                                            
final URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");                               final URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");                            
assertNotNull(urlCRLF);                                                                                assertNotNull(urlCRLF);                                                                             
final File crlf = new File(urlCRLF.getPath());                                                       | final File crlf = new File(urlCRLF.toURI());                                                        
assertTrue(crlf.exists());                                                                             assertTrue(crlf.exists());                                                                          
final URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");                                   final URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");                                
assertNotNull(urlLF);                                                                                  assertNotNull(urlLF);                                                                               
final File lf = new File(urlLF.getPath());                                                           | final File lf = new File(urlLF.toURI());                                                            
assertTrue(lf.exists());                                                                               assertTrue(lf.exists());                                                                            
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, cr, null));                                            assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, cr, null));                                         
assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));                                        assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));                                     
assertTrue(FileUtils.contentEqualsIgnoreEOL(lf, lf, null));                                            assertTrue(FileUtils.contentEqualsIgnoreEOL(lf, lf, null));                                         
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));                                          assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));                                       
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, lf, null));                                            assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, lf, null));                                         
assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));                                          assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));                                       
assertTrue(FileUtils.contentEquals(cr, cr));                                                           assertTrue(FileUtils.contentEquals(cr, cr));                                                        
assertTrue(FileUtils.contentEquals(crlf, crlf));                                                       assertTrue(FileUtils.contentEquals(crlf, crlf));                                                    
assertTrue(FileUtils.contentEquals(lf, lf));                                                           assertTrue(FileUtils.contentEquals(lf, lf));                                                        
assertFalse(FileUtils.contentEquals(cr, crlf));                                                        assertFalse(FileUtils.contentEquals(cr, crlf));                                                     
assertFalse(FileUtils.contentEquals(cr, lf));                                                          assertFalse(FileUtils.contentEquals(cr, lf));                                                       
assertFalse(FileUtils.contentEquals(crlf, lf));                                                        assertFalse(FileUtils.contentEquals(crlf, lf));                                                     
file1.createNewFile();                                                                                 file1.createNewFile();                                                                              
file2.createNewFile();                                                                                 file2.createNewFile();                                                                              
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));                                      assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));                                   
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));                                      assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));                                   
}                                                                                                      }                                                                                                   
