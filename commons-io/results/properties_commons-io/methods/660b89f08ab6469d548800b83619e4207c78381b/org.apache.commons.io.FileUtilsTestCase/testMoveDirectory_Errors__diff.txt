public void testMoveDirectory_Errors() throws Exception {                                              public void testMoveDirectory_Errors() throws Exception {                                           
try {                                                                                                  try {                                                                                               
FileUtils.moveDirectory(null, new File("foo"));                                                        FileUtils.moveDirectory(null, new File("foo"));                                                     
fail("Expected IllegalArgumentException when source is null");                                       | fail("Expected NullPointerException when source is null");                                          
} catch (IllegalArgumentException e) {                                                               | } catch (NullPointerException e) {                                                                  
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FileUtils.moveDirectory(new File("foo"), null);                                                        FileUtils.moveDirectory(new File("foo"), null);                                                     
fail("Expected IllegalArgumentException when destination is null");                                  | fail("Expected NullPointerException when destination is null");                                     
} catch (IllegalArgumentException e) {                                                               | } catch (NullPointerException e) {                                                                  
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));                                     FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));                                  
fail("Expected FileNotFoundException for source");                                                     fail("Expected FileNotFoundException for source");                                                  
} catch (FileNotFoundException e) {                                                                    } catch (FileNotFoundException e) {                                                                 
}                                                                                                      }                                                                                                   
File testFile = new File(getTestDirectory(), "testMoveDirectoryFile");                                 File testFile = new File(getTestDirectory(), "testMoveDirectoryFile");                              
createFile(testFile, 0);                                                                               createFile(testFile, 0);                                                                            
try {                                                                                                  try {                                                                                               
FileUtils.moveDirectory(testFile, new File("foo"));                                                    FileUtils.moveDirectory(testFile, new File("foo"));                                                 
fail("Expected IOException when source is not a directory");                                           fail("Expected IOException when source is not a directory");                                        
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
}                                                                                                      }                                                                                                   
File testSrcFile = new File(getTestDirectory(), "testMoveDirectorySource");                            File testSrcFile = new File(getTestDirectory(), "testMoveDirectorySource");                         
File testDestFile = new File(getTestDirectory(), "testMoveDirectoryDest");                             File testDestFile = new File(getTestDirectory(), "testMoveDirectoryDest");                          
testDestFile.mkdir();                                                                                  testDestFile.mkdir();                                                                               
try {                                                                                                  try {                                                                                               
FileUtils.moveDirectory(testSrcFile, testDestFile);                                                    FileUtils.moveDirectory(testSrcFile, testDestFile);                                                 
fail("Expected IOException when dest already exists");                                                 fail("Expected IOException when dest already exists");                                              
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
