@Test                                                                                                  @Test                                                                                               
public void testMultiThreadCancel() {                                                                | public void testMultiThreadCancel() throws IOException {                                            
String cancelName = "DirectoryWalker.java";                                                            String cancelName = "DirectoryWalker.java";                                                         
TestMultiThreadCancelWalker walker = new TestMultiThreadCancelWalker(cancelName, false);               TestMultiThreadCancelWalker walker = new TestMultiThreadCancelWalker(cancelName, false);            
try {                                                                                                  try {                                                                                               
walker.find(javaDir);                                                                                  walker.find(javaDir);                                                                               
fail("CancelException not thrown for '" + cancelName + "'");                                           fail("CancelException not thrown for '" + cancelName + "'");                                        
} catch (final DirectoryWalker.CancelException cancel) {                                               } catch (final DirectoryWalker.CancelException cancel) {                                            
final File last = (File) walker.results.get(walker.results.size() - 1);                                final File last = (File) walker.results.get(walker.results.size() - 1);                             
assertEquals(cancelName, last.getName());                                                              assertEquals(cancelName, last.getName());                                                           
assertEquals("Depth: " + cancelName, 5, cancel.getDepth());                                            assertEquals("Depth: " + cancelName, 5, cancel.getDepth());                                         
} catch (final IOException ex) {                                                                     |                                                                                                     
fail("IOException: " + cancelName + " " + ex);                                                       |                                                                                                     
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
cancelName = "commons";                                                                                cancelName = "commons";                                                                             
walker = new TestMultiThreadCancelWalker(cancelName, false);                                           walker = new TestMultiThreadCancelWalker(cancelName, false);                                        
walker.find(javaDir);                                                                                  walker.find(javaDir);                                                                               
fail("CancelException not thrown for '" + cancelName + "'");                                           fail("CancelException not thrown for '" + cancelName + "'");                                        
} catch (final DirectoryWalker.CancelException cancel) {                                               } catch (final DirectoryWalker.CancelException cancel) {                                            
assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName());                          assertEquals("File:  " + cancelName, cancelName, cancel.getFile().getName());                       
assertEquals("Depth: " + cancelName, 3, cancel.getDepth());                                            assertEquals("Depth: " + cancelName, 3, cancel.getDepth());                                         
} catch (final IOException ex) {                                                                     |                                                                                                     
fail("IOException: " + cancelName + " " + ex);                                                       |                                                                                                     
}                                                                                                      }                                                                                                   
try {                                                                                                |                                                                                                     
walker = new TestMultiThreadCancelWalker(cancelName, true);                                            walker = new TestMultiThreadCancelWalker(cancelName, true);                                         
final List results = walker.find(javaDir);                                                             final List results = walker.find(javaDir);                                                          
final File lastFile = (File) results.get(results.size() - 1);                                          final File lastFile = (File) results.get(results.size() - 1);                                       
assertEquals("Suppress:  " + cancelName, cancelName, lastFile.getName());                              assertEquals("Suppress:  " + cancelName, cancelName, lastFile.getName());                           
} catch (final IOException ex) {                                                                     |                                                                                                     
fail("Suppress threw " + ex);                                                                        |                                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                    |                                                                                                     
