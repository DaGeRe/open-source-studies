@Test                                                                                                  @Test                                                                                               
public void testObserveSingleFile() {                                                                | public void testObserveSingleFile() throws Exception {                                              
try {                                                                                                |                                                                                                     
final File testDirA = new File(testDir, "test-dir-A");                                                 final File testDirA = new File(testDir, "test-dir-A");                                              
File testDirAFile1 = new File(testDirA, "A-file1.java");                                               File testDirAFile1 = new File(testDirA, "A-file1.java");                                            
testDirA.mkdir();                                                                                      testDirA.mkdir();                                                                                   
final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());                 final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());              
createObserver(testDirA, nameFilter);                                                                  createObserver(testDirA, nameFilter);                                                               
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionsEmpty("A");                                                                            checkCollectionsEmpty("A");                                                                         
assertFalse("A testDirAFile1 exists", testDirAFile1.exists());                                         assertFalse("A testDirAFile1 exists", testDirAFile1.exists());                                      
testDirAFile1 = touch(testDirAFile1);                                                                  testDirAFile1 = touch(testDirAFile1);                                                               
File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));                                         File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));                                      
File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));                                        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));                                     
assertTrue("B testDirAFile1 exists", testDirAFile1.exists());                                          assertTrue("B testDirAFile1 exists", testDirAFile1.exists());                                       
assertTrue("B testDirAFile2 exists", testDirAFile2.exists());                                          assertTrue("B testDirAFile2 exists", testDirAFile2.exists());                                       
assertTrue("B testDirAFile3 exists", testDirAFile3.exists());                                          assertTrue("B testDirAFile3 exists", testDirAFile3.exists());                                       
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionSizes("C", 0, 0, 0, 1, 0, 0);                                                           checkCollectionSizes("C", 0, 0, 0, 1, 0, 0);                                                        
assertTrue("C created", listener.getCreatedFiles().contains(testDirAFile1));                           assertTrue("C created", listener.getCreatedFiles().contains(testDirAFile1));                        
assertFalse("C created", listener.getCreatedFiles().contains(testDirAFile2));                          assertFalse("C created", listener.getCreatedFiles().contains(testDirAFile2));                       
assertFalse("C created", listener.getCreatedFiles().contains(testDirAFile3));                          assertFalse("C created", listener.getCreatedFiles().contains(testDirAFile3));                       
testDirAFile1 = touch(testDirAFile1);                                                                  testDirAFile1 = touch(testDirAFile1);                                                               
testDirAFile2 = touch(testDirAFile2);                                                                  testDirAFile2 = touch(testDirAFile2);                                                               
testDirAFile3 = touch(testDirAFile3);                                                                  testDirAFile3 = touch(testDirAFile3);                                                               
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionSizes("D", 0, 0, 0, 0, 1, 0);                                                           checkCollectionSizes("D", 0, 0, 0, 0, 1, 0);                                                        
assertTrue("D changed", listener.getChangedFiles().contains(testDirAFile1));                           assertTrue("D changed", listener.getChangedFiles().contains(testDirAFile1));                        
assertFalse("D changed", listener.getChangedFiles().contains(testDirAFile2));                          assertFalse("D changed", listener.getChangedFiles().contains(testDirAFile2));                       
assertFalse("D changed", listener.getChangedFiles().contains(testDirAFile3));                          assertFalse("D changed", listener.getChangedFiles().contains(testDirAFile3));                       
FileUtils.deleteQuietly(testDirAFile1);                                                                FileUtils.deleteQuietly(testDirAFile1);                                                             
FileUtils.deleteQuietly(testDirAFile2);                                                                FileUtils.deleteQuietly(testDirAFile2);                                                             
FileUtils.deleteQuietly(testDirAFile3);                                                                FileUtils.deleteQuietly(testDirAFile3);                                                             
assertFalse("E testDirAFile1 exists", testDirAFile1.exists());                                         assertFalse("E testDirAFile1 exists", testDirAFile1.exists());                                      
assertFalse("E testDirAFile2 exists", testDirAFile2.exists());                                         assertFalse("E testDirAFile2 exists", testDirAFile2.exists());                                      
assertFalse("E testDirAFile3 exists", testDirAFile3.exists());                                         assertFalse("E testDirAFile3 exists", testDirAFile3.exists());                                      
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionSizes("E", 0, 0, 0, 0, 0, 1);                                                           checkCollectionSizes("E", 0, 0, 0, 0, 0, 1);                                                        
assertTrue("E deleted", listener.getDeletedFiles().contains(testDirAFile1));                           assertTrue("E deleted", listener.getDeletedFiles().contains(testDirAFile1));                        
assertFalse("E deleted", listener.getDeletedFiles().contains(testDirAFile2));                          assertFalse("E deleted", listener.getDeletedFiles().contains(testDirAFile2));                       
assertFalse("E deleted", listener.getDeletedFiles().contains(testDirAFile3));                          assertFalse("E deleted", listener.getDeletedFiles().contains(testDirAFile3));                       
} catch (final Exception e) {                                                                        |                                                                                                     
fail("Threw " + e);                                                                                  |                                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                    |                                                                                                     
