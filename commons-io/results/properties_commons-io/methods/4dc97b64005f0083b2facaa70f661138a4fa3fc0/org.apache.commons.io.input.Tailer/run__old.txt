public void run() {
    RandomAccessFile reader = null;
    try {
        long last = 0;
        long position = 0;
        while (getRun() && reader == null) {
            try {
                reader = new RandomAccessFile(file, RAF_MODE);
            } catch (final FileNotFoundException e) {
                listener.fileNotFound();
            }
            if (reader == null) {
                Thread.sleep(delayMillis);
            } else {
                position = end ? file.length() : 0;
                last = file.lastModified();
                reader.seek(position);
            }
        }
        while (getRun()) {
            final boolean newer = FileUtils.isFileNewer(file, last);
            final long length = file.length();
            if (length < position) {
                listener.fileRotated();
                try {
                    final RandomAccessFile save = reader;
                    reader = new RandomAccessFile(file, RAF_MODE);
                    try {
                        readLines(save);
                    } catch (IOException ioe) {
                        listener.handle(ioe);
                    }
                    position = 0;
                    IOUtils.closeQuietly(save);
                } catch (final FileNotFoundException e) {
                    listener.fileNotFound();
                }
                continue;
            } else {
                if (length > position) {
                    position = readLines(reader);
                    last = file.lastModified();
                } else if (newer) {
                    position = 0;
                    reader.seek(position);
                    position = readLines(reader);
                    last = file.lastModified();
                }
            }
            if (reOpen) {
                IOUtils.closeQuietly(reader);
            }
            Thread.sleep(delayMillis);
            if (getRun() && reOpen) {
                reader = new RandomAccessFile(file, RAF_MODE);
                reader.seek(position);
            }
        }
    } catch (final InterruptedException e) {
        Thread.currentThread().interrupt();
        stop(e);
    } catch (final Exception e) {
        stop(e);
    } finally {
        IOUtils.closeQuietly(reader);
    }
}