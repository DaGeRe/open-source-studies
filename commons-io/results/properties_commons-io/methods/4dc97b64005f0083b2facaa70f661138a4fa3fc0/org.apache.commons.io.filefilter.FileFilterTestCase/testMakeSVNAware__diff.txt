@Test
public void testMakeSVNAware() throws Exception {
    final IOFileFilter filter1 = FileFilterUtils.makeSVNAware(null);
    final IOFileFilter filter2 = FileFilterUtils.makeSVNAware(FileFilterUtils.nameFileFilter("test-file1.txt"));
    File file = new File(getTestDirectory(), SVN_DIR_NAME);
    file.mkdirs();
    assertFiltering(filter1, file, false);
    assertFiltering(filter2, file, false);
    FileUtils.deleteDirectory(file);
    file = new File(getTestDirectory(), "test-file1.txt");
    if (!file.getParentFile().exists()) {
        throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
    }
    final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(file));
    try {
        TestUtils.generateTestData(output2, (long) 0);
    } finally {
        IOUtils.closeQuietly(output2);
    }
    assertFiltering(filter1, file, true);
    assertFiltering(filter2, file, true);
    file = new File(getTestDirectory(), "test-file2.log");
    if (!file.getParentFile().exists()) {
        throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
    }
    final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(file));
    try {
        TestUtils.generateTestData(output1, (long) 0);
    } finally {
        IOUtils.closeQuietly(output1);
    }
    assertFiltering(filter1, file, true);
    assertFiltering(filter2, file, false);
    file = new File(getTestDirectory(), SVN_DIR_NAME);
    if (!file.getParentFile().exists()) {
        throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
    }
    final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(file));
    try {
        TestUtils.generateTestData(output, (long) 0);
    } finally {
        IOUtils.closeQuietly(output);
    }
    assertFiltering(filter1, file, true);
    assertFiltering(filter2, file, false);
}