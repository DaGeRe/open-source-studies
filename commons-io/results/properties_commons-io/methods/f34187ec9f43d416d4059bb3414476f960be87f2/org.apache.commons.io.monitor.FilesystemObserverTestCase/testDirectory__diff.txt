public void testDirectory() {                                                                          public void testDirectory() {                                                                       
try {                                                                                                  try {                                                                                               
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionsEmpty("A");                                                                            checkCollectionsEmpty("A");                                                                         
File testDirA = new File(testDir, "test-dir-A");                                                       File testDirA = new File(testDir, "test-dir-A");                                                    
File testDirB = new File(testDir, "test-dir-B");                                                       File testDirB = new File(testDir, "test-dir-B");                                                    
File testDirC = new File(testDir, "test-dir-C");                                                       File testDirC = new File(testDir, "test-dir-C");                                                    
testDirA.mkdir();                                                                                      testDirA.mkdir();                                                                                   
testDirB.mkdir();                                                                                      testDirB.mkdir();                                                                                   
testDirC.mkdir();                                                                                      testDirC.mkdir();                                                                                   
File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));                                        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));                                     
File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));                                         File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));                                      
File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));                                        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));                                     
File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));                                        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));                                     
File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));                                        File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));                                     
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionSizes("B", 3, 0, 0, 4, 0, 0);                                                         | checkDirectoryCounts("B", 3, 0, 0);                                                                 
                                                                                                     | checkFileCounts("B", 4, 0, 0);                                                                      
assertTrue("B testDirA", listener.getCreatedDirectories().contains(testDirA));                         assertTrue("B testDirA", listener.getCreatedDirectories().contains(testDirA));                      
assertTrue("B testDirB", listener.getCreatedDirectories().contains(testDirB));                         assertTrue("B testDirB", listener.getCreatedDirectories().contains(testDirB));                      
assertTrue("B testDirC", listener.getCreatedDirectories().contains(testDirC));                         assertTrue("B testDirC", listener.getCreatedDirectories().contains(testDirC));                      
assertTrue("B testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1));                     assertTrue("B testDirAFile1", listener.getCreatedFiles().contains(testDirAFile1));                  
assertFalse("B testDirAFile2", listener.getCreatedFiles().contains(testDirAFile2));                    assertFalse("B testDirAFile2", listener.getCreatedFiles().contains(testDirAFile2));                 
assertTrue("B testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3));                     assertTrue("B testDirAFile3", listener.getCreatedFiles().contains(testDirAFile3));                  
assertTrue("B testDirAFile4", listener.getCreatedFiles().contains(testDirAFile4));                     assertTrue("B testDirAFile4", listener.getCreatedFiles().contains(testDirAFile4));                  
assertTrue("B testDirBFile1", listener.getCreatedFiles().contains(testDirBFile1));                     assertTrue("B testDirBFile1", listener.getCreatedFiles().contains(testDirBFile1));                  
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionsEmpty("C");                                                                            checkCollectionsEmpty("C");                                                                         
testDirAFile4 = touch(testDirAFile4);                                                                  testDirAFile4 = touch(testDirAFile4);                                                               
FileUtils.deleteDirectory(testDirB);                                                                   FileUtils.deleteDirectory(testDirB);                                                                
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionSizes("D", 0, 0, 1, 0, 1, 1);                                                         | checkDirectoryCounts("D", 0, 0, 1);                                                                 
                                                                                                     | checkFileCounts("D", 0, 1, 1);                                                                      
assertTrue("D testDirB", listener.getDeletedDirectories().contains(testDirB));                         assertTrue("D testDirB", listener.getDeletedDirectories().contains(testDirB));                      
assertTrue("D testDirAFile4", listener.getChangedFiles().contains(testDirAFile4));                     assertTrue("D testDirAFile4", listener.getChangedFiles().contains(testDirAFile4));                  
assertTrue("D testDirBFile1", listener.getDeletedFiles().contains(testDirBFile1));                     assertTrue("D testDirBFile1", listener.getDeletedFiles().contains(testDirBFile1));                  
FileUtils.deleteDirectory(testDir);                                                                    FileUtils.deleteDirectory(testDir);                                                                 
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionSizes("E", 0, 0, 2, 0, 0, 3);                                                         | checkDirectoryCounts("E", 0, 0, 2);                                                                 
                                                                                                     | checkFileCounts("E", 0, 0, 3);                                                                      
assertTrue("E testDirA", listener.getDeletedDirectories().contains(testDirA));                         assertTrue("E testDirA", listener.getDeletedDirectories().contains(testDirA));                      
assertTrue("E testDirAFile1", listener.getDeletedFiles().contains(testDirAFile1));                     assertTrue("E testDirAFile1", listener.getDeletedFiles().contains(testDirAFile1));                  
assertFalse("E testDirAFile2", listener.getDeletedFiles().contains(testDirAFile2));                    assertFalse("E testDirAFile2", listener.getDeletedFiles().contains(testDirAFile2));                 
assertTrue("E testDirAFile3", listener.getDeletedFiles().contains(testDirAFile3));                     assertTrue("E testDirAFile3", listener.getDeletedFiles().contains(testDirAFile3));                  
assertTrue("E testDirAFile4", listener.getDeletedFiles().contains(testDirAFile4));                     assertTrue("E testDirAFile4", listener.getDeletedFiles().contains(testDirAFile4));                  
testDir.mkdir();                                                                                       testDir.mkdir();                                                                                    
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionsEmpty("F");                                                                            checkCollectionsEmpty("F");                                                                         
checkAndNotify();                                                                                      checkAndNotify();                                                                                   
checkCollectionsEmpty("G");                                                                            checkCollectionsEmpty("G");                                                                         
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
e.printStackTrace();                                                                                   e.printStackTrace();                                                                                
fail("Threw " + e);                                                                                    fail("Threw " + e);                                                                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
