@Before
public void setUp() throws Exception {
    comparator = (AbstractFileComparator) SizeFileComparator.SIZE_COMPARATOR;
    reverse = SizeFileComparator.SIZE_REVERSE;
    final File dir = getTestDirectory();
    smallerDir = new File(dir, "smallerdir");
    largerDir = new File(dir, "largerdir");
    smallerFile = new File(smallerDir, "smaller.txt");
    final File equalFile = new File(dir, "equal.txt");
    largerFile = new File(largerDir, "larger.txt");
    smallerDir.mkdir();
    largerDir.mkdir();
    if (!smallerFile.getParentFile().exists()) {
        throw new IOException("Cannot create file " + smallerFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(smallerFile));
    try {
        TestUtils.generateTestData(output2, (long) 32);
    } finally {
        IOUtils.closeQuietly(output2);
    }
    if (!equalFile.getParentFile().exists()) {
        throw new IOException("Cannot create file " + equalFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(equalFile));
    try {
        TestUtils.generateTestData(output1, (long) 48);
    } finally {
        IOUtils.closeQuietly(output1);
    }
    if (!largerFile.getParentFile().exists()) {
        throw new IOException("Cannot create file " + largerFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(largerFile));
    try {
        TestUtils.generateTestData(output, (long) 64);
    } finally {
        IOUtils.closeQuietly(output);
    }
    equalFile1 = equalFile;
    equalFile2 = equalFile;
    lessFile = smallerFile;
    moreFile = largerFile;
}