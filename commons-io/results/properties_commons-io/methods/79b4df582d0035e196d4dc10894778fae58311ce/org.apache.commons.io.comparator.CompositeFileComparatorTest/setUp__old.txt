@Before
public void setUp() throws Exception {
    comparator = new CompositeFileComparator(new AbstractFileComparator[] { (AbstractFileComparator) SizeFileComparator.SIZE_COMPARATOR, (AbstractFileComparator) ExtensionFileComparator.EXTENSION_COMPARATOR });
    reverse = new ReverseComparator(comparator);
    final File dir = getTestDirectory();
    lessFile = new File(dir, "xyz.txt");
    equalFile1 = new File(dir, "foo.txt");
    equalFile2 = new File(dir, "bar.txt");
    moreFile = new File(dir, "foo.xyz");
    if (!lessFile.getParentFile().exists()) {
        throw new IOException("Cannot create file " + lessFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output3 = new BufferedOutputStream(new FileOutputStream(lessFile));
    try {
        TestUtils.generateTestData(output3, (long) 32);
    } finally {
        IOUtils.closeQuietly(output3);
    }
    if (!equalFile1.getParentFile().exists()) {
        throw new IOException("Cannot create file " + equalFile1 + " as the parent directory does not exist");
    }
    final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(equalFile1));
    try {
        TestUtils.generateTestData(output2, (long) 48);
    } finally {
        IOUtils.closeQuietly(output2);
    }
    if (!equalFile2.getParentFile().exists()) {
        throw new IOException("Cannot create file " + equalFile2 + " as the parent directory does not exist");
    }
    final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(equalFile2));
    try {
        TestUtils.generateTestData(output1, (long) 48);
    } finally {
        IOUtils.closeQuietly(output1);
    }
    if (!moreFile.getParentFile().exists()) {
        throw new IOException("Cannot create file " + moreFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(moreFile));
    try {
        TestUtils.generateTestData(output, (long) 48);
    } finally {
        IOUtils.closeQuietly(output);
    }
}