@Test                                                                                                  @Test                                                                                               
public void testAgeFilter() throws Exception {                                                         public void testAgeFilter() throws Exception {                                                      
final File oldFile = new File(getTestDirectory(), "old.txt");                                          final File oldFile = new File(getTestDirectory(), "old.txt");                                       
final File reference = new File(getTestDirectory(), "reference.txt");                                  final File reference = new File(getTestDirectory(), "reference.txt");                               
final File newFile = new File(getTestDirectory(), "new.txt");                                          final File newFile = new File(getTestDirectory(), "new.txt");                                       
if (!oldFile.getParentFile().exists()) {                                                               if (!oldFile.getParentFile().exists()) {                                                            
throw new IOException("Cannot create file " + oldFile + " as the parent directory does not exist");    throw new IOException("Cannot create file " + oldFile + " as the parent directory does not exist"); 
}                                                                                                      }                                                                                                   
final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(oldFile));        | try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(oldFile))) {
try {                                                                                                |                                                                                                     
TestUtils.generateTestData(output1, (long) 0);                                                         TestUtils.generateTestData(output1, (long) 0);                                                      
} finally {                                                                                          |                                                                                                     
IOUtils.closeQuietly(output1);                                                                       |                                                                                                     
}                                                                                                      }                                                                                                   
do {                                                                                                   do {                                                                                                
try {                                                                                                  try {                                                                                               
TestUtils.sleep(1000);                                                                                 TestUtils.sleep(1000);                                                                              
} catch (final InterruptedException ie) {                                                              } catch (final InterruptedException ie) {                                                           
}                                                                                                      }                                                                                                   
if (!reference.getParentFile().exists()) {                                                             if (!reference.getParentFile().exists()) {                                                          
throw new IOException("Cannot create file " + reference + " as the parent directory does not exist")   throw new IOException("Cannot create file " + reference + " as the parent directory does not exist")
}                                                                                                      }                                                                                                   
final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(reference));       | try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(reference))) 
try {                                                                                                |                                                                                                     
TestUtils.generateTestData(output, (long) 0);                                                          TestUtils.generateTestData(output, (long) 0);                                                       
} finally {                                                                                          |                                                                                                     
IOUtils.closeQuietly(output);                                                                        |                                                                                                     
}                                                                                                      }                                                                                                   
} while (oldFile.lastModified() == reference.lastModified());                                          } while (oldFile.lastModified() == reference.lastModified());                                       
final Date date = new Date();                                                                          final Date date = new Date();                                                                       
final long now = date.getTime();                                                                       final long now = date.getTime();                                                                    
do {                                                                                                   do {                                                                                                
try {                                                                                                  try {                                                                                               
TestUtils.sleep(1000);                                                                                 TestUtils.sleep(1000);                                                                              
} catch (final InterruptedException ie) {                                                              } catch (final InterruptedException ie) {                                                           
}                                                                                                      }                                                                                                   
if (!newFile.getParentFile().exists()) {                                                               if (!newFile.getParentFile().exists()) {                                                            
throw new IOException("Cannot create file " + newFile + " as the parent directory does not exist");    throw new IOException("Cannot create file " + newFile + " as the parent directory does not exist"); 
}                                                                                                      }                                                                                                   
final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(newFile));         | try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(newFile))) { 
try {                                                                                                |                                                                                                     
TestUtils.generateTestData(output, (long) 0);                                                          TestUtils.generateTestData(output, (long) 0);                                                       
} finally {                                                                                          |                                                                                                     
IOUtils.closeQuietly(output);                                                                        |                                                                                                     
}                                                                                                      }                                                                                                   
} while (reference.lastModified() == newFile.lastModified());                                          } while (reference.lastModified() == newFile.lastModified());                                       
final IOFileFilter filter1 = FileFilterUtils.ageFileFilter(now);                                       final IOFileFilter filter1 = FileFilterUtils.ageFileFilter(now);                                    
final IOFileFilter filter2 = FileFilterUtils.ageFileFilter(now, true);                                 final IOFileFilter filter2 = FileFilterUtils.ageFileFilter(now, true);                              
final IOFileFilter filter3 = FileFilterUtils.ageFileFilter(now, false);                                final IOFileFilter filter3 = FileFilterUtils.ageFileFilter(now, false);                             
final IOFileFilter filter4 = FileFilterUtils.ageFileFilter(date);                                      final IOFileFilter filter4 = FileFilterUtils.ageFileFilter(date);                                   
final IOFileFilter filter5 = FileFilterUtils.ageFileFilter(date, true);                                final IOFileFilter filter5 = FileFilterUtils.ageFileFilter(date, true);                             
final IOFileFilter filter6 = FileFilterUtils.ageFileFilter(date, false);                               final IOFileFilter filter6 = FileFilterUtils.ageFileFilter(date, false);                            
final IOFileFilter filter7 = FileFilterUtils.ageFileFilter(reference);                                 final IOFileFilter filter7 = FileFilterUtils.ageFileFilter(reference);                              
final IOFileFilter filter8 = FileFilterUtils.ageFileFilter(reference, true);                           final IOFileFilter filter8 = FileFilterUtils.ageFileFilter(reference, true);                        
final IOFileFilter filter9 = FileFilterUtils.ageFileFilter(reference, false);                          final IOFileFilter filter9 = FileFilterUtils.ageFileFilter(reference, false);                       
assertFiltering(filter1, oldFile, true);                                                               assertFiltering(filter1, oldFile, true);                                                            
assertFiltering(filter2, oldFile, true);                                                               assertFiltering(filter2, oldFile, true);                                                            
assertFiltering(filter3, oldFile, false);                                                              assertFiltering(filter3, oldFile, false);                                                           
assertFiltering(filter4, oldFile, true);                                                               assertFiltering(filter4, oldFile, true);                                                            
assertFiltering(filter5, oldFile, true);                                                               assertFiltering(filter5, oldFile, true);                                                            
assertFiltering(filter6, oldFile, false);                                                              assertFiltering(filter6, oldFile, false);                                                           
assertFiltering(filter7, oldFile, true);                                                               assertFiltering(filter7, oldFile, true);                                                            
assertFiltering(filter8, oldFile, true);                                                               assertFiltering(filter8, oldFile, true);                                                            
assertFiltering(filter9, oldFile, false);                                                              assertFiltering(filter9, oldFile, false);                                                           
assertFiltering(filter1, newFile, false);                                                              assertFiltering(filter1, newFile, false);                                                           
assertFiltering(filter2, newFile, false);                                                              assertFiltering(filter2, newFile, false);                                                           
assertFiltering(filter3, newFile, true);                                                               assertFiltering(filter3, newFile, true);                                                            
assertFiltering(filter4, newFile, false);                                                              assertFiltering(filter4, newFile, false);                                                           
assertFiltering(filter5, newFile, false);                                                              assertFiltering(filter5, newFile, false);                                                           
assertFiltering(filter6, newFile, true);                                                               assertFiltering(filter6, newFile, true);                                                            
assertFiltering(filter7, newFile, false);                                                              assertFiltering(filter7, newFile, false);                                                           
assertFiltering(filter8, newFile, false);                                                              assertFiltering(filter8, newFile, false);                                                           
assertFiltering(filter9, newFile, true);                                                               assertFiltering(filter9, newFile, true);                                                            
}                                                                                                      }                                                                                                   
