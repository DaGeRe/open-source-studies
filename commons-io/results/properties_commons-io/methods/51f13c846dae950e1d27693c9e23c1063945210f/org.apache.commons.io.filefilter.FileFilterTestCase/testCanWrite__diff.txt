@Test
public void testCanWrite() throws Exception {
    final File readOnlyFile = new File(getTestDirectory(), "read-only-file2.txt");
    if (!readOnlyFile.getParentFile().exists()) {
        throw new IOException("Cannot create file " + readOnlyFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(readOnlyFile));
    try {
        TestUtils.generateTestData(output, (long) 32);
    } finally {
        IOUtils.closeQuietly(output);
    }
    readOnlyFile.setReadOnly();
    assertFiltering(CanWriteFileFilter.CAN_WRITE, getTestDirectory(), true);
    assertFiltering(CanWriteFileFilter.CANNOT_WRITE, getTestDirectory(), false);
    assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
    assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
    readOnlyFile.delete();
}