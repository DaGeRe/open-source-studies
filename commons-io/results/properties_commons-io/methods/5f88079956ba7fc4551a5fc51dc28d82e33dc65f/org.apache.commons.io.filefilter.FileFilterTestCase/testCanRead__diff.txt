@Test                                                                                                  @Test                                                                                               
public void testCanRead() throws Exception {                                                           public void testCanRead() throws Exception {                                                        
final File readOnlyFile = new File(getTestDirectory(), "read-only-file1.txt");                         final File readOnlyFile = new File(getTestDirectory(), "read-only-file1.txt");                      
if (!readOnlyFile.getParentFile().exists()) {                                                          if (!readOnlyFile.getParentFile().exists()) {                                                       
throw new IOException("Cannot create file " + readOnlyFile + " as the parent directory does not exis   throw new IOException("Cannot create file " + readOnlyFile + " as the parent directory does not exis
}                                                                                                      }                                                                                                   
try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(readOnlyFile)   try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(readOnlyFile)
TestUtils.generateTestData(output, (long) 32);                                                       | TestUtils.generateTestData(output, 32);                                                             
}                                                                                                      }                                                                                                   
readOnlyFile.setReadOnly();                                                                            readOnlyFile.setReadOnly();                                                                         
assertFiltering(CanReadFileFilter.CAN_READ, readOnlyFile, true);                                       assertFiltering(CanReadFileFilter.CAN_READ, readOnlyFile, true);                                    
assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyFile, false);                                   assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyFile, false);                                
assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyFile, true);                                      assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyFile, true);                                   
readOnlyFile.delete();                                                                                 readOnlyFile.delete();                                                                              
}                                                                                                      }                                                                                                   
