@Test                                                                                                  @Test                                                                                               
public void testMakeDirectoryOnly() throws Exception {                                                 public void testMakeDirectoryOnly() throws Exception {                                              
assertSame(DirectoryFileFilter.DIRECTORY, FileFilterUtils.makeDirectoryOnly(null));                    assertSame(DirectoryFileFilter.DIRECTORY, FileFilterUtils.makeDirectoryOnly(null));                 
final IOFileFilter filter = FileFilterUtils.makeDirectoryOnly(FileFilterUtils.nameFileFilter("B"));    final IOFileFilter filter = FileFilterUtils.makeDirectoryOnly(FileFilterUtils.nameFileFilter("B")); 
final File fileA = new File(getTestDirectory(), "A");                                                  final File fileA = new File(getTestDirectory(), "A");                                               
final File fileB = new File(getTestDirectory(), "B");                                                  final File fileB = new File(getTestDirectory(), "B");                                               
fileA.mkdirs();                                                                                        fileA.mkdirs();                                                                                     
fileB.mkdirs();                                                                                        fileB.mkdirs();                                                                                     
assertFiltering(filter, fileA, false);                                                                 assertFiltering(filter, fileA, false);                                                              
assertFiltering(filter, fileB, true);                                                                  assertFiltering(filter, fileB, true);                                                               
FileUtils.deleteDirectory(fileA);                                                                      FileUtils.deleteDirectory(fileA);                                                                   
FileUtils.deleteDirectory(fileB);                                                                      FileUtils.deleteDirectory(fileB);                                                                   
if (!fileA.getParentFile().exists()) {                                                                 if (!fileA.getParentFile().exists()) {                                                              
throw new IOException("Cannot create file " + fileA + " as the parent directory does not exist");      throw new IOException("Cannot create file " + fileA + " as the parent directory does not exist");   
}                                                                                                      }                                                                                                   
try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(fileA))) {     try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(fileA))) {  
TestUtils.generateTestData(output1, (long) 32);                                                      | TestUtils.generateTestData(output1, 32);                                                            
}                                                                                                      }                                                                                                   
if (!fileB.getParentFile().exists()) {                                                                 if (!fileB.getParentFile().exists()) {                                                              
throw new IOException("Cannot create file " + fileB + " as the parent directory does not exist");      throw new IOException("Cannot create file " + fileB + " as the parent directory does not exist");   
}                                                                                                      }                                                                                                   
try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(fileB))) {      try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(fileB))) {   
TestUtils.generateTestData(output, (long) 32);                                                       | TestUtils.generateTestData(output, 32);                                                             
}                                                                                                      }                                                                                                   
assertFiltering(filter, fileA, false);                                                                 assertFiltering(filter, fileA, false);                                                              
assertFiltering(filter, fileB, false);                                                                 assertFiltering(filter, fileB, false);                                                              
fileA.delete();                                                                                        fileA.delete();                                                                                     
fileB.delete();                                                                                        fileB.delete();                                                                                     
}                                                                                                      }                                                                                                   
