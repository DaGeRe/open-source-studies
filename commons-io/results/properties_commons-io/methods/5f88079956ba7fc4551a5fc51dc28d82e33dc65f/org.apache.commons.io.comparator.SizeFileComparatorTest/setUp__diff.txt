@Before                                                                                                @Before                                                                                             
public void setUp() throws Exception {                                                                 public void setUp() throws Exception {                                                              
comparator = (AbstractFileComparator) SizeFileComparator.SIZE_COMPARATOR;                              comparator = (AbstractFileComparator) SizeFileComparator.SIZE_COMPARATOR;                           
reverse = SizeFileComparator.SIZE_REVERSE;                                                             reverse = SizeFileComparator.SIZE_REVERSE;                                                          
final File dir = getTestDirectory();                                                                   final File dir = getTestDirectory();                                                                
smallerDir = new File(dir, "smallerdir");                                                              smallerDir = new File(dir, "smallerdir");                                                           
largerDir = new File(dir, "largerdir");                                                                largerDir = new File(dir, "largerdir");                                                             
smallerFile = new File(smallerDir, "smaller.txt");                                                     smallerFile = new File(smallerDir, "smaller.txt");                                                  
final File equalFile = new File(dir, "equal.txt");                                                     final File equalFile = new File(dir, "equal.txt");                                                  
largerFile = new File(largerDir, "larger.txt");                                                        largerFile = new File(largerDir, "larger.txt");                                                     
smallerDir.mkdir();                                                                                    smallerDir.mkdir();                                                                                 
largerDir.mkdir();                                                                                     largerDir.mkdir();                                                                                  
if (!smallerFile.getParentFile().exists()) {                                                           if (!smallerFile.getParentFile().exists()) {                                                        
throw new IOException("Cannot create file " + smallerFile + " as the parent directory does not exist   throw new IOException("Cannot create file " + smallerFile + " as the parent directory does not exist
}                                                                                                      }                                                                                                   
try (final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(smallerFile)   try (final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(smallerFile)
TestUtils.generateTestData(output2, (long) 32);                                                      | TestUtils.generateTestData(output2, 32);                                                            
}                                                                                                      }                                                                                                   
if (!equalFile.getParentFile().exists()) {                                                             if (!equalFile.getParentFile().exists()) {                                                          
throw new IOException("Cannot create file " + equalFile + " as the parent directory does not exist")   throw new IOException("Cannot create file " + equalFile + " as the parent directory does not exist")
}                                                                                                      }                                                                                                   
try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(equalFile)))   try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(equalFile)))
TestUtils.generateTestData(output1, (long) 48);                                                      | TestUtils.generateTestData(output1, 48);                                                            
}                                                                                                      }                                                                                                   
if (!largerFile.getParentFile().exists()) {                                                            if (!largerFile.getParentFile().exists()) {                                                         
throw new IOException("Cannot create file " + largerFile + " as the parent directory does not exist"   throw new IOException("Cannot create file " + largerFile + " as the parent directory does not exist"
}                                                                                                      }                                                                                                   
try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(largerFile)))   try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(largerFile)))
TestUtils.generateTestData(output, (long) 64);                                                       | TestUtils.generateTestData(output, 64);                                                             
}                                                                                                      }                                                                                                   
equalFile1 = equalFile;                                                                                equalFile1 = equalFile;                                                                             
equalFile2 = equalFile;                                                                                equalFile2 = equalFile;                                                                             
lessFile = smallerFile;                                                                                lessFile = smallerFile;                                                                             
moreFile = largerFile;                                                                                 moreFile = largerFile;                                                                              
}                                                                                                      }                                                                                                   
