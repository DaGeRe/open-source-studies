@Before                                                                                                @Before                                                                                             
public void setUp() {                                                                                  public void setUp() {                                                                               
try {                                                                                                  try {                                                                                               
getTestDirectory().mkdirs();                                                                         |                                                                                                     
m_testFile = new File(getTestDirectory(), "file2-test.txt");                                           m_testFile = new File(getTestDirectory(), "file2-test.txt");                                        
if (!m_testFile.getParentFile().exists()) {                                                            if (!m_testFile.getParentFile().exists()) {                                                         
throw new IOException("Cannot create file " + m_testFile + " as the parent directory does not exist"   throw new IOException("Cannot create file " + m_testFile + " as the parent directory does not exist"
}                                                                                                      }                                                                                                   
final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(m_testFile));        final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(m_testFile));     
try {                                                                                                  try {                                                                                               
TestUtils.generateTestData(output, (long) FILE_SIZE);                                                | TestUtils.generateTestData(output, FILE_SIZE);                                                      
} finally {                                                                                            } finally {                                                                                         
IOUtils.closeQuietly(output);                                                                          IOUtils.closeQuietly(output);                                                                       
}                                                                                                      }                                                                                                   
} catch (final IOException ioe) {                                                                      } catch (final IOException ioe) {                                                                   
throw new RuntimeException("Can't run this test because the environment could not be built: " + ioe.   throw new RuntimeException("Can't run this test because the environment could not be built: " + ioe.
}                                                                                                      }                                                                                                   
iarr = new byte[200];                                                                                  iarr = new byte[200];                                                                               
Arrays.fill(iarr, (byte) -1);                                                                          Arrays.fill(iarr, (byte) -1);                                                                       
for (int i = 0; i &lt; 80; i++) {                                                                      for (int i = 0; i &lt; 80; i++) {                                                                   
iarr[i] = (byte) i;                                                                                    iarr[i] = (byte) i;                                                                                 
}                                                                                                      }                                                                                                   
carr = new char[200];                                                                                  carr = new char[200];                                                                               
Arrays.fill(carr, (char) -1);                                                                          Arrays.fill(carr, (char) -1);                                                                       
for (int i = 0; i &lt; 80; i++) {                                                                      for (int i = 0; i &lt; 80; i++) {                                                                   
carr[i] = (char) i;                                                                                    carr[i] = (char) i;                                                                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
