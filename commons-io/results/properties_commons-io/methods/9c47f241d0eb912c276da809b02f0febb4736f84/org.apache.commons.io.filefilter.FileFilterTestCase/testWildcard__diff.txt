public void testWildcard() throws Exception {                                                          public void testWildcard() throws Exception {                                                       
IOFileFilter filter = new WildcardFileFilter("*.txt");                                                 IOFileFilter filter = new WildcardFileFilter("*.txt");                                              
assertFiltering(filter, new File("log.txt"), true);                                                    assertFiltering(filter, new File("log.txt"), true);                                                 
assertFiltering(filter, new File("log.TXT"), false);                                                   assertFiltering(filter, new File("log.TXT"), false);                                                
filter = new WildcardFileFilter("*.txt", IOCase.SENSITIVE);                                            filter = new WildcardFileFilter("*.txt", IOCase.SENSITIVE);                                         
assertFiltering(filter, new File("log.txt"), true);                                                    assertFiltering(filter, new File("log.txt"), true);                                                 
assertFiltering(filter, new File("log.TXT"), false);                                                   assertFiltering(filter, new File("log.TXT"), false);                                                
filter = new WildcardFileFilter("*.txt", IOCase.INSENSITIVE);                                          filter = new WildcardFileFilter("*.txt", IOCase.INSENSITIVE);                                       
assertFiltering(filter, new File("log.txt"), true);                                                    assertFiltering(filter, new File("log.txt"), true);                                                 
assertFiltering(filter, new File("log.TXT"), true);                                                    assertFiltering(filter, new File("log.TXT"), true);                                                 
filter = new WildcardFileFilter("*.txt", IOCase.SYSTEM);                                               filter = new WildcardFileFilter("*.txt", IOCase.SYSTEM);                                            
assertFiltering(filter, new File("log.txt"), true);                                                    assertFiltering(filter, new File("log.txt"), true);                                                 
assertFiltering(filter, new File("log.TXT"), WINDOWS);                                                 assertFiltering(filter, new File("log.TXT"), WINDOWS);                                              
filter = new WildcardFileFilter("*.txt", (IOCase) null);                                               filter = new WildcardFileFilter("*.txt", (IOCase) null);                                            
assertFiltering(filter, new File("log.txt"), true);                                                    assertFiltering(filter, new File("log.txt"), true);                                                 
assertFiltering(filter, new File("log.TXT"), false);                                                   assertFiltering(filter, new File("log.TXT"), false);                                                
filter = new WildcardFileFilter(new String[] { "*.java", "*.class" });                                 filter = new WildcardFileFilter(new String[] { "*.java", "*.class" });                              
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("Test.class"), true);                                                 assertFiltering(filter, new File("Test.class"), true);                                              
assertFiltering(filter, new File("Test.jsp"), false);                                                  assertFiltering(filter, new File("Test.jsp"), false);                                               
filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, IOCase.SENSITIVE);               filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, IOCase.SENSITIVE);            
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("Test.JAVA"), false);                                                 assertFiltering(filter, new File("Test.JAVA"), false);                                              
filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, IOCase.INSENSITIVE);             filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, IOCase.INSENSITIVE);          
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("Test.JAVA"), true);                                                  assertFiltering(filter, new File("Test.JAVA"), true);                                               
filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, IOCase.SYSTEM);                  filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, IOCase.SYSTEM);               
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("Test.JAVA"), WINDOWS);                                               assertFiltering(filter, new File("Test.JAVA"), WINDOWS);                                            
filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, (IOCase) null);                  filter = new WildcardFileFilter(new String[] { "*.java", "*.class" }, (IOCase) null);               
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("Test.JAVA"), false);                                                 assertFiltering(filter, new File("Test.JAVA"), false);                                              
List patternList = Arrays.asList(new String[] { "*.txt", "*.xml", "*.gif" });                        | List&lt;String&gt; patternList = Arrays.asList(new String[] { "*.txt", "*.xml", "*.gif" });         
IOFileFilter listFilter = new WildcardFileFilter(patternList);                                         IOFileFilter listFilter = new WildcardFileFilter(patternList);                                      
assertFiltering(listFilter, new File("Test.txt"), true);                                               assertFiltering(listFilter, new File("Test.txt"), true);                                            
assertFiltering(listFilter, new File("Test.xml"), true);                                               assertFiltering(listFilter, new File("Test.xml"), true);                                            
assertFiltering(listFilter, new File("Test.gif"), true);                                               assertFiltering(listFilter, new File("Test.gif"), true);                                            
assertFiltering(listFilter, new File("Test.bmp"), false);                                              assertFiltering(listFilter, new File("Test.bmp"), false);                                           
File txtFile = new File("test.txt");                                                                   File txtFile = new File("test.txt");                                                                
File bmpFile = new File("test.bmp");                                                                   File bmpFile = new File("test.bmp");                                                                
File dir = new File("src/java");                                                                       File dir = new File("src/java");                                                                    
assertTrue(listFilter.accept(txtFile));                                                                assertTrue(listFilter.accept(txtFile));                                                             
assertTrue(!listFilter.accept(bmpFile));                                                               assertTrue(!listFilter.accept(bmpFile));                                                            
assertTrue(!listFilter.accept(dir));                                                                   assertTrue(!listFilter.accept(dir));                                                                
assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));                             assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));                          
assertTrue(!listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));                            assertTrue(!listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));                         
assertTrue(!listFilter.accept(dir.getParentFile(), dir.getName()));                                    assertTrue(!listFilter.accept(dir.getParentFile(), dir.getName()));                                 
try {                                                                                                  try {                                                                                               
new WildcardFileFilter((String) null);                                                                 new WildcardFileFilter((String) null);                                                              
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
new WildcardFileFilter((String[]) null);                                                               new WildcardFileFilter((String[]) null);                                                            
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
new WildcardFileFilter((List) null);                                                                 | new WildcardFileFilter((List&lt;String&gt;) null);                                                  
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
