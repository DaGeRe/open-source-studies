@Test                                                                                                  @Test                                                                                               
public void testStopWithNoFileUsingExecutor() throws Exception {                                       public void testStopWithNoFileUsingExecutor() throws Exception {                                    
final File file = new File(getTestDirectory(), "nosuchfile");                                          final File file = new File(getTestDirectory(), "nosuchfile");                                       
assertFalse("nosuchfile should not exist", file.exists());                                             assertFalse("nosuchfile should not exist", file.exists());                                          
final TestTailerListener listener = new TestTailerListener();                                          final TestTailerListener listener = new TestTailerListener();                                       
final int delay = 100;                                                                                 final int delay = 100;                                                                              
final int idle = 50;                                                                                   final int idle = 50;                                                                                
tailer = new Tailer(file, listener, delay, false);                                                     tailer = new Tailer(file, listener, delay, false);                                                  
final Executor exec = new ScheduledThreadPoolExecutor(1);                                              final Executor exec = new ScheduledThreadPoolExecutor(1);                                           
exec.execute(tailer);                                                                                  exec.execute(tailer);                                                                               
TestUtils.sleep(idle);                                                                                 TestUtils.sleep(idle);                                                                              
tailer.stop();                                                                                         tailer.stop();                                                                                      
tailer = null;                                                                                       |                                                                                                     
TestUtils.sleep(delay + idle);                                                                         TestUtils.sleep(delay + idle);                                                                      
assertNull("Should not generate Exception", listener.exception);                                       assertNull("Should not generate Exception", listener.exception);                                    
assertEquals("Expected init to be called", 1, listener.initialised);                                   assertEquals("Expected init to be called", 1, listener.initialised);                                
assertTrue("fileNotFound should be called", listener.notFound &gt; 0);                                 assertTrue("fileNotFound should be called", listener.notFound &gt; 0);                              
assertEquals("fileRotated should be not be called", 0, listener.rotated);                              assertEquals("fileRotated should be not be called", 0, listener.rotated);                           
assertEquals("end of file never reached", 0, listener.reachedEndOfFile);                               assertEquals("end of file never reached", 0, listener.reachedEndOfFile);                            
}                                                                                                      }                                                                                                   
