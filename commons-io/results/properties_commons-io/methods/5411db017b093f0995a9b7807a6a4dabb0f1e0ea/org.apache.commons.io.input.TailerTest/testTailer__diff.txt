@Test                                                                                                  @Test                                                                                               
public void testTailer() throws Exception {                                                            public void testTailer() throws Exception {                                                         
final long delayMillis = 50;                                                                           final long delayMillis = 50;                                                                        
final File file = new File(getTestDirectory(), "tailer1-test.txt");                                    final File file = new File(getTestDirectory(), "tailer1-test.txt");                                 
createFile(file, 0);                                                                                   createFile(file, 0);                                                                                
final TestTailerListener listener = new TestTailerListener();                                          final TestTailerListener listener = new TestTailerListener();                                       
final String osname = System.getProperty("os.name");                                                   final String osname = System.getProperty("os.name");                                                
final boolean isWindows = osname.startsWith("Windows");                                                final boolean isWindows = osname.startsWith("Windows");                                             
tailer = new Tailer(file, listener, delayMillis, false, isWindows);                                    tailer = new Tailer(file, listener, delayMillis, false, isWindows);                                 
final Thread thread = new Thread(tailer);                                                              final Thread thread = new Thread(tailer);                                                           
thread.start();                                                                                        thread.start();                                                                                     
write(file, "Line one", "Line two");                                                                   write(file, "Line one", "Line two");                                                                
final long testDelayMillis = delayMillis * 10;                                                         final long testDelayMillis = delayMillis * 10;                                                      
TestUtils.sleep(testDelayMillis);                                                                      TestUtils.sleep(testDelayMillis);                                                                   
List&lt;String&gt; lines = listener.getLines();                                                        List&lt;String&gt; lines = listener.getLines();                                                     
assertEquals("1 line count", 2, lines.size());                                                         assertEquals("1 line count", 2, lines.size());                                                      
assertEquals("1 line 1", "Line one", lines.get(0));                                                    assertEquals("1 line 1", "Line one", lines.get(0));                                                 
assertEquals("1 line 2", "Line two", lines.get(1));                                                    assertEquals("1 line 2", "Line two", lines.get(1));                                                 
listener.clear();                                                                                      listener.clear();                                                                                   
write(file, "Line three");                                                                             write(file, "Line three");                                                                          
TestUtils.sleep(testDelayMillis);                                                                      TestUtils.sleep(testDelayMillis);                                                                   
lines = listener.getLines();                                                                           lines = listener.getLines();                                                                        
assertEquals("2 line count", 1, lines.size());                                                         assertEquals("2 line count", 1, lines.size());                                                      
assertEquals("2 line 3", "Line three", lines.get(0));                                                  assertEquals("2 line 3", "Line three", lines.get(0));                                               
listener.clear();                                                                                      listener.clear();                                                                                   
lines = FileUtils.readLines(file, "UTF-8");                                                            lines = FileUtils.readLines(file, "UTF-8");                                                         
assertEquals("3 line count", 3, lines.size());                                                         assertEquals("3 line count", 3, lines.size());                                                      
assertEquals("3 line 1", "Line one", lines.get(0));                                                    assertEquals("3 line 1", "Line one", lines.get(0));                                                 
assertEquals("3 line 2", "Line two", lines.get(1));                                                    assertEquals("3 line 2", "Line two", lines.get(1));                                                 
assertEquals("3 line 3", "Line three", lines.get(2));                                                  assertEquals("3 line 3", "Line three", lines.get(2));                                               
file.delete();                                                                                         file.delete();                                                                                      
final boolean exists = file.exists();                                                                  final boolean exists = file.exists();                                                               
assertFalse("File should not exist", exists);                                                          assertFalse("File should not exist", exists);                                                       
createFile(file, 0);                                                                                   createFile(file, 0);                                                                                
TestUtils.sleep(testDelayMillis);                                                                      TestUtils.sleep(testDelayMillis);                                                                   
write(file, "Line four");                                                                              write(file, "Line four");                                                                           
TestUtils.sleep(testDelayMillis);                                                                      TestUtils.sleep(testDelayMillis);                                                                   
lines = listener.getLines();                                                                           lines = listener.getLines();                                                                        
assertEquals("4 line count", 1, lines.size());                                                         assertEquals("4 line count", 1, lines.size());                                                      
assertEquals("4 line 3", "Line four", lines.get(0));                                                   assertEquals("4 line 3", "Line four", lines.get(0));                                                
listener.clear();                                                                                      listener.clear();                                                                                   
thread.interrupt();                                                                                    thread.interrupt();                                                                                 
TestUtils.sleep(testDelayMillis * 4);                                                                  TestUtils.sleep(testDelayMillis * 4);                                                               
write(file, "Line five");                                                                              write(file, "Line five");                                                                           
assertEquals("4 line count", 0, listener.getLines().size());                                           assertEquals("4 line count", 0, listener.getLines().size());                                        
assertNotNull("Missing InterruptedException", listener.exception);                                     assertNotNull("Missing InterruptedException", listener.exception);                                  
assertTrue("Unexpected Exception: " + listener.exception, listener.exception instanceof InterruptedE   assertTrue("Unexpected Exception: " + listener.exception, listener.exception instanceof InterruptedE
assertEquals("Expected init to be called", 1, listener.initialised);                                   assertEquals("Expected init to be called", 1, listener.initialised);                                
assertEquals("fileNotFound should not be called", 0, listener.notFound);                               assertEquals("fileNotFound should not be called", 0, listener.notFound);                            
assertEquals("fileRotated should be be called", 1, listener.rotated);                                  assertEquals("fileRotated should be be called", 1, listener.rotated);                               
tailer.stop();                                                                                       |                                                                                                     
tailer = null;                                                                                       |                                                                                                     
}                                                                                                      }                                                                                                   
