@Test                                                                                                  @Test                                                                                               
public void testReadWithBOMUtf32Le() throws Exception {                                                public void testReadWithBOMUtf32Le() throws Exception {                                             
Assume.assumeTrue(Charset.isSupported("UTF_32LE"));                                                    Assume.assumeTrue(Charset.isSupported("UTF_32LE"));                                                 
final byte[] data = "ABC".getBytes("UTF_32LE");                                                        final byte[] data = "ABC".getBytes("UTF_32LE");                                                     
final BOMInputStream in = new BOMInputStream(createUtf32LeDataStream(data, true), ByteOrderMark.UTF_ | try (final BOMInputStream in = new BOMInputStream(createUtf32LeDataStream(data, true), ByteOrderMark
assertEquals('A', in.read());                                                                          assertEquals('A', in.read());                                                                       
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals('B', in.read());                                                                          assertEquals('B', in.read());                                                                       
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals('C', in.read());                                                                          assertEquals('C', in.read());                                                                       
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(0, in.read());                                                                            assertEquals(0, in.read());                                                                         
assertEquals(-1, in.read());                                                                           assertEquals(-1, in.read());                                                                        
assertTrue("hasBOM()", in.hasBOM());                                                                   assertTrue("hasBOM()", in.hasBOM());                                                                
assertTrue("hasBOM(UTF-32LE)", in.hasBOM(ByteOrderMark.UTF_32LE));                                     assertTrue("hasBOM(UTF-32LE)", in.hasBOM(ByteOrderMark.UTF_32LE));                                  
assertEquals("getBOM", ByteOrderMark.UTF_32LE, in.getBOM());                                           assertEquals("getBOM", ByteOrderMark.UTF_32LE, in.getBOM());                                        
try {                                                                                                  try {                                                                                               
in.hasBOM(ByteOrderMark.UTF_32BE);                                                                     in.hasBOM(ByteOrderMark.UTF_32BE);                                                                  
fail("Expected IllegalArgumentException");                                                             fail("Expected IllegalArgumentException");                                                          
} catch (final IllegalArgumentException e) {                                                           } catch (final IllegalArgumentException e) {                                                        
}                                                                                                      }                                                                                                   
in.close();                                                                                          |                                                                                                     
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
