public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
    if (fileName == null && wildcardMatcher == null) {
        return true;
    }
    if (fileName == null || wildcardMatcher == null) {
        return false;
    }
    if (caseSensitivity == null) {
        caseSensitivity = IOCase.SENSITIVE;
    }
    final String[] wcs = splitOnTokens(wildcardMatcher);
    boolean anyChars = false;
    int textIdx = 0;
    int wcsIdx = 0;
    final Stack<int[]> backtrack = new Stack<>();
    do {
        if (backtrack.size() > 0) {
            final int[] array = backtrack.pop();
            wcsIdx = array[0];
            textIdx = array[1];
            anyChars = true;
        }
        while (wcsIdx < wcs.length) {
            if (wcs[wcsIdx].equals("?")) {
                textIdx++;
                if (textIdx > fileName.length()) {
                    break;
                }
                anyChars = false;
            } else if (wcs[wcsIdx].equals("*")) {
                anyChars = true;
                if (wcsIdx == wcs.length - 1) {
                    textIdx = fileName.length();
                }
            } else {
                if (anyChars) {
                    textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                    if (textIdx == NOT_FOUND) {
                        break;
                    }
                    final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                    if (repeat >= 0) {
                        backtrack.push(new int[] { wcsIdx, repeat });
                    }
                } else {
                    if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        break;
                    }
                }
                textIdx += wcs[wcsIdx].length();
                anyChars = false;
            }
            wcsIdx++;
        }
        if (wcsIdx == wcs.length && textIdx == fileName.length()) {
            return true;
        }
    } while (backtrack.size() > 0);
    return false;
}