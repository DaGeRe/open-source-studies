public void testRegex() throws Exception {                                                             public void testRegex() throws Exception {                                                          
IOFileFilter filter = FileFilterUtils.regex("^.*[tT]est(-\\d+)?\\.java$");                           | IOFileFilter filter = new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$");                            
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("test-10.java"), true);                                               assertFiltering(filter, new File("test-10.java"), true);                                            
assertFiltering(filter, new File("test-.java"), false);                                                assertFiltering(filter, new File("test-.java"), false);                                             
filter = FileFilterUtils.regex("^[Tt]est.java$");                                                    | filter = new RegexFileFilter("^[Tt]est.java$");                                                     
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("test.java"), true);                                                  assertFiltering(filter, new File("test.java"), true);                                               
assertFiltering(filter, new File("tEST.java"), false);                                                 assertFiltering(filter, new File("tEST.java"), false);                                              
filter = new RegexFileFilter(Pattern.compile("^test.java$", Pattern.CASE_INSENSITIVE));                filter = new RegexFileFilter(Pattern.compile("^test.java$", Pattern.CASE_INSENSITIVE));             
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("test.java"), true);                                                  assertFiltering(filter, new File("test.java"), true);                                               
assertFiltering(filter, new File("tEST.java"), true);                                                  assertFiltering(filter, new File("tEST.java"), true);                                               
filter = FileFilterUtils.regex("^test.java$", Pattern.CASE_INSENSITIVE);                             | filter = new RegexFileFilter("^test.java$", Pattern.CASE_INSENSITIVE);                              
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("test.java"), true);                                                  assertFiltering(filter, new File("test.java"), true);                                               
assertFiltering(filter, new File("tEST.java"), true);                                                  assertFiltering(filter, new File("tEST.java"), true);                                               
filter = FileFilterUtils.regex("^test.java$", IOCase.INSENSITIVE);                                   | filter = new RegexFileFilter("^test.java$", IOCase.INSENSITIVE);                                    
assertFiltering(filter, new File("Test.java"), true);                                                  assertFiltering(filter, new File("Test.java"), true);                                               
assertFiltering(filter, new File("test.java"), true);                                                  assertFiltering(filter, new File("test.java"), true);                                               
assertFiltering(filter, new File("tEST.java"), true);                                                  assertFiltering(filter, new File("tEST.java"), true);                                               
try {                                                                                                  try {                                                                                               
FileFilterUtils.regex((String) null);                                                                | new RegexFileFilter((String) null);                                                                 
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FileFilterUtils.regex((String) null, Pattern.CASE_INSENSITIVE);                                      | new RegexFileFilter((String) null, Pattern.CASE_INSENSITIVE);                                       
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
FileFilterUtils.regex((String) null, IOCase.INSENSITIVE);                                            | new RegexFileFilter((String) null, IOCase.INSENSITIVE);                                             
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
new RegexFileFilter((java.util.regex.Pattern) null);                                                   new RegexFileFilter((java.util.regex.Pattern) null);                                                
fail();                                                                                                fail();                                                                                             
} catch (IllegalArgumentException ex) {                                                                } catch (IllegalArgumentException ex) {                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
