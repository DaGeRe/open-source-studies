private static String getXmlProlog(final InputStream is, final String guessedEnc) throws IOException   private static String getXmlProlog(final InputStream is, final String guessedEnc) throws IOException
String encoding = null;                                                                                String encoding = null;                                                                             
if (guessedEnc != null) {                                                                              if (guessedEnc != null) {                                                                           
final byte[] bytes = new byte[BUFFER_SIZE];                                                            final byte[] bytes = new byte[BUFFER_SIZE];                                                         
is.mark(BUFFER_SIZE);                                                                                  is.mark(BUFFER_SIZE);                                                                               
int offset = 0;                                                                                        int offset = 0;                                                                                     
int max = BUFFER_SIZE;                                                                                 int max = BUFFER_SIZE;                                                                              
int c = is.read(bytes, offset, max);                                                                   int c = is.read(bytes, offset, max);                                                                
int firstGT = -1;                                                                                      int firstGT = -1;                                                                                   
String xmlProlog = "";                                                                                 String xmlProlog = "";                                                                              
while (c != -1 && firstGT == -1 && offset &lt; BUFFER_SIZE) {                                          while (c != -1 && firstGT == -1 && offset &lt; BUFFER_SIZE) {                                       
offset += c;                                                                                           offset += c;                                                                                        
max -= c;                                                                                              max -= c;                                                                                           
c = is.read(bytes, offset, max);                                                                       c = is.read(bytes, offset, max);                                                                    
xmlProlog = new String(bytes, 0, offset, guessedEnc);                                                  xmlProlog = new String(bytes, 0, offset, guessedEnc);                                               
firstGT = xmlProlog.indexOf('&gt;');                                                                   firstGT = xmlProlog.indexOf('&gt;');                                                                
}                                                                                                      }                                                                                                   
if (firstGT == -1) {                                                                                   if (firstGT == -1) {                                                                                
if (c == -1) {                                                                                         if (c == -1) {                                                                                      
throw new IOException("Unexpected end of XML stream");                                                 throw new IOException("Unexpected end of XML stream");                                              
} else {                                                                                               } else {                                                                                            
throw new IOException("XML prolog or ROOT element not found on first " + offset + " bytes");           throw new IOException("XML prolog or ROOT element not found on first " + offset + " bytes");        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
final int bytesRead = offset;                                                                          final int bytesRead = offset;                                                                       
if (bytesRead &gt; 0) {                                                                                if (bytesRead &gt; 0) {                                                                             
is.reset();                                                                                            is.reset();                                                                                         
final BufferedReader bReader = new BufferedReader(new StringReader(xmlProlog.substring(0, firstGT +    final BufferedReader bReader = new BufferedReader(new StringReader(xmlProlog.substring(0, firstGT + 
final StringBuffer prolog = new StringBuffer();                                                        final StringBuffer prolog = new StringBuffer();                                                     
String line = bReader.readLine();                                                                      String line = bReader.readLine();                                                                   
while (line != null) {                                                                                 while (line != null) {                                                                              
prolog.append(line);                                                                                   prolog.append(line);                                                                                
line = bReader.readLine();                                                                             line = bReader.readLine();                                                                          
}                                                                                                      }                                                                                                   
final Matcher m = ENCODING_PATTERN.matcher(prolog);                                                    final Matcher m = ENCODING_PATTERN.matcher(prolog);                                                 
if (m.find()) {                                                                                        if (m.find()) {                                                                                     
encoding = m.group(1).toUpperCase();                                                                 | encoding = m.group(1).toUpperCase(Locale.ROOT);                                                     
encoding = encoding.substring(1, encoding.length() - 1);                                               encoding = encoding.substring(1, encoding.length() - 1);                                            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return encoding;                                                                                       return encoding;                                                                                    
}                                                                                                      }                                                                                                   
