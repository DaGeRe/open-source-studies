private void checkAndNotify(FilesystemEntry parent, FilesystemEntry[] previous, File[] files) {
    int c = 0;
    FilesystemEntry[] current = files.length > 0 ? new FilesystemEntry[files.length] : EMPTY_ENTRIES;
    for (int p = 0; p < previous.length; p++) {
        while (c < files.length && comparator.compare(previous[p].getFile(), files[c]) > 0) {
            current[c] = createFileEntry(parent, files[c]);
            doCreate(current[c]);
            c++;
        }
        if (c < files.length && comparator.compare(previous[p].getFile(), files[c]) == 0) {
            doMatch(previous[p], files[c]);
            checkAndNotify(previous[p], previous[p].getChildren(), listFiles(files[c]));
            current[c] = previous[p];
            c++;
        } else {
            checkAndNotify(previous[p], previous[p].getChildren(), EMPTY_FILES);
            doDelete(previous[p]);
        }
    }
    for (; c < files.length; c++) {
        current[c] = createFileEntry(parent, files[c]);
        doCreate(current[c]);
    }
    parent.setChildren(current);
}